
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.12.1.454

// ldbanno -n Verilog -o Server_CPLD_V11_PRJ_impl1_vo.vo -w -neg -gui Server_CPLD_V11_PRJ_impl1.ncd 
// Netlist created on Wed Jul 12 16:07:26 2023
// Netlist written on Wed Jul 12 16:08:10 2023
// Design is for device LCMXO3LF-2100C
// Design is for package CABGA256
// Design is for performance grade 5

`timescale 1 ns / 1 ps

module server_top ( clock, cpld_extrst, fm_pwr_btn, bmc_srst, bmc_ssprst, 
                    bmc_extrst, bmc_pcie_rst, bmc_pwrgd, en_vddc_a, 
                    en_pcie_phy_a, en_vddq_a0, en_vddq_a1, en_vpp_a0, 
                    en_vpp_a1, en_vtt_a0, en_vtt_a1, en_ddr_phy_a, en_pcie_h_a, 
                    en_vqps18_a, en_vddc_b, en_pcie_phy_b, en_vddq_b0, 
                    en_vddq_b1, en_vpp_b0, en_vpp_b1, en_vtt_b0, en_vtt_b1, 
                    en_ddr_phy_b, en_pcie_h_b, en_vqps18_b, en_vdd_1v8, 
                    en_vdd_3v3, en_vdd_5v, pg_vddc_a, pg_pcie_phy_a, 
                    pg_vddq_a0, pg_vddq_a1, pg_vpp_a0, pg_vpp_a1, pg_vtt_a0, 
                    pg_vtt_a1, pg_ddr_phy_a, pg_pcie_h_a, pg_vddc_b, 
                    pg_pcie_phy_b, pg_vddq_b0, pg_vddq_b1, pg_vpp_b0, 
                    pg_vpp_b1, pg_vtt_b0, pg_vtt_b1, pg_ddr_phy_b, pg_pcie_h_b, 
                    pg_vdd_1v8, pg_vdd_3v3, pg_vdd_5v, pg_5v_aux, pg_bp_5v, 
                    pg_3v3_riser, en_vdd_12v, ncp0_d_oc, ncp0_gok, en_12v_bp, 
                    bp_ncp_d_oc, bp_ncp_gok, psu0_pwrok, psu1_pwrok, 
                    psu0_alert, psu1_alert, psu0_prsnt, psu1_prsnt, 
                    psu_ps_on_cpld, en_pcie_sw_0v8_a, en_pcie_sw_0v8_b, 
                    pg_pcie_sw_0v8_a, pg_pcie_sw_0v8_b, cpua_sys_reset, 
                    cpub_sys_reset, sg0_pcie1_l0_reset, sg1_pcie0_l0_reset, 
                    pcie_swa_sys_rst, pcie_swb_sys_rst, pcie_swa_prst, 
                    pcie_swb_prst, pcie_nvme0_rst, pcie_nvme1_rst, 
                    pcie_usb0_rst, pcie_usb1_rst, pcie_sata_rst, usb1_ponrst, 
                    usb2_ponrst, riser0_slot_id0, riser0_slot_id1, 
                    riser0_slot_id2, riser0_slot16a_prsnt, 
                    riser0_slot16b_prsnt, riser1_slot_id0, riser1_slot_id1, 
                    riser1_slot_id2, riser1_slot16a_prsnt, 
                    riser1_slot16b_prsnt, riser2_slot_id0, riser2_slot_id1, 
                    riser2_slot16b_prsnt, riser0_reset, riser1_reset, 
                    riser2_reset, en_3v3_riser, en_bp_5v, ddr0_event_a, 
                    ddr1_event_a, ddr2_event_a, ddr3_event_a, ddr0_event_b, 
                    ddr1_event_b, ddr2_event_b, ddr3_event_b, bmc_sda, bmc_scl, 
                    e2prom_scl, e2prom_sda, pwr_button_a, pwr_button_b, 
                    sys_uart_txd3, sys_uart_rxd3, uart0_tx_a, uart0_rx_a, 
                    uart1_tx_a, uart1_rx_a, uart0_tx_b, uart0_rx_b, uart1_tx_b, 
                    uart1_rx_b, bmc_gpio24, bmc_gpio25, bmc_gpio48, bmc_gpio49, 
                    bmc_gpio51, bmc_gpio53, bmc_gpio54, a_gpio2, a_gpio3, 
                    a_gpio5, a_gpio16, vga_6505_in1, vga_6505_in2, cpld_heart, 
                    cpld_led_test );
  input  clock, cpld_extrst, fm_pwr_btn, pg_vddc_a, pg_pcie_phy_a, pg_vddq_a0, 
         pg_vddq_a1, pg_vpp_a0, pg_vpp_a1, pg_vtt_a0, pg_vtt_a1, pg_ddr_phy_a, 
         pg_pcie_h_a, pg_vddc_b, pg_pcie_phy_b, pg_vddq_b0, pg_vddq_b1, 
         pg_vpp_b0, pg_vpp_b1, pg_vtt_b0, pg_vtt_b1, pg_ddr_phy_b, pg_pcie_h_b, 
         pg_vdd_1v8, pg_vdd_3v3, pg_vdd_5v, pg_5v_aux, pg_bp_5v, pg_3v3_riser, 
         ncp0_d_oc, ncp0_gok, bp_ncp_d_oc, bp_ncp_gok, psu0_pwrok, psu1_pwrok, 
         psu0_alert, psu1_alert, psu0_prsnt, psu1_prsnt, pg_pcie_sw_0v8_a, 
         pg_pcie_sw_0v8_b, sg0_pcie1_l0_reset, sg1_pcie0_l0_reset, 
         riser0_slot_id0, riser0_slot_id1, riser0_slot_id2, 
         riser0_slot16a_prsnt, riser0_slot16b_prsnt, riser1_slot_id0, 
         riser1_slot_id1, riser1_slot_id2, riser1_slot16a_prsnt, 
         riser1_slot16b_prsnt, riser2_slot_id0, riser2_slot_id1, 
         riser2_slot16b_prsnt, ddr0_event_a, ddr1_event_a, ddr2_event_a, 
         ddr3_event_a, ddr0_event_b, ddr1_event_b, ddr2_event_b, ddr3_event_b, 
         sys_uart_txd3, uart0_tx_a, uart1_tx_a, uart0_tx_b, uart1_tx_b, 
         bmc_gpio24, bmc_gpio25, bmc_gpio48, bmc_gpio49, a_gpio3, a_gpio5, 
         a_gpio16;
  output bmc_srst, bmc_ssprst, bmc_extrst, bmc_pcie_rst, bmc_pwrgd, en_vddc_a, 
         en_pcie_phy_a, en_vddq_a0, en_vddq_a1, en_vpp_a0, en_vpp_a1, 
         en_vtt_a0, en_vtt_a1, en_ddr_phy_a, en_pcie_h_a, en_vqps18_a, 
         en_vddc_b, en_pcie_phy_b, en_vddq_b0, en_vddq_b1, en_vpp_b0, 
         en_vpp_b1, en_vtt_b0, en_vtt_b1, en_ddr_phy_b, en_pcie_h_b, 
         en_vqps18_b, en_vdd_1v8, en_vdd_3v3, en_vdd_5v, en_vdd_12v, en_12v_bp, 
         psu_ps_on_cpld, en_pcie_sw_0v8_a, en_pcie_sw_0v8_b, cpua_sys_reset, 
         cpub_sys_reset, pcie_swa_sys_rst, pcie_swb_sys_rst, pcie_swa_prst, 
         pcie_swb_prst, pcie_nvme0_rst, pcie_nvme1_rst, pcie_usb0_rst, 
         pcie_usb1_rst, pcie_sata_rst, usb1_ponrst, usb2_ponrst, riser0_reset, 
         riser1_reset, riser2_reset, en_3v3_riser, en_bp_5v, bmc_scl, 
         pwr_button_a, pwr_button_b, sys_uart_rxd3, uart0_rx_a, uart1_rx_a, 
         uart0_rx_b, uart1_rx_b, bmc_gpio51, bmc_gpio53, bmc_gpio54, a_gpio2, 
         vga_6505_in1, vga_6505_in2, cpld_heart, cpld_led_test;
  inout  bmc_sda, e2prom_scl, e2prom_sda;
  wire   \eeprom_i2c_inst/e2prom_i2c/timeout_cnt[4] , 
         \eeprom_i2c_inst/e2prom_i2c/N_129_i , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt[3] , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[4] , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[3] , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_2_sqmuxa_i , clock_c, 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_cry[2] , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt[2] , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt[1] , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[2] , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[1] , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_cry[0] , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt[0] , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[0] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt[9] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_s[9] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnte , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[8] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt[8] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt[7] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_s[8] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_s[7] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[6] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt[6] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt[5] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_s[6] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_s[5] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[4] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt[4] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt[3] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_s[4] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_s[3] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[2] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt[2] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt[1] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_s[2] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_s[1] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[0] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt[0] , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_s[0] , 
         \bmc_reset_ctrl_inst/srst_delay[7] , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1[7] , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_6 , 
         \bmc_reset_ctrl_inst/srst_delay[6] , 
         \bmc_reset_ctrl_inst/srst_delay[5] , \bmc_reset_ctrl_inst.sig_r0 , 
         reset_i, \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_4 , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_5_0_S0 , 
         \bmc_reset_ctrl_inst.sig_r1 , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_5_0_S1 , 
         \bmc_reset_ctrl_inst/srst_delay[4] , 
         \bmc_reset_ctrl_inst/srst_delay[3] , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1[4] , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_2 , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_3_0_S0 , 
         \bmc_reset_ctrl_inst/srst_delay[2] , 
         \bmc_reset_ctrl_inst/srst_delay[1] , 
         \bmc_reset_ctrl_inst/next_state[1] , 
         \bmc_reset_ctrl_inst/next_state[0] , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_0 , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_1_0_S0 , 
         \bmc_reset_ctrl_inst/current_state[0] , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_1_0_S1 , 
         \bmc_reset_ctrl_inst.prst_delay_4[2] , 
         \bmc_reset_ctrl_inst/srst_delay[0] , \bmc_reset_ctrl_inst/bmc_srst6 , 
         \bmc_reset_ctrl_inst/un1_srst_delay_1[0] , 
         \bmc_reset_ctrl_inst/prst_delay , 
         \bmc_reset_ctrl_inst/prst_delay[15] , 
         \bmc_reset_ctrl_inst/prst_delay_s[15] , 
         \bmc_reset_ctrl_inst/prst_delaye , 
         \bmc_reset_ctrl_inst/prst_delay_cry[14] , 
         \bmc_reset_ctrl_inst/prst_delay[14] , 
         \bmc_reset_ctrl_inst/prst_delay[13] , 
         \bmc_reset_ctrl_inst/prst_delay_s[14] , 
         \bmc_reset_ctrl_inst/prst_delay_s[13] , 
         \bmc_reset_ctrl_inst/prst_delay_cry[12] , 
         \bmc_reset_ctrl_inst/prst_delay[12] , 
         \bmc_reset_ctrl_inst/prst_delay[11] , 
         \bmc_reset_ctrl_inst/prst_delay_s[12] , 
         \bmc_reset_ctrl_inst/prst_delay_s[11] , 
         \bmc_reset_ctrl_inst/prst_delay_cry[10] , 
         \bmc_reset_ctrl_inst/prst_delay[10] , 
         \bmc_reset_ctrl_inst/prst_delay[9] , 
         \bmc_reset_ctrl_inst/prst_delay_s[10] , 
         \bmc_reset_ctrl_inst/prst_delay_s[9] , 
         \bmc_reset_ctrl_inst/prst_delay_cry[8] , 
         \bmc_reset_ctrl_inst/prst_delay[8] , 
         \bmc_reset_ctrl_inst/prst_delay[7] , 
         \bmc_reset_ctrl_inst/prst_delay_s[8] , 
         \bmc_reset_ctrl_inst/prst_delay_s[7] , 
         \bmc_reset_ctrl_inst/prst_delay_cry[6] , 
         \bmc_reset_ctrl_inst/prst_delay[6] , 
         \bmc_reset_ctrl_inst/prst_delay[5] , 
         \bmc_reset_ctrl_inst/prst_delay_s[6] , 
         \bmc_reset_ctrl_inst/prst_delay_s[5] , 
         \bmc_reset_ctrl_inst/prst_delay_cry[4] , 
         \bmc_reset_ctrl_inst/prst_delay[4] , 
         \bmc_reset_ctrl_inst/prst_delay[3] , 
         \bmc_reset_ctrl_inst/prst_delay_s[4] , 
         \bmc_reset_ctrl_inst/prst_delay_s[3] , 
         \bmc_reset_ctrl_inst/prst_delay_cry[2] , 
         \bmc_reset_ctrl_inst/prst_delay[2] , 
         \bmc_reset_ctrl_inst/prst_delay[1] , 
         \bmc_reset_ctrl_inst/prst_delay_s[2] , 
         \bmc_reset_ctrl_inst/prst_delay_s[1] , 
         \bmc_reset_ctrl_inst/prst_delay_cry[0] , 
         \bmc_reset_ctrl_inst/prst_delay[0] , 
         \bmc_reset_ctrl_inst/prst_delay_s[0] , \usb_reset_ctrl_inst/N_806_i , 
         \usb_reset_ctrl_inst/urst_delay[15] , 
         \usb_reset_ctrl_inst/urst_delay_s[15] , 
         \usb_reset_ctrl_inst/urst_delaye , 
         \usb_reset_ctrl_inst/urst_delay_cry[14] , 
         \usb_reset_ctrl_inst/urst_delay[14] , 
         \usb_reset_ctrl_inst/urst_delay[13] , 
         \usb_reset_ctrl_inst/urst_delay_s[14] , 
         \usb_reset_ctrl_inst/urst_delay_s[13] , 
         \usb_reset_ctrl_inst/urst_delay_cry[12] , 
         \usb_reset_ctrl_inst/urst_delay[12] , 
         \usb_reset_ctrl_inst/urst_delay[11] , 
         \usb_reset_ctrl_inst/urst_delay_s[12] , 
         \usb_reset_ctrl_inst/urst_delay_s[11] , 
         \usb_reset_ctrl_inst/urst_delay_cry[10] , 
         \usb_reset_ctrl_inst/urst_delay[10] , 
         \usb_reset_ctrl_inst/urst_delay[9] , 
         \usb_reset_ctrl_inst/urst_delay_s[10] , 
         \usb_reset_ctrl_inst/urst_delay_s[9] , 
         \usb_reset_ctrl_inst/urst_delay_cry[8] , 
         \usb_reset_ctrl_inst/urst_delay[8] , 
         \usb_reset_ctrl_inst/urst_delay[7] , 
         \usb_reset_ctrl_inst/urst_delay_s[8] , 
         \usb_reset_ctrl_inst/urst_delay_s[7] , 
         \usb_reset_ctrl_inst/urst_delay_cry[6] , 
         \usb_reset_ctrl_inst/urst_delay[6] , 
         \usb_reset_ctrl_inst/urst_delay[5] , 
         \usb_reset_ctrl_inst/urst_delay_s[6] , 
         \usb_reset_ctrl_inst/urst_delay_s[5] , 
         \usb_reset_ctrl_inst/urst_delay_cry[4] , 
         \usb_reset_ctrl_inst/urst_delay[4] , 
         \usb_reset_ctrl_inst/urst_delay[3] , 
         \usb_reset_ctrl_inst/urst_delay_s[4] , 
         \usb_reset_ctrl_inst/urst_delay_s[3] , 
         \usb_reset_ctrl_inst/urst_delay_cry[2] , 
         \usb_reset_ctrl_inst/urst_delay[2] , 
         \usb_reset_ctrl_inst/urst_delay[1] , 
         \usb_reset_ctrl_inst/urst_delay_s[2] , 
         \usb_reset_ctrl_inst/urst_delay_s[1] , 
         \usb_reset_ctrl_inst/urst_delay_cry[0] , 
         \usb_reset_ctrl_inst/urst_delay[0] , 
         \usb_reset_ctrl_inst/urst_delay_s[0] , 
         \server_power_control/switch_reset_control/switch_rst_cnt[7] , 
         \server_power_control/switch_reset_control/N_32_i , 
         \server_power_control/switch_reset_control/switch_rst_cnt_s[7] , 
         \server_power_control/switch_reset_control/switch_rst_cnte , 
         \server_power_control/switch_reset_control/switch_rst_cnt_cry[6] , 
         \server_power_control/switch_reset_control/switch_rst_cnt[6] , 
         \server_power_control/switch_reset_control/switch_rst_cnt[5] , 
         \server_power_control/switch_reset_control/switch_rst_cnt_s[6] , 
         \server_power_control/switch_reset_control/switch_rst_cnt_s[5] , 
         \server_power_control/switch_reset_control/switch_rst_cnt_cry[4] , 
         \server_power_control/switch_reset_control/switch_rst_cnt[4] , 
         \server_power_control/switch_reset_control/switch_rst_cnt[3] , 
         \server_power_control/switch_reset_control/switch_rst_cnt_s[4] , 
         \server_power_control/switch_reset_control/switch_rst_cnt_s[3] , 
         \server_power_control/switch_reset_control/switch_rst_cnt_cry[2] , 
         \server_power_control/switch_reset_control/switch_rst_cnt[2] , 
         \server_power_control/switch_reset_control/switch_rst_cnt[1] , 
         \server_power_control/switch_reset_control/switch_rst_cnt_s[2] , 
         \server_power_control/switch_reset_control/switch_rst_cnt_s[1] , 
         \server_power_control/switch_reset_control/switch_rst_cnt_cry[0] , 
         \server_power_control/switch_reset_control/switch_rst_cnt[0] , 
         \server_power_control/switch_reset_control/switch_rst_cnt_s[0] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt[8] , 
         \server_power_control/switch_reset_control/N_461 , 
         \server_power_control/switch_reset_control/switch_0v8_cnt[7] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_s[8] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_s[7] , 
         \server_power_control/switch_reset_control/N_434_i , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_cry[6] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt[6] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt[5] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_s[6] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_s[5] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_cry[4] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt[4] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt[3] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_s[4] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_s[3] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_cry[2] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt[2] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt[1] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_s[2] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_s[1] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_cry[0] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt[0] , 
         \server_power_control/switch_reset_control/switch_0v8_cnt_s[0] , 
         \server_power_control/cpu_pwr_control/N_601_i , 
         \server_power_control/cpu_pwr_control/seq_cnt[10] , 
         \server_power_control/cpu_pwr_control/seq_cnt[9] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[10] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[9] , 
         \server_power_control/cpu_pwr_control/seq_cnte , 
         \server_power_control/cpu_pwr_control/seq_cnt_cry[8] , 
         \server_power_control/cpu_pwr_control/seq_cnt[8] , 
         \server_power_control/cpu_pwr_control/seq_cnt[7] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[8] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[7] , 
         \server_power_control/cpu_pwr_control/seq_cnt_cry[6] , 
         \server_power_control/cpu_pwr_control/seq_cnt[6] , 
         \server_power_control/cpu_pwr_control/seq_cnt[5] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[6] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[5] , 
         \server_power_control/cpu_pwr_control/seq_cnt_cry[4] , 
         \server_power_control/cpu_pwr_control/seq_cnt[4] , 
         \server_power_control/cpu_pwr_control/seq_cnt[3] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[4] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[3] , 
         \server_power_control/cpu_pwr_control/seq_cnt_cry[2] , 
         \server_power_control/cpu_pwr_control/seq_cnt[2] , 
         \server_power_control/cpu_pwr_control/seq_cnt[1] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[2] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[1] , 
         \server_power_control/cpu_pwr_control/seq_cnt_cry[0] , 
         \server_power_control/cpu_pwr_control/seq_cnt[0] , 
         \server_power_control/cpu_pwr_control/seq_cnt_s[0] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[7] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[7] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_timee , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[6] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[6] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[5] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[6] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[5] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[4] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[4] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[3] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[4] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[3] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[2] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[2] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[1] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[2] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[1] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[0] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[0] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[0] 
         , \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[7] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[7] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnte , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[6] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[6] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[5] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[6] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[5] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[4] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[4] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[3] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[4] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[3] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[2] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[2] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[1] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[2] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[1] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[0] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[0] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[0] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[15] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[15] , 
         \server_power_control/power_signal_detect_inst/low_time_cnte , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_cry[14] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[14] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[13] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[14] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[13] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_cry[12] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[12] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[11] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[12] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[11] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_cry[10] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[10] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[9] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[10] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[9] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_cry[8] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[8] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[7] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[8] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[7] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_cry[6] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[6] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[5] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[6] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[5] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_cry[4] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[4] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[3] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[4] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[3] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_cry[2] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[2] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[1] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[2] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[1] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_cry[0] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt[0] , 
         \server_power_control/power_signal_detect_inst/low_time_cnt_s[0] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[15] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[15] , 
         \server_power_control/power_signal_detect_inst/debounce_cnte , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_cry[14] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[14] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[13] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[14] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[13] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_cry[12] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[12] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[11] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[12] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[11] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_cry[10] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[10] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[9] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[10] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[9] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_cry[8] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[8] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[7] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[8] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[7] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_cry[6] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[6] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[5] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[6] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[5] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_cry[4] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[4] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[3] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[4] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[3] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_cry[2] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[2] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[1] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[2] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[1] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_cry[0] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt[0] , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_s[0] , 
         \server_power_control/cpu_dly[7] , 
         \server_power_control/un1_cpu_dly_1[7] , 
         \server_power_control/un1_cpu_dly_1_cry_6 , 
         \server_power_control/cpu_dly[6] , \server_power_control/cpu_dly[5] , 
         \server_power_control/un1_cpu_dly_1[6] , 
         \server_power_control/un1_cpu_dly_1_cry_4 , 
         \server_power_control/un1_cpu_dly_1_cry_5_0_S0 , 
         \server_power_control/cpu_dly[4] , \server_power_control/cpu_dly[3] , 
         \server_power_control/un1_cpu_dly_1[3] , 
         \server_power_control/un1_cpu_dly_1_cry_2 , 
         \server_power_control/un1_cpu_dly_1_cry_3_0_S1 , 
         \server_power_control/cpu_dly[2] , \server_power_control/cpu_dly[1] , 
         \server_power_control/un1_cpu_dly_1[2] , 
         \server_power_control/un1_cpu_dly_1_cry_0 , 
         \server_power_control/un1_cpu_dly_1_cry_1_0_S0 , 
         \server_power_control/cpu_dly[0] , 
         \server_power_control/wait_time_out_0_sqmuxa_1 , 
         \server_power_control/un1_cpu_dly_1_cry_0_0_S1 , 
         \server_power_control/N_125 , \server_power_control/reboot_cnt[15] , 
         \server_power_control/reboot_cnt_s[15] , 
         \server_power_control/reboot_cnte , 
         \server_power_control/reboot_cnt_cry[14] , 
         \server_power_control/reboot_cnt[14] , 
         \server_power_control/reboot_cnt[13] , 
         \server_power_control/reboot_cnt_s[14] , 
         \server_power_control/reboot_cnt_s[13] , 
         \server_power_control/reboot_cnt_cry[12] , 
         \server_power_control/reboot_cnt[12] , 
         \server_power_control/reboot_cnt[11] , 
         \server_power_control/reboot_cnt_s[12] , 
         \server_power_control/reboot_cnt_s[11] , 
         \server_power_control/reboot_cnt_cry[10] , 
         \server_power_control/reboot_cnt[10] , 
         \server_power_control/reboot_cnt[9] , 
         \server_power_control/reboot_cnt_s[10] , 
         \server_power_control/reboot_cnt_s[9] , 
         \server_power_control/reboot_cnt_cry[8] , 
         \server_power_control/reboot_cnt[8] , 
         \server_power_control/reboot_cnt[7] , 
         \server_power_control/reboot_cnt_s[8] , 
         \server_power_control/reboot_cnt_s[7] , 
         \server_power_control/reboot_cnt_cry[6] , 
         \server_power_control/reboot_cnt[6] , 
         \server_power_control/reboot_cnt[5] , 
         \server_power_control/reboot_cnt_s[6] , 
         \server_power_control/reboot_cnt_s[5] , 
         \server_power_control/reboot_cnt_cry[4] , 
         \server_power_control/reboot_cnt[4] , 
         \server_power_control/reboot_cnt[3] , 
         \server_power_control/reboot_cnt_s[4] , 
         \server_power_control/reboot_cnt_s[3] , 
         \server_power_control/reboot_cnt_cry[2] , 
         \server_power_control/reboot_cnt[2] , 
         \server_power_control/reboot_cnt[1] , 
         \server_power_control/reboot_cnt_s[2] , 
         \server_power_control/reboot_cnt_s[1] , 
         \server_power_control/reboot_cnt_cry[0] , 
         \server_power_control/reboot_cnt[0] , 
         \server_power_control/reboot_cnt_s[0] , 
         \server_power_control/efuse_dly[8] , \server_power_control/N_103_i , 
         \server_power_control/efuse_dly[7] , 
         \server_power_control/efuse_dly_s[8] , 
         \server_power_control/efuse_dly_s[7] , 
         \server_power_control/efuse_dlye , 
         \server_power_control/efuse_dly_cry[6] , 
         \server_power_control/efuse_dly[6] , 
         \server_power_control/efuse_dly[5] , 
         \server_power_control/efuse_dly_s[6] , 
         \server_power_control/efuse_dly_s[5] , 
         \server_power_control/efuse_dly_cry[4] , 
         \server_power_control/efuse_dly[4] , 
         \server_power_control/efuse_dly[3] , 
         \server_power_control/efuse_dly_s[4] , 
         \server_power_control/efuse_dly_s[3] , 
         \server_power_control/efuse_dly_cry[2] , 
         \server_power_control/efuse_dly[2] , 
         \server_power_control/efuse_dly[1] , 
         \server_power_control/efuse_dly_s[2] , 
         \server_power_control/efuse_dly_s[1] , 
         \server_power_control/efuse_dly_cry[0] , 
         \server_power_control/efuse_dly[0] , 
         \server_power_control/efuse_dly_s[0] , 
         \server_power_control/wait_time_out_cnt , 
         \server_power_control/wait_time_out_cnt[15] , 
         \server_power_control/wait_time_out_cnt_s[15] , 
         \server_power_control/wait_time_out_cnte , 
         \server_power_control/wait_time_out_cnt_cry[14] , 
         \server_power_control/wait_time_out_cnt[14] , 
         \server_power_control/wait_time_out_cnt[13] , 
         \server_power_control/wait_time_out_cnt_s[14] , 
         \server_power_control/wait_time_out_cnt_s[13] , 
         \server_power_control/wait_time_out_cnt_cry[12] , 
         \server_power_control/wait_time_out_cnt[12] , 
         \server_power_control/wait_time_out_cnt[11] , 
         \server_power_control/wait_time_out_cnt_s[12] , 
         \server_power_control/wait_time_out_cnt_s[11] , 
         \server_power_control/wait_time_out_cnt_cry[10] , 
         \server_power_control/wait_time_out_cnt[10] , 
         \server_power_control/wait_time_out_cnt[9] , 
         \server_power_control/wait_time_out_cnt_s[10] , 
         \server_power_control/wait_time_out_cnt_s[9] , 
         \server_power_control/wait_time_out_cnt_cry[8] , 
         \server_power_control/wait_time_out_cnt[8] , 
         \server_power_control/wait_time_out_cnt[7] , 
         \server_power_control/wait_time_out_cnt_s[8] , 
         \server_power_control/wait_time_out_cnt_s[7] , 
         \server_power_control/wait_time_out_cnt_cry[6] , 
         \server_power_control/wait_time_out_cnt[6] , 
         \server_power_control/wait_time_out_cnt[5] , 
         \server_power_control/wait_time_out_cnt_s[6] , 
         \server_power_control/wait_time_out_cnt_s[5] , 
         \server_power_control/wait_time_out_cnt_cry[4] , 
         \server_power_control/wait_time_out_cnt[4] , 
         \server_power_control/wait_time_out_cnt[3] , 
         \server_power_control/wait_time_out_cnt_s[4] , 
         \server_power_control/wait_time_out_cnt_s[3] , 
         \server_power_control/wait_time_out_cnt_cry[2] , 
         \server_power_control/wait_time_out_cnt[2] , 
         \server_power_control/wait_time_out_cnt[1] , 
         \server_power_control/wait_time_out_cnt_s[2] , 
         \server_power_control/wait_time_out_cnt_s[1] , 
         \server_power_control/wait_time_out_cnt_cry[0] , 
         \server_power_control/wait_time_out_cnt[0] , 
         \server_power_control/wait_time_out_cnt_s[0] , 
         \server_power_control/N_87_i , \server_power_control/psu_dly[8] , 
         \server_power_control/psu_dly[7] , 
         \server_power_control/psu_dly_s[8] , 
         \server_power_control/psu_dly_s[7] , \server_power_control/psu_dlye , 
         \server_power_control/psu_dly_cry[6] , 
         \server_power_control/psu_dly[6] , \server_power_control/psu_dly[5] , 
         \server_power_control/psu_dly_s[6] , 
         \server_power_control/psu_dly_s[5] , 
         \server_power_control/psu_dly_cry[4] , 
         \server_power_control/psu_dly[4] , \server_power_control/psu_dly[3] , 
         \server_power_control/psu_dly_s[4] , 
         \server_power_control/psu_dly_s[3] , 
         \server_power_control/psu_dly_cry[2] , 
         \server_power_control/psu_dly[2] , \server_power_control/psu_dly[1] , 
         \server_power_control/psu_dly_s[2] , 
         \server_power_control/psu_dly_s[1] , 
         \server_power_control/psu_dly_cry[0] , 
         \server_power_control/psu_dly[0] , 
         \server_power_control/psu_dly_s[0] , \i2c0_slave_inst0/delay_cnt[7] , 
         \i2c0_slave_inst0/delay_cnt , \i2c0_slave_inst0/delay_cnt_s[7] , 
         \i2c0_slave_inst0/delay_cnte , \i2c0_slave_inst0/delay_cnt_cry[6] , 
         \i2c0_slave_inst0/delay_cnt[6] , \i2c0_slave_inst0/delay_cnt[5] , 
         \i2c0_slave_inst0/delay_cnt_s[6] , \i2c0_slave_inst0/delay_cnt_s[5] , 
         \i2c0_slave_inst0/delay_cnt_cry[4] , \i2c0_slave_inst0/delay_cnt[4] , 
         \i2c0_slave_inst0/delay_cnt[3] , \i2c0_slave_inst0/delay_cnt_s[4] , 
         \i2c0_slave_inst0/delay_cnt_s[3] , 
         \i2c0_slave_inst0/delay_cnt_cry[2] , \i2c0_slave_inst0/delay_cnt[2] , 
         \i2c0_slave_inst0/delay_cnt[1] , \i2c0_slave_inst0/delay_cnt_s[2] , 
         \i2c0_slave_inst0/delay_cnt_s[1] , 
         \i2c0_slave_inst0/delay_cnt_cry[0] , \i2c0_slave_inst0/delay_cnt[0] , 
         \i2c0_slave_inst0/delay_cnt_s[0] , \cpld_register_addr[7] , 
         \i2c0_slave_inst0/N_49_i_0_i , \i2c0_slave_inst0/rcv_bit[7] , 
         \cpld_register_addr[6] , \i2c0_slave_inst0/rcv_bit[6] , 
         \i2c0_slave_inst0/word_addr_s[7] , \i2c0_slave_inst0/word_addr_s[6] , 
         \i2c0_slave_inst0/start_next_bit , 
         \i2c0_slave_inst0/word_addr_cry[5] , \cpld_register_addr[5] , 
         \i2c0_slave_inst0/rcv_bit[5] , \cpld_register_addr[4] , 
         \i2c0_slave_inst0/rcv_bit[4] , \i2c0_slave_inst0/word_addr_s[5] , 
         \i2c0_slave_inst0/word_addr_s[4] , 
         \i2c0_slave_inst0/word_addr_cry[3] , \cpld_register_addr[3] , 
         \i2c0_slave_inst0/rcv_bit[3] , \cpld_register_addr[2] , 
         \i2c0_slave_inst0/rcv_bit[2] , \i2c0_slave_inst0/word_addr_s[3] , 
         \i2c0_slave_inst0/word_addr_s[2] , 
         \i2c0_slave_inst0/word_addr_cry[1] , \cpld_register_addr[1] , 
         \i2c0_slave_inst0/rcv_bit[1] , \cpld_register_addr[0] , 
         \i2c0_slave_inst0/rcv_bit[0] , \i2c0_slave_inst0/word_addr_s[1] , 
         \i2c0_slave_inst0/word_addr_s[0] , \i2c0_slave_inst0/word_addr , 
         \i2c0_slave_inst0/N_18 , \i2c0_slave_inst0/timeout_cnt[4] , 
         \i2c0_slave_inst0/N_236_i , \i2c0_slave_inst0/timeout_cnt[3] , 
         \i2c0_slave_inst0/timeout_cnt_s[4] , 
         \i2c0_slave_inst0/timeout_cnt_s[3] , \i2c0_slave_inst0/timeout_cnte , 
         \i2c0_slave_inst0/timeout_cnt_cry[2] , 
         \i2c0_slave_inst0/timeout_cnt[2] , \i2c0_slave_inst0/timeout_cnt[1] , 
         \i2c0_slave_inst0/timeout_cnt_s[2] , 
         \i2c0_slave_inst0/timeout_cnt_s[1] , 
         \i2c0_slave_inst0/timeout_cnt_cry[0] , 
         \i2c0_slave_inst0/timeout_cnt[0] , 
         \i2c0_slave_inst0/timeout_cnt_s[0] , \timer_inst/int_1ms_cnt[0] , 
         \timer_inst/un6_int_1ms_cnt_cry_0 , \timer_inst/int_100ms_cnt[21] , 
         \timer_inst/un6_int_100ms_cnt_cry_20 , 
         \timer_inst/un6_int_100ms_cnt_s_21_0_S0 , 
         \timer_inst/int_100ms_cnt[20] , \timer_inst/int_100ms_cnt[19] , 
         \timer_inst/un6_int_100ms_cnt[20] , 
         \timer_inst/un6_int_100ms_cnt[19] , \timer_inst/rst_n_dly[1] , 
         \timer_inst/un6_int_100ms_cnt_cry_18 , \timer_inst/int_100ms_cnt[18] , 
         \timer_inst/int_100ms_cnt[17] , \timer_inst/un6_int_100ms_cnt_cry_16 , 
         \timer_inst/un6_int_100ms_cnt_cry_17_0_S0 , 
         \timer_inst/un6_int_100ms_cnt_cry_17_0_S1 , 
         \timer_inst/int_100ms_cnt[16] , \timer_inst/int_100ms_cnt[15] , 
         \timer_inst/un6_int_100ms_cnt[16] , 
         \timer_inst/un6_int_100ms_cnt[15] , 
         \timer_inst/un6_int_100ms_cnt_cry_14 , \timer_inst/int_100ms_cnt[14] , 
         \timer_inst/int_100ms_cnt[13] , \timer_inst/un6_int_100ms_cnt[14] , 
         \timer_inst/un6_int_100ms_cnt_cry_12 , 
         \timer_inst/un6_int_100ms_cnt_cry_13_0_S0 , 
         \timer_inst/int_100ms_cnt[12] , \timer_inst/int_100ms_cnt[11] , 
         \timer_inst/un6_int_100ms_cnt[12] , 
         \timer_inst/un6_int_100ms_cnt[11] , 
         \timer_inst/un6_int_100ms_cnt_cry_10 , \timer_inst/int_100ms_cnt[10] , 
         \timer_inst/int_100ms_cnt[9] , \timer_inst/un6_int_100ms_cnt[9] , 
         \timer_inst/un6_int_100ms_cnt_cry_8 , 
         \timer_inst/un6_int_100ms_cnt_cry_9_0_S1 , 
         \timer_inst/int_100ms_cnt[8] , \timer_inst/int_100ms_cnt[7] , 
         \timer_inst/un6_int_100ms_cnt_cry_6 , 
         \timer_inst/un6_int_100ms_cnt_cry_7_0_S0 , 
         \timer_inst/un6_int_100ms_cnt_cry_7_0_S1 , 
         \timer_inst/int_100ms_cnt[6] , \timer_inst/int_100ms_cnt[5] , 
         \timer_inst/un6_int_100ms_cnt[6] , 
         \timer_inst/un6_int_100ms_cnt_cry_4 , 
         \timer_inst/un6_int_100ms_cnt_cry_5_0_S0 , 
         \timer_inst/int_100ms_cnt[4] , \timer_inst/int_100ms_cnt[3] , 
         \timer_inst/un6_int_100ms_cnt[4] , \timer_inst/un6_int_100ms_cnt[3] , 
         \timer_inst/un6_int_100ms_cnt_cry_2 , \timer_inst/int_100ms_cnt[2] , 
         \timer_inst/int_100ms_cnt[1] , \timer_inst/un6_int_100ms_cnt[2] , 
         \timer_inst/un6_int_100ms_cnt[1] , 
         \timer_inst/un6_int_100ms_cnt_cry_0 , \timer_inst/int_100ms_cnt[0] , 
         \timer_inst/int_1ms_cnt[14] , \timer_inst/int_1ms_cnt[13] , 
         \timer_inst/un6_int_1ms_cnt_cry_12 , 
         \timer_inst/un6_int_1ms_cnt_cry_13_0_S0 , 
         \timer_inst/un6_int_1ms_cnt_cry_13_0_S1 , 
         \timer_inst/int_1ms_cnt[12] , \timer_inst/int_1ms_cnt[11] , 
         \timer_inst/un6_int_1ms_cnt[12] , \timer_inst/un6_int_1ms_cnt[11] , 
         \timer_inst/un6_int_1ms_cnt_cry_10 , \timer_inst/int_1ms_cnt[10] , 
         \timer_inst/int_1ms_cnt[9] , \timer_inst/un6_int_1ms_cnt[10] , 
         \timer_inst/un6_int_1ms_cnt[9] , \timer_inst/un6_int_1ms_cnt_cry_8 , 
         \timer_inst/int_1ms_cnt[8] , \timer_inst/int_1ms_cnt[7] , 
         \timer_inst/un6_int_1ms_cnt_cry_6 , 
         \timer_inst/un6_int_1ms_cnt_cry_7_0_S0 , 
         \timer_inst/un6_int_1ms_cnt_cry_7_0_S1 , \timer_inst/int_1ms_cnt[6] , 
         \timer_inst/int_1ms_cnt[5] , \timer_inst/un6_int_1ms_cnt[6] , 
         \timer_inst/un6_int_1ms_cnt_cry_4 , 
         \timer_inst/un6_int_1ms_cnt_cry_5_0_S0 , \timer_inst/int_1ms_cnt[4] , 
         \timer_inst/int_1ms_cnt[3] , \timer_inst/un6_int_1ms_cnt[4] , 
         \timer_inst/un6_int_1ms_cnt_cry_2 , 
         \timer_inst/un6_int_1ms_cnt_cry_3_0_S0 , \timer_inst/int_1ms_cnt[2] , 
         \timer_inst/int_1ms_cnt[1] , \timer_inst/un6_int_1ms_cnt[2] , 
         \timer_inst/un6_int_1ms_cnt[1] , int_100ms_en, CO0, 
         \flash_clk_cnt_0[0] , a_gpio5_c, \server_power_control/next_state101 , 
         \server_power_control/is_normal_reboot , 
         \server_power_control/current_state[3] , 
         \server_power_control/current_state[2] , 
         \server_power_control/current_state[1] , 
         \server_power_control/N_61_i , 
         \server_power_control/un1_next_state105_8_i , a_gpio2_c, 
         \bmc_reset_ctrl_inst/next_state_3[1] , \bmc_reset_ctrl_inst/N_537_i , 
         \bmc_reset_ctrl_inst/un1_next_state24_0_0 , 
         \bmc_reset_ctrl_inst/bmc_srst5 , 
         \bmc_reset_ctrl_inst/srst_delay_3[2] , 
         \bmc_reset_ctrl_inst/srst_delay_3[1] , 
         \bmc_reset_ctrl_inst/srst_delay_3[5] , 
         \bmc_reset_ctrl_inst/srst_delay_3[3] , 
         \bmc_reset_ctrl_inst/srst_delay_3[6] , 
         \bmc_reset_ctrl_inst/bmc_srst5_4 , 
         \i2c0_slave_inst0/current_state[4] , 
         \i2c0_slave_inst0/rd_data_i_m[2] , 
         \i2c0_slave_inst0/start_next_bit_1d , 
         \i2c0_slave_inst0/sda_out_reg_13_iv_3 , 
         \i2c0_slave_inst0/sda_out_reg_13_iv_0 , 
         \i2c0_slave_inst0/rd_data_i_m[0] , 
         \i2c0_slave_inst0/sda_out_reg_13_iv_5 , 
         \i2c0_slave_inst0/sda_out_reg_13_iv_i , 
         \i2c0_slave_inst0/un1_sda_out_reg_2_sqmuxa_i , bmc_sda_out, 
         bmc_srst_c, \bmc_reset_ctrl_inst/N_2656_0 , 
         \bmc_reset_ctrl_inst/bmc_srst5_3 , \flash_clk_cnt[2] , 
         \flash_clk_cnt[3] , \flash_clk_cnt[1] , flash_clk_cnt9, 
         cpld_led_test_c, flash_1s_RNO, 
         \server_power_control/cpu_pwr_control/current_state[1] , 
         \server_power_control/cpu_pwr_control/current_state[0] , 
         \server_power_control/cpu_pwr_control/N_598 , 
         \server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] , 
         \server_power_control/cpu_pwr_control/un1_next_state40_5_i_0 , 
         cpua_sys_reset_c, 
         \server_power_control/cpu_pwr_control/un1_current_state_4_i_o2 , 
         data_out_r_20_sn_N_44_mux, N_156, data_out_r_20_sn_N_25, pg_vdd_5v_c, 
         \server_power_control/cpu_pwr_control/N_153 , 
         \server_power_control/cpu_pwr_control/N_146 , \data_out_r_20[3] , 
         \data_out_r_20[0] , wr_data_vld, \data_out_r[0] , \data_out_r[3] , 
         \server_power_control/cpu_pwr_control/N_99 , 
         \server_power_control/cpu_pwr_control/data_out_r_20_sn_N_16 , 
         pg_bp_5v_c, data_out_r_20_sn_N_22, 
         \server_power_control/cpu_pwr_control/N_128 , 
         \server_power_control/cpu_pwr_control/N_137 , \data_out_r_20[1] , 
         \data_out_r[1] , pg_5v_aux_c, 
         \server_power_control/cpu_pwr_control/data_out_r_20_sn_N_14 , 
         \server_power_control/cpu_pwr_control/N_138 , 
         \server_power_control/cpu_pwr_control/N_129 , \data_out_r_20[2] , 
         \data_out_r[2] , \server_power_control/N_441 , 
         \server_power_control/N_78_2 , data_out_r_20_sn_N_20, 
         \server_power_control/data_out_r_20_0_1[5] , 
         \server_power_control/cpu_pwr_control/N_150 , 
         \server_power_control/cpu_pwr_control/N_157 , \data_out_r_20[5] , 
         \data_out_r_20[4] , \data_out_r[4] , \data_out_r[5] , 
         \server_power_control/cpu_pwr_control/N_143 , 
         \server_power_control/cpu_pwr_control/N_134 , N_142, N_133, 
         \data_out_r_20[7] , \data_out_r_20[6] , \data_out_r[6] , 
         \data_out_r[7] , \eeprom_i2c_inst/e2prom_i2c/next_state21 , 
         \eeprom_i2c_inst/e2prom_i2c/start_next_bit , 
         \eeprom_i2c_inst/e2prom_i2c/current_state[3] , 
         \eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d , 
         \eeprom_i2c_inst/e2prom_i2c/current_state[8] , 
         \eeprom_i2c_inst/e2prom_i2c/un1_start_next_bit_1d , 
         \eeprom_i2c_inst/e2prom_i2c/un1_current_state_15 , 
         \eeprom_i2c_inst.e2prom_i2c.sda_out_en_i , 
         \eeprom_i2c_inst/e2prom_i2c/N_202 , 
         \eeprom_i2c_inst/e2prom_i2c/un26_i_a4[1] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state_en_7[0] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state_en_8[0] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state[1] , 
         \eeprom_i2c_inst/e2prom_i2c/un26_i_a4[0] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state[0] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[1] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[0] , 
         \eeprom_i2c_inst/e2prom_i2c/un31_NE , 
         \eeprom_i2c_inst/e2prom_i2c/un26_i_a4[3] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state[3] , 
         \eeprom_i2c_inst/e2prom_i2c/un26_i_a4[2] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state[2] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[3] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[2] , 
         \eeprom_i2c_inst/e2prom_i2c/current_state[0] , 
         \eeprom_i2c_inst/e2prom_i2c/N_486 , 
         \eeprom_i2c_inst/e2prom_i2c/N_476_i_1 , 
         \eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] , 
         \eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] , 
         \eeprom_i2c_inst/e2prom_i2c/N_476_i , 
         \eeprom_i2c_inst/e2prom_i2c/N_477_i , 
         \eeprom_i2c_inst/e2prom_i2c/N_252 , 
         \eeprom_i2c_inst/e2prom_i2c/un31_NE_1 , 
         \eeprom_i2c_inst/e2prom_i2c/next_state_1_0[3] , 
         \eeprom_i2c_inst/e2prom_i2c/N_475_i_1 , 
         \eeprom_i2c_inst/e2prom_i2c/bit_cnt_5_i_a2_0_0[2] , 
         \eeprom_i2c_inst/e2prom_i2c/N_475_i , 
         \eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] , 
         \eeprom_i2c_inst/e2prom_i2c/time_out_en , 
         \eeprom_i2c_inst/e2prom_i2c/N_199 , 
         \eeprom_i2c_inst/e2prom_i2c/current_state[1] , 
         \eeprom_i2c_inst/e2prom_i2c/N_225 , \eeprom_i2c_inst/i2c_start , 
         \eeprom_i2c_inst/e2prom_i2c/N_151_i , 
         \eeprom_i2c_inst/e2prom_i2c/current_state_ns[0] , 
         \eeprom_i2c_inst/e2prom_i2c/N_187 , 
         \eeprom_i2c_inst/e2prom_i2c/current_state_ns_i_1[2] , 
         \eeprom_i2c_inst/e2prom_i2c/N_198 , 
         \eeprom_i2c_inst/e2prom_i2c/N_155_i , 
         \eeprom_i2c_inst/e2prom_i2c/N_153_i , 
         \eeprom_i2c_inst/e2prom_i2c/current_state[2] , 
         \eeprom_i2c_inst/e2prom_i2c/opcode , 
         \eeprom_i2c_inst/e2prom_i2c/N_276 , 
         \eeprom_i2c_inst/e2prom_i2c/N_234_1 , 
         \eeprom_i2c_inst/e2prom_i2c/current_state[6] , 
         \eeprom_i2c_inst/e2prom_i2c/N_231 , 
         \eeprom_i2c_inst/e2prom_i2c/current_state[4] , 
         \eeprom_i2c_inst/e2prom_i2c/current_state_ns[6] , 
         \eeprom_i2c_inst/e2prom_i2c/current_state_ns[4] , 
         \eeprom_i2c_inst/e2prom_i2c/N_231_1 , 
         \eeprom_i2c_inst/e2prom_i2c/current_state_ns_a4_1_0[8] , 
         \eeprom_i2c_inst/e2prom_i2c/N_236 , 
         \eeprom_i2c_inst/e2prom_i2c/current_state[7] , 
         \eeprom_i2c_inst/e2prom_i2c/current_state_ns[8] , 
         \eeprom_i2c_inst/e2prom_i2c/current_state_ns[7] , 
         \eeprom_i2c_inst/e2prom_i2c/N_186 , 
         \eeprom_i2c_inst/e2prom_i2c/current_state[10] , 
         \eeprom_i2c_inst/e2prom_i2c/N_240 , 
         \eeprom_i2c_inst/e2prom_i2c/current_state[9] , 
         \eeprom_i2c_inst/e2prom_i2c/N_165_i , 
         \eeprom_i2c_inst/e2prom_i2c/N_163_i , 
         \eeprom_i2c_inst/e2prom_i2c/N_45 , \eeprom_i2c_inst/e2prom_i2c/N_140 , 
         \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[0] , 
         \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[1] , 
         \eeprom_i2c_inst/e2prom_i2c/N_12_i , 
         \eeprom_i2c_inst/e2prom_i2c/N_264_i , 
         \eeprom_i2c_inst/e2prom_i2c/det_delay_cnte , 
         \eeprom_i2c_inst/e2prom_i2c/N_23 , 
         \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[3] , 
         \eeprom_i2c_inst/e2prom_i2c/N_21 , 
         \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[2] , 
         \eeprom_i2c_inst/e2prom_i2c/N_8_i , 
         \eeprom_i2c_inst/e2prom_i2c/N_10_i , 
         \eeprom_i2c_inst/e2prom_i2c/start_stretch_det , 
         \eeprom_i2c_inst/e2prom_i2c/start_stretch_en , 
         \eeprom_i2c_inst/e2prom_i2c/N_45_i , 
         \eeprom_i2c_inst/e2prom_i2c/un1_scl_out_en20_4_i_0 , 
         \eeprom_i2c_inst/e2prom_i2c/e2prom_scl_out_en , 
         \eeprom_i2c_inst/i2c_rw , \eeprom_i2c_inst/e2prom_i2c/opcode_3 , 
         \eeprom_i2c_inst/e2prom_i2c/N_222_i , 
         \eeprom_i2c_inst/e2prom_i2c/sda_in_clean , 
         \eeprom_i2c_inst/e2prom_i2c/sda_in_clean_i , 
         \eeprom_i2c_inst/e2prom_i2c/rcv_ack_0_sqmuxa , 
         \eeprom_i2c_inst/e2prom_i2c/rcv_ack , 
         \eeprom_i2c_inst/e2prom_i2c/start_stretch_det11_0_a2_1 , 
         \eeprom_i2c_inst/e2prom_i2c/state_cnt_RNIEK4J[3] , 
         \eeprom_i2c_inst/e2prom_i2c/start_stretch_det11 , 
         \eeprom_i2c_inst/e2prom_i2c/scl_falling , 
         \eeprom_i2c_inst/e2prom_i2c/N_484 , 
         \eeprom_i2c_inst/e2prom_i2c/start_stretch_det9 , 
         \eeprom_i2c_inst/e2prom_i2c/scl_in_clean , 
         \eeprom_i2c_inst/e2prom_i2c/scl_rising , 
         \eeprom_i2c_inst/e2prom_i2c/N_485 , 
         \eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[0] , 
         \eeprom_i2c_inst/e2prom_i2c/g0_2_1 , 
         \eeprom_i2c_inst/e2prom_i2c/start_stretch_det12 , 
         \eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[1] , 
         \eeprom_i2c_inst/e2prom_i2c/start_stretch_det10_0_a2_2 , 
         \eeprom_i2c_inst/e2prom_i2c/start_stretch_det10 , 
         \eeprom_i2c_inst.e2prom_i2c.scl_in_dly[0] , 
         \eeprom_i2c_inst/e2prom_i2c/start_repeat , 
         \eeprom_i2c_inst/e2prom_i2c/scl_in_dly[1] , 
         \eeprom_i2c_inst/e2prom_i2c/g0_1_4 , 
         \eeprom_i2c_inst/e2prom_i2c/start_stretch_det8 , 
         \eeprom_i2c_inst/e2prom_i2c/scl_in_dly[2] , 
         \eeprom_i2c_inst/e2prom_i2c/start_stretch_en8 , 
         \eeprom_i2c_inst/e2prom_i2c/N_36_i , int_1ms_en, 
         \eeprom_i2c_inst/i2c_busy , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_RNIP7CE1[2] , 
         \eeprom_i2c_inst/e2prom_i2c/N_126 , \eeprom_i2c_inst/i2c_wait , 
         \eeprom_i2c_inst/i2c_busy_1d , start_e2prom, 
         \eeprom_i2c_inst/i2c_start_4 , \eeprom_i2c_inst/un1_i2c_start23_i_0 , 
         \eeprom_i2c_inst/e2prom_i2c/N_490 , 
         \eeprom_i2c_inst/e2prom_i2c/rd_data_7_sqmuxa , 
         \eeprom_i2c_inst/rd_data_vld , 
         \eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[4] , 
         \server_power_control/current_state[0] , \server_power_control/N_43 , 
         \server_power_control.un1_next_state105_11_i , en_bp_5v_c, 
         \server_power_control/un1_next_state115_1_0 , en_vddc_a_c, 
         \server_power_control/cpu_pwr_control/current_state[2] , 
         \server_power_control/cpu_pwr_control/N_618 , en_vpp_a0_c, 
         \server_power_control/cpu_pwr_control/enable_reg_RNO[4] , 
         \server_power_control/cpu_pwr_control/un1_next_state42_i_0 , 
         en_pcie_h_a_c, en_vdd_3v3_c, 
         \server_power_control/cpu_pwr_control/N_626 , 
         \server_power_control/cpu_pwr_control/enable_reg_RNO[2] , 
         en_vdd_1v8_c, en_vdd_5v_c, 
         \server_power_control/cpu_pwr_control/N_624 , 
         \server_power_control/cpu_pwr_control/enable_reg_RNO[1] , 
         bmc_gpio51_c, \server_power_control/cpu_pwr_on_off , 
         \server_power_control/cpu_pwr_control/N_16_2 , 
         \server_power_control/cpu_pwr_control/enable_reg_RNO[0] , 
         \server_power_control/cpu_pwr_control/N_16 , 
         \server_power_control/cpu_pwr_control/N_616 , 
         \server_power_control/cpu_pwr_control/enable_reg_RNO[3] , en_vtt_a0_c, 
         \server_power_control/cpu_pwr_control/N_622 , 
         \server_power_control/cpu_pwr_control/enable_reg_RNO[6] , 
         en_vddq_a0_c, \server_power_control/cpu_pwr_control/N_620 , 
         \server_power_control/cpu_pwr_control/enable_reg_RNO[5] , 
         \server_power_control/cpu_pwr_control/enable_reg_RNO[8] , 
         en_vqps18_a_c, \server_power_control/cpu_pwr_control/N_603 , 
         \server_power_control/cpu_pwr_control/N_613 , 
         \server_power_control/cpu_pwr_control/enable_reg_RNO[7] , SUM2, 
         \flash_clk_cnt_3[1] , \flash_clk_cnt_3[3] , 
         \i2c0_slave_inst0/current_state[2] , 
         \i2c0_slave_inst0/current_state[3] , 
         \i2c0_slave_inst0/current_state[6] , 
         \i2c0_slave_inst0/current_state[5] , 
         \i2c0_slave_inst0/current_state[1] , \i2c0_slave_inst0/N_108_i , 
         \i2c0_slave_inst0/N_107_i , \i2c0_slave_inst0/un1_stretch_en_2_NE , 
         \i2c0_slave_inst0/before_state[0] , 
         \i2c0_slave_inst0/before_state[1] , \i2c0_slave_inst0/N_109_i , 
         \i2c0_slave_inst0/before_state[2] , 
         \i2c0_slave_inst0/un1_stretch_en_i_a2[2] , 
         \i2c0_slave_inst0/bit_cnt[0] , \i2c0_slave_inst0/bit_cnt[1] , 
         \i2c0_slave_inst0/bit_cnt_3[1] , \i2c0_slave_inst0/bit_cnt_3[0] , 
         \i2c0_slave_inst0/un1_stretch_en_2_0 , 
         \i2c0_slave_inst0/un1_stretch_en_2_1 , \i2c0_slave_inst0/N_159 , 
         \i2c0_slave_inst0/CO0 , \i2c0_slave_inst0/bit_cnt[2] , 
         \i2c0_slave_inst0/bit_cnt_3[2] , 
         \i2c0_slave_inst0/current_state_ns_i_a5_0[1] , 
         \i2c0_slave_inst0/N_142 , \i2c0_slave_inst0/current_state_ns_i_0[1] , 
         \i2c0_slave_inst0/next_state16_NE , 
         \i2c0_slave_inst0/current_state_ns_0_0_1[0] , 
         \i2c0_slave_inst0/N_94_i , \i2c0_slave_inst0/current_state_ns[0] , 
         \i2c0_slave_inst0/current_state[0] , \i2c0_slave_inst0/N_413 , 
         \i2c0_slave_inst0/N_114 , \i2c0_slave_inst0/N_421 , 
         \i2c0_slave_inst0/N_406 , \i2c0_slave_inst0/N_70 , 
         \i2c0_slave_inst0/N_98_i , \i2c0_slave_inst0/N_96_i , 
         \i2c0_slave_inst0/current_state_ns_i_0[5] , \i2c0_slave_inst0/N_140 , 
         \i2c0_slave_inst0/N_137 , 
         \i2c0_slave_inst0/current_state_ns_i_a5_0[4] , 
         \i2c0_slave_inst0/current_state_ns_i_1[4] , 
         \i2c0_slave_inst0/N_102_i , \i2c0_slave_inst0/N_100_i , 
         \i2c0_slave_inst0/N_111 , \i2c0_slave_inst0/N_127 , 
         \i2c0_slave_inst0/N_141 , \i2c0_slave_inst0/N_104_i , 
         \i2c0_slave_inst0/start_en , \i2c0_slave_inst0/scl_in_clean_dly[0] , 
         \i2c0_slave_inst0/scl_in_clean_dly[1] , 
         \i2c0_slave_inst0/delay_cnt16 , \i2c0_slave_inst0/N_54 , 
         \i2c0_slave_inst0/delay_cnt_en , \i2c0_slave_inst0/time_out_en , 
         \i2c0_slave_inst0/N_416 , \i2c0_slave_inst0/sda_in_clean , 
         \i2c0_slave_inst0/sda_in_clean_i , 
         \i2c0_slave_inst0/rcv_ack_0_sqmuxa , \i2c0_slave_inst0/rcv_ack , 
         \i2c0_slave_inst0/un1_start_2_0 , \i2c0_slave_inst0/start , 
         \i2c0_slave_inst0/timeout_cnt_en , 
         \i2c0_slave_inst0/sda_in_clean_dly[0] , 
         \i2c0_slave_inst0/scl_in_clean , \i2c0_slave_inst0/un1_start_3_i , 
         \i2c0_slave_inst0/un1_delay_cnt_3_4 , 
         \i2c0_slave_inst0/un1_delay_cnt15_1 , 
         \i2c0_slave_inst0/un1_delay_cnt_3_5 , 
         \i2c0_slave_inst0/delay_cnt_en_1_sqmuxa , \i2c0_slave_inst0/N_234_1 , 
         \i2c0_slave_inst0/N_234_i , \timer_inst/int_100ms_cnt11_11 , 
         \timer_inst/int_100ms_cnt11_18 , \timer_inst/int_100ms_cnt11_16 , 
         \timer_inst/int_100ms_cnt11_13 , \timer_inst/int_100ms_cnt11_12 , 
         \timer_inst/int_100ms_cnt11 , \timer_inst/int_1ms_cnt11_9 , 
         \timer_inst/int_1ms_cnt11_7 , \timer_inst/int_1ms_cnt11_8 , 
         \timer_inst/int_1ms_cnt11_10 , \timer_inst/int_1ms_cnt11 , 
         \server_power_control/switch_reset_control/current_state[1] , 
         \server_power_control/switch_reset_control/current_state[0] , 
         \server_power_control/switch_reset_control/N_16_i , 
         \server_power_control/switch_reset_control/current_state[2] , 
         pcie_swa_sys_rst_c, \usb_reset_ctrl_inst/current_state[2] , 
         \usb_reset_ctrl_inst/current_state[1] , 
         \usb_reset_ctrl_inst/current_state[0] , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_17 , 
         \usb_reset_ctrl_inst/usb_prst_1_0_35_i_0_a2_0_2 , 
         \usb_reset_ctrl_inst/N_539_i , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0 , pcie_usb0_rst_c, 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_7_4 , \por/VCC , 
         \por/rst_btn_dly[0] , \por/rst_btn_dly[1] , 
         \server_power_control/next_state112 , 
         \server_power_control/psu_on_off17 , 
         \server_power_control/cpu_dly_4[1] , 
         \server_power_control/cpu_dly_4[0] , 
         \server_power_control/cpu_dly_4[5] , 
         \server_power_control/cpu_dly_4[4] , \server_power_control/N_85_i , 
         \server_power_control/un1_next_state105_10 , 
         \server_power_control/cpu_off_done , 
         \server_power_control/un1_psu_on_off44 , 
         \server_power_control/cpu_pwr_control/pwr_all_on , 
         \server_power_control/cpu_pwr_control/reset_done , 
         \server_power_control/cpu_pwr_control/next_state_1_0_1[0] , 
         \server_power_control/cpu_pwr_control/N_10_i , 
         \server_power_control/cpu_pwr_control/next_state_1[0] , 
         \server_power_control/cpu_pwr_control/current_state_RNI16S31[1] , 
         \server_power_control/cpu_pwr_control/next_state[0] , 
         \server_power_control/cpu_pwr_control/next_state[1] , 
         \server_power_control/cpu_pwr_control/next_state36_0 , 
         \server_power_control/cpu_pwr_control/next_state36_6 , 
         \server_power_control/cpu_pwr_control/N_18 , 
         \server_power_control/cpu_pwr_control/next_state36_5 , 
         \server_power_control/cpu_pwr_control/next_state_1[2] , 
         \server_power_control/cpu_pwr_control/next_state[2] , 
         \server_power_control/cpu_pwr_control/N_163_i , 
         \server_power_control/cpu_pwr_control/un1_current_state_4_i_0 , 
         \server_power_control/cpu_pwr_control/enable_reg_6_iv_0_5_o2_0_0 , 
         bp_ncp_gok_c, ncp0_gok_c, 
         \server_power_control/un1_efuse_dly_0_sqmuxa_1_0_a3_1_0 , 
         \server_power_control/N_63 , 
         \server_power_control/un1_efuse_dly_0_sqmuxa_2 , 
         \server_power_control/efuse_done , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state[1] 
         , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state_i[1] 
         , \server_power_control/power_signal_detect_inst/current_state[0] , 
         \server_power_control/power_signal_detect_inst/current_state[2] , 
         \server_power_control/power_signal_detect_inst/is_pwr_force_off12 , 
         \server_power_control/power_signal_detect_inst/N_57_i , 
         \server_power_control/power_signal_detect_inst/un1_current_state_6_i , 
         \server_power_control/is_pwr_force_off , 
         \server_power_control/power_signal_detect_inst/normal_sig_cnt[3] , 
         \server_power_control/power_signal_detect_inst/normal_sig_cnt[2] , 
         \server_power_control/power_signal_detect_inst/normal_sig_cnt[1] , 
         \server_power_control/power_signal_detect_inst/normal_sig_cnt[0] , 
         \server_power_control/power_signal_detect_inst/next_state52 , 
         \server_power_control/power_signal_detect_inst/N_49_i , 
         \server_power_control/power_signal_detect_inst/un1_next_state64_5_i , 
         \server_power_control/is_pwr_on_off , 
         \server_power_control/current_state_i[2] , 
         \server_power_control/un1_is_reboot_0_sqmuxa , 
         \server_power_control/is_reboot , \server_power_control/N_22 , 
         \server_power_control/N_17 , \server_power_control/i11_mux , 
         \server_power_control/N_13 , \server_power_control/next_state_1[0] , 
         \server_power_control/next_state[0] , \server_power_control/N_56_mux , 
         \server_power_control/next_state110_1 , \server_power_control/N_8 , 
         \server_power_control/i15_mux_1 , \server_power_control/N_38 , 
         \server_power_control/N_45_i , \server_power_control/next_state_1[1] , 
         \server_power_control/next_state[1] , 
         \server_power_control/next_state[2] , 
         \server_power_control/i15_mux_2 , 
         \server_power_control/next_state_1[3] , 
         \server_power_control/next_state[3] , 
         \server_power_control/power_signal_detect_inst/force_sig_cnt[1] , 
         \server_power_control/power_signal_detect_inst/force_sig_cnt[0] , 
         \server_power_control/power_signal_detect_inst/N_637_i , 
         \server_power_control/power_signal_detect_inst/N_649 , 
         \server_power_control/power_signal_detect_inst/force_sig_cnte , 
         \server_power_control/power_signal_detect_inst/force_sig_cnt[2] , 
         \server_power_control/power_signal_detect_inst/next_state69_1 , 
         \server_power_control/power_signal_detect_inst/N_640 , 
         \server_power_control/power_signal_detect_inst/force_sig_cnt[3] , 
         \server_power_control/power_signal_detect_inst/N_4_i , 
         \server_power_control/power_signal_detect_inst/N_636_i , 
         \server_power_control/power_signal_detect_inst/N_29 , 
         \server_power_control/power_signal_detect_inst/N_34_mux , 
         \server_power_control/power_signal_detect_inst/N_12 , 
         \server_power_control/power_signal_detect_inst/N_9 , 
         \server_power_control/power_signal_detect_inst/N_32_i , 
         \server_power_control/power_signal_detect_inst/next_state_1[0] , 
         \server_power_control/power_signal_detect_inst/un1_next_state69 , 
         \server_power_control/power_signal_detect_inst/next_state[0] , 
         \server_power_control/power_signal_detect_inst/next_state[2] , 
         \server_power_control/power_signal_detect_inst/N_21 , 
         \server_power_control/power_signal_detect_inst/N_33_mux , 
         \server_power_control/power_signal_detect_inst/pwr_btn_pressed , 
         \server_power_control/power_signal_detect_inst/next_state_1[1] , 
         \server_power_control/power_signal_detect_inst/next_state[1] , 
         \server_power_control/power_signal_detect_inst/normal_sig_cnt_n1 , 
         \server_power_control/power_signal_detect_inst/N_262_i , 
         \server_power_control/power_signal_detect_inst/normal_sig_cnte , 
         \server_power_control/power_signal_detect_inst/normal_sig_cnt_c1 , 
         \server_power_control/power_signal_detect_inst/normal_sig_cnt_n3 , 
         \server_power_control/power_signal_detect_inst/normal_sig_cnt_n2 , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state[0] 
         , \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/N_31_7 , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/N_28_i , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state_ns[0] 
         , cpld_extrst_c, bmc_gpio49_c, 
         \server_power_control/power_signal_detect_inst/rst_ext_in , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst , 
         GND, \timer_inst/int_100ms_cnt11_15 , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst_pre , 
         VCC, \i2c0_slave_inst0/next_state16_5 , 
         \i2c0_slave_inst0/next_state16_6_i , 
         \i2c0_slave_inst0/next_state16_3 , 
         \i2c0_slave_inst0/next_state16_4_i , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5 , 
         \i2c0_slave_inst0/next_state16_NE_4 , 
         \server_power_control.power_signal_detect_inst.sig_r0 , 
         \server_power_control/power_signal_detect_inst/sig_r1 , 
         \server_power_control/power_signal_detect_inst/pos_edge , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec_pre , 
         \server_power_control/g0_13 , 
         \server_power_control/psu_done_0_sqmuxa , 
         \server_power_control/psu_on_off26 , 
         \server_power_control/next_state113 , 
         \server_power_control/un1_psu_done_1_sqmuxa_1_2 , 
         \server_power_control/psu_dly11 , 
         \server_power_control/un1_psu_done_1_sqmuxa_1_i , 
         \server_power_control/psu_done , 
         \server_power_control/switch_reset_control/next_state[1] , 
         \server_power_control/switch_reset_control/next_state[0] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5_4 , 
         \server_power_control/switch_reset_control/next_state[2] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/next_state24_0_a2_4 
         , \server_power_control/switch_reset_control/next_state13 , 
         pg_pcie_sw_0v8_a_c, \server_power_control/switch_reset_control/N_447 , 
         \server_power_control/switch_reset_control/N_11_i , 
         \server_power_control/switch_reset_control/N_436_i , 
         \server_power_control/switch_reset_control/un1_next_state43_0 , 
         pg_pcie_sw_0v8_b_c, 
         \server_power_control/switch_reset_control/N_435_i , 
         \server_power_control/cpu_pwr_control/bmc_pwrgd_4 , 
         \server_power_control/next_state105 , 
         \server_power_control/next_state111 , 
         \server_power_control/wait_time_out_0_sqmuxa , 
         \server_power_control/g0_14 , \server_power_control/g0_11 , 
         \server_power_control/g0_16 , \server_power_control/g0_10 , 
         \server_power_control/un1_wait_time_out_0_sqmuxa_1 , 
         \server_power_control/wait_time_out , \usb_reset_ctrl_inst/N_51 , 
         \usb_reset_ctrl_inst/N_466 , \usb_reset_ctrl_inst/N_465_2 , 
         start_e2prom_2, \bmc_write_data[3] , \bmc_write_data[4] , 
         \bmc_write_data[1] , \bmc_write_data[6] , \bmc_write_data[2] , 
         \usb_reset_ctrl_inst/test_interrupt7_3 , 
         \usb_reset_ctrl_inst/test_interrupt7_4 , \bmc_write_data[0] , 
         test_interrupt7, test_interrupt_1_sqmuxa, test_interrupt, pg_vtt_b1_c, 
         pg_vpp_b1_c, pg_vtt_b0_c, pg_vpp_b0_c, test_register_1_sqmuxa, 
         \test_register[0] , \server_power_control/cpub_pwrok_7 , 
         \test_register[1] , 
         \server_power_control/switch_reset_control/next_state21_5 , 
         \test_register[2] , 
         \server_power_control/switch_reset_control/next_state13_4 , 
         \test_register[3] , \bmc_write_data[7] , \bmc_write_data[5] , 
         \test_register[4] , 
         \server_power_control/switch_reset_control/next_state21_4 , 
         \test_register[5] , un1_reset, sg1_pcie0_l0_reset_c, 
         \reset_control_b[7] , riser2_reset_c, \test_register[6] , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_3 , 
         \test_register[7] , \timer_inst/int_100ms_cnt_0[0] , 
         \timer_inst/int_100ms_cnt_3[7] , \timer_inst/int_100ms_cnt_3[5] , 
         \timer_inst/int_100ms_cnt_3[10] , \timer_inst/int_100ms_cnt_3[8] , 
         \timer_inst/int_100ms_cnt_3[17] , \timer_inst/int_100ms_cnt_3[13] , 
         \timer_inst/int_100ms_cnt_3[21] , \timer_inst/int_100ms_cnt_3[18] , 
         \timer_inst/int_1ms_cnt_0[0] , \bmc_reset_ctrl_inst/bmc_prst9_8 , 
         \timer_inst/int_1ms_cnt_3[5] , \timer_inst/int_1ms_cnt_3[3] , 
         \timer_inst/int_1ms_cnt_3[8] , \timer_inst/int_1ms_cnt_3[7] , 
         \timer_inst/int_1ms_cnt_3[14] , \timer_inst/int_1ms_cnt_3[13] , 
         \timer_inst/VCC\000/BUF1 , \timer_inst/rst_n_dly[0] , 
         \eeprom_i2c_inst/e2prom_i2c/g0_0_5 , 
         \usb_reset_ctrl_inst/usb_ponrst_RNO_0 , \usb_reset_ctrl_inst/N_51_i , 
         usb1_ponrst_c, \usb_reset_ctrl_inst/next_state[1] , 
         \usb_reset_ctrl_inst/next_state[0] , 
         \eeprom_i2c_inst/e2prom_i2c/N_215_1 , 
         \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_en_1_sqmuxa_1_i_0_0_a2_1 , 
         \usb_reset_ctrl_inst/next_state[2] , 
         \usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_8[1] , 
         \usb_reset_ctrl_inst/next_state_1_0_0_i_o2[1] , 
         \usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_9[1] , 
         \usb_reset_ctrl_inst/next_state_1_i_0_0_0[0] , 
         \usb_reset_ctrl_inst/N_797_i , \usb_reset_ctrl_inst/N_8_i , 
         \usb_reset_ctrl_inst/current_state_RNI5EMP[0] , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_15 , 
         \usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_5[1] , 
         \usb_reset_ctrl_inst/next_state_1[2] , 
         \i2c0_slave_inst0/wr_data_0_sqmuxa , \reset_control_b[3] , 
         riser0_slot_id1_c, bp_ncp_d_oc_c, data_out_r_20_sn_N_36_i_0, N_122, 
         N_113, N_139, \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa , 
         \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_0 , 
         \eeprom_i2c_inst/e2prom_i2c/N_491 , 
         \eeprom_i2c_inst/e2prom_i2c/bit_mux[0] , 
         \eeprom_i2c_inst/e2prom_i2c/N_63 , 
         \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_sn_N_6 , 
         \eeprom_i2c_inst/e2prom_i2c/N_70 , \e2prom_byte_addr[5] , 
         \e2prom_data_wr[5] , \eeprom_i2c_inst/e2prom_i2c/N_498 , 
         \e2prom_dev_addr[0] , \eeprom_i2c_inst/e2prom_i2c/N_58 , 
         \eeprom_i2c_inst/e2prom_i2c/sda_bit_out , \e2prom_data_wr[6] , 
         \e2prom_byte_addr[6] , \e2prom_byte_addr[4] , \e2prom_data_wr[4] , 
         \reset_control_b[0] , riser0_slot16b_prsnt_c, N_119, N_110, 
         \server_power_control/cpu_pwr_control/N_136 , \reset_control_a[0] , 
         \riser_reset[0] , pg_vdd_3v3_c, psu1_prsnt_c, 
         \server_power_control/cpu_pwr_control/N_127 , pg_vdd_1v8_c, 
         \server_power_control/cpu_pwr_control/N_123 , 
         \server_power_control/cpu_pwr_control/N_114 , 
         \server_power_control/cpu_pwr_control/N_106 , 
         \server_power_control/cpu_pwr_control/N_93 , \riser_reset[7] , 
         \reset_control_a[7] , pg_vpp_a0_c, \e2prom_byte_addr[1] , 
         \e2prom_dev_addr[1] , \power_control[1] , 
         \server_power_control/cpu_pwr_control/N_90 , 
         \server_power_control/cpu_pwr_control/N_103 , \e2prom_byte_addr[2] , 
         pg_vddq_a1_c, \e2prom_dev_addr[2] , \power_control[2] , 
         \server_power_control/cpu_pwr_control/N_91 , 
         \server_power_control/cpu_pwr_control/N_104 , \e2prom_data_rd[1] , 
         ddr1_event_a_c, riser2_slot_id1_c, ddr2_event_a_c, 
         \e2prom_data_rd[2] , riser2_slot_id0_c, pg_vddq_b1_c, 
         \reset_control_a[1] , \riser_reset[1] , psu0_prsnt_c, 
         \server_power_control/cpu_pwr_control/N_111 , \reset_control_b[1] , 
         riser0_slot16a_prsnt_c, ncp0_d_oc_c, 
         \server_power_control/cpu_pwr_control/N_120 , ddr3_event_b_c, 
         \e2prom_data_rd[7] , riser1_slot_id0_c, pg_vddc_b_c, 
         \server_power_control/cpu_pwr_control/N_109 , \e2prom_data_rd[4] , 
         ddr0_event_b_c, riser1_slot16a_prsnt_c, ddr0_event_a_c, 
         \e2prom_data_rd[0] , riser2_slot16b_prsnt_c, 
         \server_power_control/cpu_pwr_control/N_102 , pg_vddc_a_c, 
         \e2prom_byte_addr[7] , \e2prom_dev_addr[7] , \power_control[7] , 
         \server_power_control/cpu_pwr_control/N_96 , pg_vtt_a1_c, 
         \power_control[4] , \e2prom_dev_addr[4] , \e2prom_byte_addr[0] , 
         pg_vpp_a1_c, \power_control[0] , 
         \server_power_control/cpu_pwr_control/N_89 , \riser_reset[2] , 
         \reset_control_a[2] , psu1_alert_c, pg_pcie_h_b_c, 
         \server_power_control/cpu_pwr_control/N_112 , \reset_control_b[2] , 
         riser0_slot_id2_c, \server_power_control/cpu_pwr_control/N_121 , 
         \riser_reset[4] , \reset_control_a[4] , pg_pcie_h_a_c, psu1_pwrok_c, 
         fm_pwr_btn_c, bmc_gpio48_c, 
         \server_power_control/power_signal_detect_inst/N_4 , 
         \server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lt15 , 
         \server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lto15_2 
         , \server_power_control/N_29 , a_gpio3_c, \server_power_control/N_35 , 
         \e2prom_data_rd[5] , ddr1_event_b_c, riser1_slot_id2_c, 
         \server_power_control/N_442 , pg_vtt_a0_c, \power_control[5] , 
         \e2prom_dev_addr[5] , \server_power_control/N_443 , 
         \reset_control_a[5] , \riser_reset[5] , psu0_pwrok_c, pg_ddr_phy_a_c, 
         \i2c0_slave_inst0/opcode , uart1_tx_b_c, uart1_tx_a_c, bmc_gpio24_c, 
         uart0_tx_b_c, uart0_tx_a_c, bmc_gpio25_c, sys_uart_rxd3_6_3_i_m2, 
         \reset_control_b[6] , \riser_reset[6] , \reset_control_a[6] , 
         \e2prom_byte_addr[3] , pg_vddq_a0_c, \power_control[3] , 
         \e2prom_dev_addr[3] , N_92, N_105, N_130, pg_pcie_phy_a_c, 
         \power_control[6] , \e2prom_dev_addr[6] , N_95, N_108, ddr3_event_a_c, 
         \e2prom_data_rd[3] , pg_vddq_b0_c, riser1_slot16b_prsnt_c, 
         ddr2_event_b_c, \e2prom_data_rd[6] , riser1_slot_id1_c, 
         pg_pcie_phy_b_c, \riser_reset[3] , \reset_control_a[3] , 
         pg_ddr_phy_b_c, psu0_alert_c, 
         \server_power_control/power_signal_detect_inst/N_6 , 
         \server_power_control/power_signal_detect_inst/N_7 , 
         \server_power_control/power_signal_detect_inst/is_pwr_on_off_2_sqmuxa , 
         \i2c0_slave_inst0/N_404 , \i2c0_slave_inst0/slave_addr_out_0_sqmuxa , 
         \eeprom_i2c_inst/e2prom_i2c/bit_cnt_5_i_a2_1_1[1] , 
         e2prom_byte_addr_1_sqmuxa, 
         \eeprom_i2c_inst/e2prom_i2c/next_state_1[0] , 
         \eeprom_i2c_inst/e2prom_i2c/N_188 , 
         \eeprom_i2c_inst/e2prom_i2c/un31_0 , 
         \eeprom_i2c_inst/e2prom_i2c/un1_current_state_15_1_1 , 
         \eeprom_i2c_inst/e2prom_i2c/un1_current_state_15_1 , 
         \eeprom_i2c_inst/e2prom_i2c/un1_scl_in_clean7 , 
         \eeprom_i2c_inst/e2prom_i2c/N_401 , 
         \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa_1_2 , 
         \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa_1_3 , 
         un1_sda_out_0_sqmuxa_1, \eeprom_i2c_inst/e2prom_i2c/N_850 , 
         \eeprom_i2c_inst/e2prom_i2c/un1_timeout_cnt_en17_i_0 , 
         \eeprom_i2c_inst/e2prom_i2c/N_497 , 
         \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_a2_0_0 , 
         \eeprom_i2c_inst/e2prom_i2c/N_496 , 
         \eeprom_i2c_inst/e2prom_i2c/N_518 , 
         \eeprom_i2c_inst/e2prom_i2c/rd_datace[6] , 
         \eeprom_i2c_inst/rd_data[6] , 
         \eeprom_i2c_inst/e2prom_i2c/sda_out_2_sqmuxa_1 , 
         e2prom_data_wr_1_sqmuxa, \e2prom_data_wr[0] , \e2prom_data_wr[1] , 
         \eeprom_i2c_inst/e2prom_i2c/scl_in_dly[3] , 
         \eeprom_i2c_inst/e2prom_i2c/un1_scl_in_clean7_1 , 
         \eeprom_i2c_inst/e2prom_i2c/scl_in_dly[4] , 
         \eeprom_i2c_inst/e2prom_i2c/scl_in_dly[5] , 
         \eeprom_i2c_inst/e2prom_i2c/sda_in_dly[4] , 
         \eeprom_i2c_inst/e2prom_i2c/un1_sda_in_clean8_1 , 
         \eeprom_i2c_inst/e2prom_i2c/sda_in_dly[3] , 
         \eeprom_i2c_inst/e2prom_i2c/sda_in_dly[1] , 
         \eeprom_i2c_inst/e2prom_i2c/sda_in_dly[5] , 
         \eeprom_i2c_inst/e2prom_i2c/sda_in_dly[2] , 
         \eeprom_i2c_inst/e2prom_i2c/un1_sda_in_clean8_0 , 
         \usb_reset_ctrl_inst/next_state_1_i_0_0_m2[0] , 
         \usb_reset_ctrl_inst/data_out_r_20_sn_m26_i_1 , 
         \usb_reset_ctrl_inst/data_out_r_20_sn_N_48 , 
         \server_power_control/data_out_r_20_0_a3_0[5] , 
         \server_power_control/cpu_pwr_control/N_602 , riser_reset_1_sqmuxa, 
         \server_power_control/cpu_pwr_control/N_606_6 , 
         \server_power_control/cpu_pwr_control/un1_next_state40_5_i_a2_0_1 , 
         \server_power_control/cpu_pwr_control/un1_next_state40_5_i_0_0 , 
         \server_power_control/cpub_pwrok_8 , 
         \server_power_control/cpua_pwrok , 
         \server_power_control/cpu_pwr_control/cpua_pwrok_5 , 
         \server_power_control/cpu_pwr_control/cpua_pwrok_6 , 
         \server_power_control/cpu_pwr_control/cpua_pwrok_7 , 
         \server_power_control/N_16 , 
         \server_power_control/reboot_cnt_2_sqmuxa_1 , 
         \server_power_control/next_state115 , 
         \server_power_control/reboot_cnt_2_sqmuxa , 
         \server_power_control/efuse_done13 , \server_power_control/N_82 , 
         \server_power_control/data_out_r_20_0_0[5] , 
         \server_power_control/data_out_r_20_0_a3_1_0[5] , 
         \server_power_control/cpu_off_done_0_sqmuxa_1_1 , 
         \server_power_control/cpu_off_done_0_sqmuxa_1 , 
         \server_power_control/un1_next_state105_10_2 , 
         \server_power_control/efuse_dlylde_0 , \i2c0_slave_inst0/N_68 , 
         \i2c0_slave_inst0/un1_stretch_en_i_a2[0] , 
         \i2c0_slave_inst0/next_state_i_a8_1[0] , \i2c0_slave_inst0/N_170 , 
         \i2c0_slave_inst0/N_173 , \i2c0_slave_inst0/next_state_i_a8_3_1[0] , 
         \i2c0_slave_inst0/N_171 , \i2c0_slave_inst0/next_state_i_2[0] , 
         \i2c0_slave_inst0/sda_in_dly[4] , \i2c0_slave_inst0/sda_in_dly[5] , 
         \i2c0_slave_inst0/sda_out_reg_13_iv_2 , 
         \i2c0_slave_inst0/sda_out_reg_13_iv_5_1 , 
         \i2c0_slave_inst0/rd_data_i_m[4] , \i2c0_slave_inst0/un1_bit_cnt_3 , 
         \i2c0_slave_inst0/rcv_bit_RNO[6] , \i2c0_slave_inst0/rcv_bit18 , 
         \i2c0_slave_inst0/un1_bit_cnt_4 , \i2c0_slave_inst0/rd_data_i_m[1] , 
         \i2c0_slave_inst0/scl_in_dly[1] , 
         \i2c0_slave_inst0/un1_scl_in_clean8 , 
         \i2c0_slave_inst0/un1_scl_in_clean8_1 , 
         \i2c0_slave_inst0/scl_in_dly[3] , \i2c0_slave_inst0/scl_in_dly[4] , 
         \i2c0_slave_inst0/scl_in_dly[2] , \i2c0_slave_inst0/scl_in_dly[5] , 
         \i2c0_slave_inst0/sda_in_dly[3] , 
         \i2c0_slave_inst0/un1_sda_in_clean8_1 , 
         \i2c0_slave_inst0/sda_in_dly[1] , \i2c0_slave_inst0/sda_in_dly[2] , 
         \i2c0_slave_inst0.sda_in_dly[0] , 
         \i2c0_slave_inst0/un1_sda_in_clean8 , 
         \eeprom_i2c_inst/e2prom_i2c/un1_current_state_7 , 
         \eeprom_i2c_inst/e2prom_i2c/rd_datace[2] , 
         \eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[5] , 
         \eeprom_i2c_inst/rd_data[2] , 
         \eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[0] , 
         \eeprom_i2c_inst/rd_data[0] , \eeprom_i2c_inst/e2prom_i2c/g0_0_6 , 
         \eeprom_i2c_inst/e2prom_i2c/scl_cnt_en , \eeprom_i2c_inst/rd_data[5] , 
         \eeprom_i2c_inst/e2prom_i2c/un26_i_a4_1[1] , 
         \eeprom_i2c_inst/e2prom_i2c/un31_2 , 
         \eeprom_i2c_inst/e2prom_i2c/next_state[1] , 
         \eeprom_i2c_inst/e2prom_i2c/un1_scl_out_0_sqmuxa_2 , 
         \eeprom_i2c_inst/e2prom_i2c/N_220 , 
         \eeprom_i2c_inst.e2prom_i2c.un1_scl_out_0_sqmuxa_i , 
         \eeprom_i2c_inst/e2prom_i2c/next_state_a4_0_0[3] , 
         \eeprom_i2c_inst/e2prom_i2c/N_250 , 
         \eeprom_i2c_inst/e2prom_i2c/next_state_0[3] , 
         \eeprom_i2c_inst/e2prom_i2c/N_248 , 
         \eeprom_i2c_inst/e2prom_i2c/N_258 , 
         \eeprom_i2c_inst/e2prom_i2c/N_184 , 
         \eeprom_i2c_inst/e2prom_i2c/N_261 , e2prom_dev_addr_1_sqmuxa, 
         \eeprom_i2c_inst/e2prom_i2c/N_255 , 
         \eeprom_i2c_inst/e2prom_i2c/next_state_a2_1[3] , 
         \eeprom_i2c_inst/e2prom_i2c/un1_start_next_bit_1_i_o2_0 , 
         \eeprom_i2c_inst/rd_data[1] , 
         \eeprom_i2c_inst/e2prom_i2c/next_state_3[1] , 
         \eeprom_i2c_inst/e2prom_i2c/next_state_1[1] , 
         \eeprom_i2c_inst/rd_data[4] , \eeprom_i2c_inst/e2prom_i2c/N_1874_tz , 
         \eeprom_i2c_inst.e2prom_i2c.N_103 , 
         \eeprom_i2c_inst/e2prom_i2c/un1_scl_out_en20_1_i_0 , 
         \eeprom_i2c_inst/e2prom_i2c/un1_sda_out30 , 
         \eeprom_i2c_inst/e2prom_i2c/un1_scl_out_0_sqmuxa_0 , 
         \eeprom_i2c_inst.e2prom_i2c.sda_in_dly[0] , 
         \eeprom_i2c_inst/e2prom_i2c/N_245 , \eeprom_i2c_inst/rd_data[7] , 
         \eeprom_i2c_inst/e2prom_i2c/N_39 , \e2prom_data_wr[2] , 
         \e2prom_data_wr[3] , 
         \eeprom_i2c_inst/e2prom_i2c/before_state_en_6[0] , e2prom_is_rw, 
         \eeprom_i2c_inst/e2prom_i2c/sda_out28 , 
         \eeprom_i2c_inst.e2prom_i2c.sda_out_12_iv_i , 
         \bmc_reset_ctrl_inst/bmc_prst9_10 , \bmc_reset_ctrl_inst/bmc_prst9_9 , 
         \bmc_reset_ctrl_inst/bmc_prst9_11 , \bmc_reset_ctrl_inst/bmc_prst9 , 
         \usb_reset_ctrl_inst/N_469 , 
         \usb_reset_ctrl_inst/reset_control_a_1_sqmuxa_0_a3_0 , 
         reset_control_a_1_sqmuxa, 
         \usb_reset_ctrl_inst/data_out_r_20_sn_m36_i_2 , 
         \usb_reset_ctrl_inst/data_out_r_20_sn_m36_i_0 , 
         \usb_reset_ctrl_inst/data_out_r_20_sn_N_52 , 
         \usb_reset_ctrl_inst/data_out_r_20_sn_N_43 , 
         \usb_reset_ctrl_inst/N_467 , \usb_reset_ctrl_inst/N_474 , 
         \usb_reset_ctrl_inst/N_473 , power_control_0_sqmuxa, 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_14 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_1 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_3_tz , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_6 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_0 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_1 , 
         reset_control_b_1_sqmuxa, 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_1_4_1 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_1_4_2 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_0 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_6 , 
         \por/rst_btn_dly[3] , \por/rst_btn_dly[4] , \por/un1_reset_1 , 
         \por/rst_btn_dly[5] , riser1_reset_c, 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_3 , 
         \usb_reset_ctrl_inst/N_145 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_4 , 
         \usb_reset_ctrl_inst/N_144 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_2 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_8_1 , 
         \usb_reset_ctrl_inst/N_124 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_22 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_11_2 , 
         \usb_reset_ctrl_inst/riser_reset_1_sqmuxa_1 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_7_3 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_4 , 
         \usb_reset_ctrl_inst/data_out_r_20_sn_N_49_1 , 
         \usb_reset_ctrl_inst/N_822_1 , 
         \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_2 , 
         \usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_7[1] , 
         \usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_4[1] , 
         \usb_reset_ctrl_inst/usb_prst_1_0_35_i_0_a2_0_1 , 
         data_out_r_20_sn_N_16_1, 
         \server_power_control/switch_reset_control/next_state13_5 , 
         \server_power_control/cpu_pwr_control/N_98 , pg_3v3_riser_c, 
         \server_power_control/cpu_pwr_control/N_101 , \reset_control_b[4] , 
         riser0_slot_id0_c, \server_power_control/cpu_pwr_control/N_77 , 
         bmc_pwrgd_c, \server_power_control/cpu_pwr_control/N_631 , 
         \server_power_control/cpu_pwr_control/un1_current_state_4_i_a2_1 , 
         \reset_control_b[5] , 
         \server_power_control/cpu_pwr_control/un1_current_state_4_i_a2_6_0 , 
         \server_power_control/cpu_pwr_control/cpua_pwrok_3 , 
         \server_power_control/cpu_pwr_control/cpub_pwrok_6 , 
         \por/rst_btn_dly[2] , 
         \server_power_control/power_signal_detect_inst/rst_btn_dbn/next_state24_0_a2_3 
         , \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5_3 , 
         \server_power_control/power_signal_detect_inst/un1_force_15slto12_0 , 
         \server_power_control/power_signal_detect_inst/m4_0 , 
         \server_power_control/power_signal_detect_inst/un1_force_15slt12 , 
         \server_power_control/power_signal_detect_inst/N_5 , 
         \server_power_control/power_signal_detect_inst/un1_nomral_300ms_2 , 
         \server_power_control/power_signal_detect_inst/un1_nomral_300mslto15_1 , 
         \server_power_control/power_signal_detect_inst/un1_force_15s_1 , 
         \server_power_control/power_signal_detect_inst/N_655 , 
         \server_power_control/power_signal_detect_inst/N_644 , 
         \server_power_control/power_signal_detect_inst/un1_debounce_cntlto15_2 , 
         \server_power_control/power_signal_detect_inst/un1_low_time_cnt , 
         \server_power_control/power_signal_detect_inst/un1_force_15s_1lto12_0 , 
         \server_power_control/power_signal_detect_inst/un1_force_15s_1lt12 , 
         \server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_5 , 
         \server_power_control/power_signal_detect_inst/un1_force_15slto15_1_0 , 
         \server_power_control/power_signal_detect_inst/un1_nomral_300ms_5 , 
         \server_power_control/power_signal_detect_inst/is_pwr_force_off_2_sqmuxa_0 
         , \server_power_control/power_signal_detect_inst/un1_nomral_300ms_7 , 
         \server_power_control/power_signal_detect_inst/N_652 , 
         \server_power_control/power_signal_detect_inst/un1_nomral_300ms , 
         \server_power_control/power_signal_detect_inst/un1_current_state_4_0 , 
         \server_power_control/power_signal_detect_inst/un1_next_state64_3_0 , 
         \server_power_control/power_signal_detect_inst/un1_force_15slto7_i_a3_1 , 
         \server_power_control/power_signal_detect_inst/N_658 , 
         \server_power_control/power_signal_detect_inst/un1_force_15slto10_1 , 
         \server_power_control/power_signal_detect_inst/un1_low_time_cntlto15_2 , 
         \server_power_control/power_signal_detect_inst/N_643 , 
         \server_power_control/power_signal_detect_inst/N_657 , 
         \server_power_control/power_signal_detect_inst/un1_force_15s_1lto10_1 , 
         \server_power_control/power_signal_detect_inst/un1_force_15s_1lto7_i_a3_1 
         , 
         \server_power_control/power_signal_detect_inst/debounce_cnt_0_sqmuxa_0 , 
         \server_power_control/power_signal_detect_inst/un1_next_state67_1_0 , 
         \server_power_control/power_signal_detect_inst/N_654 , 
         \server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_7 , 
         \server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_2 , 
         \server_power_control/efuse_done_0_sqmuxa_2 , 
         \server_power_control/efuse_done_0_sqmuxa_1 , 
         \server_power_control/next_state108 , 
         \server_power_control/cpu_pwr_control/un1_next_state40_2_i_0_a2 , 
         \server_power_control/un1_efuse_dly_0_sqmuxa_2_1 , 
         \server_power_control/un1_current_state_2 , 
         \server_power_control/un1_next_state105_11_3 , 
         \server_power_control/cpu_off_done_1_sqmuxa , 
         \server_power_control/N_125_1 , 
         \server_power_control/efuse_dly_0_sqmuxa , 
         \server_power_control/psu_on_off26_5 , 
         \server_power_control/psu_on_off26_4 , 
         \server_power_control/un1_wait_time_out_0_sqmuxa_1_1 , 
         \server_power_control/psu_dly11_4 , 
         \server_power_control/psu_dly11_5 , 
         \server_power_control/efuse_done13_4 , 
         \server_power_control/efuse_done13_5 , 
         \server_power_control/next_state101_8 , 
         \server_power_control/next_state101_9 , 
         \server_power_control/next_state101_11 , 
         \server_power_control/next_state101_10 , 
         \server_power_control/psu_on_off17_3 , 
         \server_power_control/psu_on_off17_4 , 
         \server_power_control/un1_is_reboot_0_sqmuxa_1 , 
         \server_power_control/g0_5 , \i2c0_slave_inst0/opcode_0_sqmuxa , 
         \i2c0_slave_inst0/rcv_bit_RNO[0] , \i2c0_slave_inst0/rcv_bit_RNO[1] , 
         \i2c0_slave_inst0/rcv_bit22 , \i2c0_slave_inst0/rcv_bit_RNO[2] , 
         \i2c0_slave_inst0/next_state_i_a8_2_0[0] , \i2c0_slave_inst0/N_108 , 
         \i2c0_slave_inst0/is_slave_send_2_sqmuxa_1 , 
         \i2c0_slave_inst0.un1_is_slave_send32_i , 
         \i2c0_slave_inst0/un1_start_next_bit , 
         \i2c0_slave_inst0/is_slave_send_1_sqmuxa_0 , 
         \i2c0_slave_inst0/next_state_i_0_1[1] , 
         \i2c0_slave_inst0/next_state_i_0_a3_0_0[1] , \i2c0_slave_inst0/N_179 , 
         \i2c0_slave_inst0/next_state_i_0[2] , 
         \i2c0_slave_inst0/next_state_i_1[2] , \i2c0_slave_inst0/N_166 , 
         \i2c0_slave_inst0/next_state_i_3[2] , 
         \i2c0_slave_inst0/next_state_i_0_0[1] , 
         \i2c0_slave_inst0/next_state_i_0_a3_0[1] , \i2c0_slave_inst0/N_74 , 
         \i2c0_slave_inst0/scl_in_dly[0] , \i2c0_slave_inst0/word_addr14 , 
         \i2c0_slave_inst0/un1_timeout_cnt_en17_i_a3_0_1 , 
         \i2c0_slave_inst0/un1_timeout_cnt_en17_i_a3_0_2 , 
         \i2c0_slave_inst0/N_428 , \i2c0_slave_inst0/N_52 , 
         \i2c0_slave_inst0/N_419 , \i2c0_slave_inst0/N_121 , 
         \i2c0_slave_inst0/current_state_ns_i_0[4] , 
         \i2c0_slave_inst0/next_state16_1_i , 
         \i2c0_slave_inst0/next_state16_2_i , 
         \i2c0_slave_inst0/next_state16_0_i , \i2c0_slave_inst0/N_181 , 
         \i2c0_slave_inst0/un1_bit_cnt_5 , \i2c0_slave_inst0/rcv_bit_RNO[7] , 
         \i2c0_slave_inst0/un1_bit_cnt_7 , \i2c0_slave_inst0/rcv_bit_RNO[5] , 
         \i2c0_slave_inst0/N_432 , \i2c0_slave_inst0/N_100 , 
         \i2c0_slave_inst0/un1_bit_cnt_2 , \i2c0_slave_inst0/un1_bit_cnt_6 , 
         \timer_inst/int_100ms_cnt11_7 , 
         \eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[1] , 
         \eeprom_i2c_inst/e2prom_i2c/rd_datace[7] , 
         \eeprom_i2c_inst/e2prom_i2c/rd_datace[3] , 
         \eeprom_i2c_inst/rd_data[3] , \i2c0_slave_inst0/rcv_bit_RNO[3] , 
         \i2c0_slave_inst0/rcv_bit_RNO[4] , \server_power_control.N_40_i , 
         un1_reset_i, un1_reset_3_i, un1_reset_2_i, un1_reset_1_i, 
         \bmc_reset_ctrl_inst.un1_bmc_prst17_i_0 , sg0_pcie1_l0_reset_c, 
         riser0_reset_c, pcie_nvme0_rst_c, pcie_sata_rst_c, pcie_nvme1_rst_c, 
         \i2c0_slave_inst0.un1_is_slave_send_0_sqmuxa_i , \e2prom_data_wr[7] , 
         bmc_sda_in, \i2c0_slave_inst0.is_slave_send_i , sys_uart_txd3_c, 
         e2prom_sda_in, e2prom_sda_out, e2prom_scl_in, e2prom_scl_out, 
         psu_ps_on_cpld_c, bmc_pcie_rst_c, VCCI;

  eeprom_i2c_inst_e2prom_i2c_SLICE_0 \eeprom_i2c_inst/e2prom_i2c/SLICE_0 ( 
    .B1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[4] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/N_129_i ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[3] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/N_129_i ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[4] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[3] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_2_sqmuxa_i ), .CLK(clock_c), 
    .FCI(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_cry[2] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[3] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[3] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[4] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[4] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_1 \eeprom_i2c_inst/e2prom_i2c/SLICE_1 ( 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_129_i ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_129_i ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[1] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[2] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[1] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_2_sqmuxa_i ), .CLK(clock_c), 
    .FCI(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_cry[0] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[1] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[1] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[2] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[2] ), 
    .FCO(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_cry[2] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_2 \eeprom_i2c_inst/e2prom_i2c/SLICE_2 ( 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_129_i ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/N_129_i ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[0] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_2_sqmuxa_i ), .CLK(clock_c), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_s[0] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[0] ), 
    .FCO(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_cry[0] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_3 \eeprom_i2c_inst/e2prom_i2c/SLICE_3 ( 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[9] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[9] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/state_cnte ), .CLK(clock_c), 
    .FCI(\eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[8] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[9] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[9] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_4 \eeprom_i2c_inst/e2prom_i2c/SLICE_4 ( 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[8] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[7] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[8] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[7] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/state_cnte ), .CLK(clock_c), 
    .FCI(\eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[6] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[7] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[7] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[8] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[8] ), 
    .FCO(\eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[8] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_5 \eeprom_i2c_inst/e2prom_i2c/SLICE_5 ( 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[6] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[5] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[6] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[5] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/state_cnte ), .CLK(clock_c), 
    .FCI(\eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[4] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[5] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[5] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[6] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[6] ), 
    .FCO(\eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[6] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_6 \eeprom_i2c_inst/e2prom_i2c/SLICE_6 ( 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[4] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[3] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[4] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[3] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/state_cnte ), .CLK(clock_c), 
    .FCI(\eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[2] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[3] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[3] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[4] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[4] ), 
    .FCO(\eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[4] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_7 \eeprom_i2c_inst/e2prom_i2c/SLICE_7 ( 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[1] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[2] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[1] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/state_cnte ), .CLK(clock_c), 
    .FCI(\eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[0] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[1] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[1] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[2] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[2] ), 
    .FCO(\eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[2] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_8 \eeprom_i2c_inst/e2prom_i2c/SLICE_8 ( 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[0] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[0] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/state_cnte ), .CLK(clock_c), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_s[0] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[0] ), 
    .FCO(\eeprom_i2c_inst/e2prom_i2c/state_cnt_cry[0] ));
  bmc_reset_ctrl_inst_SLICE_9 \bmc_reset_ctrl_inst/SLICE_9 ( 
    .A0(\bmc_reset_ctrl_inst/srst_delay[7] ), 
    .DI0(\bmc_reset_ctrl_inst/un1_srst_delay_1[7] ), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_6 ), 
    .F0(\bmc_reset_ctrl_inst/un1_srst_delay_1[7] ), 
    .Q0(\bmc_reset_ctrl_inst/srst_delay[7] ));
  bmc_reset_ctrl_inst_SLICE_10 \bmc_reset_ctrl_inst/SLICE_10 ( 
    .A1(\bmc_reset_ctrl_inst/srst_delay[6] ), 
    .B0(\bmc_reset_ctrl_inst/srst_delay[5] ), 
    .M0(\bmc_reset_ctrl_inst.sig_r0 ), .LSR(reset_i), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_4 ), 
    .F0(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_5_0_S0 ), 
    .Q0(\bmc_reset_ctrl_inst.sig_r1 ), 
    .F1(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_5_0_S1 ), 
    .FCO(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_6 ));
  bmc_reset_ctrl_inst_SLICE_11 \bmc_reset_ctrl_inst/SLICE_11 ( 
    .A1(\bmc_reset_ctrl_inst/srst_delay[4] ), 
    .A0(\bmc_reset_ctrl_inst/srst_delay[3] ), 
    .DI1(\bmc_reset_ctrl_inst/un1_srst_delay_1[4] ), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_2 ), 
    .F0(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_3_0_S0 ), 
    .F1(\bmc_reset_ctrl_inst/un1_srst_delay_1[4] ), 
    .Q1(\bmc_reset_ctrl_inst/srst_delay[4] ), 
    .FCO(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_4 ));
  bmc_reset_ctrl_inst_SLICE_12 \bmc_reset_ctrl_inst/SLICE_12 ( 
    .A1(\bmc_reset_ctrl_inst/srst_delay[2] ), 
    .A0(\bmc_reset_ctrl_inst/srst_delay[1] ), 
    .M1(\bmc_reset_ctrl_inst/next_state[1] ), 
    .M0(\bmc_reset_ctrl_inst/next_state[0] ), .LSR(reset_i), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_0 ), 
    .F0(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_1_0_S0 ), 
    .Q0(\bmc_reset_ctrl_inst/current_state[0] ), 
    .F1(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_1_0_S1 ), 
    .Q1(\bmc_reset_ctrl_inst.prst_delay_4[2] ), 
    .FCO(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_2 ));
  bmc_reset_ctrl_inst_SLICE_13 \bmc_reset_ctrl_inst/SLICE_13 ( 
    .A1(\bmc_reset_ctrl_inst/srst_delay[0] ), 
    .A0(\bmc_reset_ctrl_inst/bmc_srst6 ), 
    .DI1(\bmc_reset_ctrl_inst/un1_srst_delay_1[0] ), .CLK(clock_c), 
    .F1(\bmc_reset_ctrl_inst/un1_srst_delay_1[0] ), 
    .Q1(\bmc_reset_ctrl_inst/srst_delay[0] ), 
    .FCO(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_0 ));
  bmc_reset_ctrl_inst_SLICE_14 \bmc_reset_ctrl_inst/SLICE_14 ( 
    .B0(\bmc_reset_ctrl_inst/prst_delay ), 
    .A0(\bmc_reset_ctrl_inst/prst_delay[15] ), 
    .DI0(\bmc_reset_ctrl_inst/prst_delay_s[15] ), 
    .CE(\bmc_reset_ctrl_inst/prst_delaye ), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/prst_delay_cry[14] ), 
    .F0(\bmc_reset_ctrl_inst/prst_delay_s[15] ), 
    .Q0(\bmc_reset_ctrl_inst/prst_delay[15] ));
  bmc_reset_ctrl_inst_SLICE_15 \bmc_reset_ctrl_inst/SLICE_15 ( 
    .B1(\bmc_reset_ctrl_inst/prst_delay[14] ), 
    .A1(\bmc_reset_ctrl_inst/prst_delay ), 
    .B0(\bmc_reset_ctrl_inst/prst_delay[13] ), 
    .A0(\bmc_reset_ctrl_inst/prst_delay ), 
    .DI1(\bmc_reset_ctrl_inst/prst_delay_s[14] ), 
    .DI0(\bmc_reset_ctrl_inst/prst_delay_s[13] ), 
    .CE(\bmc_reset_ctrl_inst/prst_delaye ), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/prst_delay_cry[12] ), 
    .F0(\bmc_reset_ctrl_inst/prst_delay_s[13] ), 
    .Q0(\bmc_reset_ctrl_inst/prst_delay[13] ), 
    .F1(\bmc_reset_ctrl_inst/prst_delay_s[14] ), 
    .Q1(\bmc_reset_ctrl_inst/prst_delay[14] ), 
    .FCO(\bmc_reset_ctrl_inst/prst_delay_cry[14] ));
  bmc_reset_ctrl_inst_SLICE_16 \bmc_reset_ctrl_inst/SLICE_16 ( 
    .B1(\bmc_reset_ctrl_inst/prst_delay ), 
    .A1(\bmc_reset_ctrl_inst/prst_delay[12] ), 
    .B0(\bmc_reset_ctrl_inst/prst_delay ), 
    .A0(\bmc_reset_ctrl_inst/prst_delay[11] ), 
    .DI1(\bmc_reset_ctrl_inst/prst_delay_s[12] ), 
    .DI0(\bmc_reset_ctrl_inst/prst_delay_s[11] ), 
    .CE(\bmc_reset_ctrl_inst/prst_delaye ), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/prst_delay_cry[10] ), 
    .F0(\bmc_reset_ctrl_inst/prst_delay_s[11] ), 
    .Q0(\bmc_reset_ctrl_inst/prst_delay[11] ), 
    .F1(\bmc_reset_ctrl_inst/prst_delay_s[12] ), 
    .Q1(\bmc_reset_ctrl_inst/prst_delay[12] ), 
    .FCO(\bmc_reset_ctrl_inst/prst_delay_cry[12] ));
  bmc_reset_ctrl_inst_SLICE_17 \bmc_reset_ctrl_inst/SLICE_17 ( 
    .B1(\bmc_reset_ctrl_inst/prst_delay[10] ), 
    .A1(\bmc_reset_ctrl_inst/prst_delay ), 
    .B0(\bmc_reset_ctrl_inst/prst_delay[9] ), 
    .A0(\bmc_reset_ctrl_inst/prst_delay ), 
    .DI1(\bmc_reset_ctrl_inst/prst_delay_s[10] ), 
    .DI0(\bmc_reset_ctrl_inst/prst_delay_s[9] ), 
    .CE(\bmc_reset_ctrl_inst/prst_delaye ), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/prst_delay_cry[8] ), 
    .F0(\bmc_reset_ctrl_inst/prst_delay_s[9] ), 
    .Q0(\bmc_reset_ctrl_inst/prst_delay[9] ), 
    .F1(\bmc_reset_ctrl_inst/prst_delay_s[10] ), 
    .Q1(\bmc_reset_ctrl_inst/prst_delay[10] ), 
    .FCO(\bmc_reset_ctrl_inst/prst_delay_cry[10] ));
  bmc_reset_ctrl_inst_SLICE_18 \bmc_reset_ctrl_inst/SLICE_18 ( 
    .B1(\bmc_reset_ctrl_inst/prst_delay ), 
    .A1(\bmc_reset_ctrl_inst/prst_delay[8] ), 
    .B0(\bmc_reset_ctrl_inst/prst_delay ), 
    .A0(\bmc_reset_ctrl_inst/prst_delay[7] ), 
    .DI1(\bmc_reset_ctrl_inst/prst_delay_s[8] ), 
    .DI0(\bmc_reset_ctrl_inst/prst_delay_s[7] ), 
    .CE(\bmc_reset_ctrl_inst/prst_delaye ), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/prst_delay_cry[6] ), 
    .F0(\bmc_reset_ctrl_inst/prst_delay_s[7] ), 
    .Q0(\bmc_reset_ctrl_inst/prst_delay[7] ), 
    .F1(\bmc_reset_ctrl_inst/prst_delay_s[8] ), 
    .Q1(\bmc_reset_ctrl_inst/prst_delay[8] ), 
    .FCO(\bmc_reset_ctrl_inst/prst_delay_cry[8] ));
  bmc_reset_ctrl_inst_SLICE_19 \bmc_reset_ctrl_inst/SLICE_19 ( 
    .C1(\bmc_reset_ctrl_inst/prst_delay[6] ), 
    .B1(\bmc_reset_ctrl_inst/prst_delay ), 
    .A1(\bmc_reset_ctrl_inst.prst_delay_4[2] ), 
    .C0(\bmc_reset_ctrl_inst/prst_delay[5] ), 
    .B0(\bmc_reset_ctrl_inst/prst_delay ), 
    .A0(\bmc_reset_ctrl_inst.prst_delay_4[2] ), 
    .DI1(\bmc_reset_ctrl_inst/prst_delay_s[6] ), 
    .DI0(\bmc_reset_ctrl_inst/prst_delay_s[5] ), 
    .CE(\bmc_reset_ctrl_inst/prst_delaye ), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/prst_delay_cry[4] ), 
    .F0(\bmc_reset_ctrl_inst/prst_delay_s[5] ), 
    .Q0(\bmc_reset_ctrl_inst/prst_delay[5] ), 
    .F1(\bmc_reset_ctrl_inst/prst_delay_s[6] ), 
    .Q1(\bmc_reset_ctrl_inst/prst_delay[6] ), 
    .FCO(\bmc_reset_ctrl_inst/prst_delay_cry[6] ));
  bmc_reset_ctrl_inst_SLICE_20 \bmc_reset_ctrl_inst/SLICE_20 ( 
    .B1(\bmc_reset_ctrl_inst/prst_delay ), 
    .A1(\bmc_reset_ctrl_inst/prst_delay[4] ), 
    .B0(\bmc_reset_ctrl_inst/prst_delay ), 
    .A0(\bmc_reset_ctrl_inst/prst_delay[3] ), 
    .DI1(\bmc_reset_ctrl_inst/prst_delay_s[4] ), 
    .DI0(\bmc_reset_ctrl_inst/prst_delay_s[3] ), 
    .CE(\bmc_reset_ctrl_inst/prst_delaye ), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/prst_delay_cry[2] ), 
    .F0(\bmc_reset_ctrl_inst/prst_delay_s[3] ), 
    .Q0(\bmc_reset_ctrl_inst/prst_delay[3] ), 
    .F1(\bmc_reset_ctrl_inst/prst_delay_s[4] ), 
    .Q1(\bmc_reset_ctrl_inst/prst_delay[4] ), 
    .FCO(\bmc_reset_ctrl_inst/prst_delay_cry[4] ));
  bmc_reset_ctrl_inst_SLICE_21 \bmc_reset_ctrl_inst/SLICE_21 ( 
    .C1(\bmc_reset_ctrl_inst/prst_delay[2] ), 
    .B1(\bmc_reset_ctrl_inst/prst_delay ), 
    .A1(\bmc_reset_ctrl_inst.prst_delay_4[2] ), 
    .B0(\bmc_reset_ctrl_inst/prst_delay ), 
    .A0(\bmc_reset_ctrl_inst/prst_delay[1] ), 
    .DI1(\bmc_reset_ctrl_inst/prst_delay_s[2] ), 
    .DI0(\bmc_reset_ctrl_inst/prst_delay_s[1] ), 
    .CE(\bmc_reset_ctrl_inst/prst_delaye ), .CLK(clock_c), 
    .FCI(\bmc_reset_ctrl_inst/prst_delay_cry[0] ), 
    .F0(\bmc_reset_ctrl_inst/prst_delay_s[1] ), 
    .Q0(\bmc_reset_ctrl_inst/prst_delay[1] ), 
    .F1(\bmc_reset_ctrl_inst/prst_delay_s[2] ), 
    .Q1(\bmc_reset_ctrl_inst/prst_delay[2] ), 
    .FCO(\bmc_reset_ctrl_inst/prst_delay_cry[2] ));
  bmc_reset_ctrl_inst_SLICE_22 \bmc_reset_ctrl_inst/SLICE_22 ( 
    .B1(\bmc_reset_ctrl_inst/prst_delay ), 
    .A1(\bmc_reset_ctrl_inst/prst_delay[0] ), 
    .B0(\bmc_reset_ctrl_inst/prst_delay ), 
    .DI1(\bmc_reset_ctrl_inst/prst_delay_s[0] ), 
    .CE(\bmc_reset_ctrl_inst/prst_delaye ), .CLK(clock_c), 
    .F1(\bmc_reset_ctrl_inst/prst_delay_s[0] ), 
    .Q1(\bmc_reset_ctrl_inst/prst_delay[0] ), 
    .FCO(\bmc_reset_ctrl_inst/prst_delay_cry[0] ));
  usb_reset_ctrl_inst_SLICE_23 \usb_reset_ctrl_inst/SLICE_23 ( 
    .B0(\usb_reset_ctrl_inst/N_806_i ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[15] ), 
    .DI0(\usb_reset_ctrl_inst/urst_delay_s[15] ), 
    .CE(\usb_reset_ctrl_inst/urst_delaye ), .CLK(clock_c), 
    .FCI(\usb_reset_ctrl_inst/urst_delay_cry[14] ), 
    .F0(\usb_reset_ctrl_inst/urst_delay_s[15] ), 
    .Q0(\usb_reset_ctrl_inst/urst_delay[15] ));
  usb_reset_ctrl_inst_SLICE_24 \usb_reset_ctrl_inst/SLICE_24 ( 
    .B1(\usb_reset_ctrl_inst/N_806_i ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[14] ), 
    .B0(\usb_reset_ctrl_inst/N_806_i ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[13] ), 
    .DI1(\usb_reset_ctrl_inst/urst_delay_s[14] ), 
    .DI0(\usb_reset_ctrl_inst/urst_delay_s[13] ), 
    .CE(\usb_reset_ctrl_inst/urst_delaye ), .CLK(clock_c), 
    .FCI(\usb_reset_ctrl_inst/urst_delay_cry[12] ), 
    .F0(\usb_reset_ctrl_inst/urst_delay_s[13] ), 
    .Q0(\usb_reset_ctrl_inst/urst_delay[13] ), 
    .F1(\usb_reset_ctrl_inst/urst_delay_s[14] ), 
    .Q1(\usb_reset_ctrl_inst/urst_delay[14] ), 
    .FCO(\usb_reset_ctrl_inst/urst_delay_cry[14] ));
  usb_reset_ctrl_inst_SLICE_25 \usb_reset_ctrl_inst/SLICE_25 ( 
    .B1(\usb_reset_ctrl_inst/N_806_i ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[12] ), 
    .B0(\usb_reset_ctrl_inst/N_806_i ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[11] ), 
    .DI1(\usb_reset_ctrl_inst/urst_delay_s[12] ), 
    .DI0(\usb_reset_ctrl_inst/urst_delay_s[11] ), 
    .CE(\usb_reset_ctrl_inst/urst_delaye ), .CLK(clock_c), 
    .FCI(\usb_reset_ctrl_inst/urst_delay_cry[10] ), 
    .F0(\usb_reset_ctrl_inst/urst_delay_s[11] ), 
    .Q0(\usb_reset_ctrl_inst/urst_delay[11] ), 
    .F1(\usb_reset_ctrl_inst/urst_delay_s[12] ), 
    .Q1(\usb_reset_ctrl_inst/urst_delay[12] ), 
    .FCO(\usb_reset_ctrl_inst/urst_delay_cry[12] ));
  usb_reset_ctrl_inst_SLICE_26 \usb_reset_ctrl_inst/SLICE_26 ( 
    .B1(\usb_reset_ctrl_inst/N_806_i ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[10] ), 
    .B0(\usb_reset_ctrl_inst/N_806_i ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[9] ), 
    .DI1(\usb_reset_ctrl_inst/urst_delay_s[10] ), 
    .DI0(\usb_reset_ctrl_inst/urst_delay_s[9] ), 
    .CE(\usb_reset_ctrl_inst/urst_delaye ), .CLK(clock_c), 
    .FCI(\usb_reset_ctrl_inst/urst_delay_cry[8] ), 
    .F0(\usb_reset_ctrl_inst/urst_delay_s[9] ), 
    .Q0(\usb_reset_ctrl_inst/urst_delay[9] ), 
    .F1(\usb_reset_ctrl_inst/urst_delay_s[10] ), 
    .Q1(\usb_reset_ctrl_inst/urst_delay[10] ), 
    .FCO(\usb_reset_ctrl_inst/urst_delay_cry[10] ));
  usb_reset_ctrl_inst_SLICE_27 \usb_reset_ctrl_inst/SLICE_27 ( 
    .B1(\usb_reset_ctrl_inst/N_806_i ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[8] ), 
    .B0(\usb_reset_ctrl_inst/N_806_i ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[7] ), 
    .DI1(\usb_reset_ctrl_inst/urst_delay_s[8] ), 
    .DI0(\usb_reset_ctrl_inst/urst_delay_s[7] ), 
    .CE(\usb_reset_ctrl_inst/urst_delaye ), .CLK(clock_c), 
    .FCI(\usb_reset_ctrl_inst/urst_delay_cry[6] ), 
    .F0(\usb_reset_ctrl_inst/urst_delay_s[7] ), 
    .Q0(\usb_reset_ctrl_inst/urst_delay[7] ), 
    .F1(\usb_reset_ctrl_inst/urst_delay_s[8] ), 
    .Q1(\usb_reset_ctrl_inst/urst_delay[8] ), 
    .FCO(\usb_reset_ctrl_inst/urst_delay_cry[8] ));
  usb_reset_ctrl_inst_SLICE_28 \usb_reset_ctrl_inst/SLICE_28 ( 
    .B1(\usb_reset_ctrl_inst/N_806_i ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[6] ), 
    .B0(\usb_reset_ctrl_inst/N_806_i ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[5] ), 
    .DI1(\usb_reset_ctrl_inst/urst_delay_s[6] ), 
    .DI0(\usb_reset_ctrl_inst/urst_delay_s[5] ), 
    .CE(\usb_reset_ctrl_inst/urst_delaye ), .CLK(clock_c), 
    .FCI(\usb_reset_ctrl_inst/urst_delay_cry[4] ), 
    .F0(\usb_reset_ctrl_inst/urst_delay_s[5] ), 
    .Q0(\usb_reset_ctrl_inst/urst_delay[5] ), 
    .F1(\usb_reset_ctrl_inst/urst_delay_s[6] ), 
    .Q1(\usb_reset_ctrl_inst/urst_delay[6] ), 
    .FCO(\usb_reset_ctrl_inst/urst_delay_cry[6] ));
  usb_reset_ctrl_inst_SLICE_29 \usb_reset_ctrl_inst/SLICE_29 ( 
    .B1(\usb_reset_ctrl_inst/N_806_i ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[4] ), 
    .B0(\usb_reset_ctrl_inst/N_806_i ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[3] ), 
    .DI1(\usb_reset_ctrl_inst/urst_delay_s[4] ), 
    .DI0(\usb_reset_ctrl_inst/urst_delay_s[3] ), 
    .CE(\usb_reset_ctrl_inst/urst_delaye ), .CLK(clock_c), 
    .FCI(\usb_reset_ctrl_inst/urst_delay_cry[2] ), 
    .F0(\usb_reset_ctrl_inst/urst_delay_s[3] ), 
    .Q0(\usb_reset_ctrl_inst/urst_delay[3] ), 
    .F1(\usb_reset_ctrl_inst/urst_delay_s[4] ), 
    .Q1(\usb_reset_ctrl_inst/urst_delay[4] ), 
    .FCO(\usb_reset_ctrl_inst/urst_delay_cry[4] ));
  usb_reset_ctrl_inst_SLICE_30 \usb_reset_ctrl_inst/SLICE_30 ( 
    .B1(\usb_reset_ctrl_inst/N_806_i ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[2] ), 
    .B0(\usb_reset_ctrl_inst/N_806_i ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[1] ), 
    .DI1(\usb_reset_ctrl_inst/urst_delay_s[2] ), 
    .DI0(\usb_reset_ctrl_inst/urst_delay_s[1] ), 
    .CE(\usb_reset_ctrl_inst/urst_delaye ), .CLK(clock_c), 
    .FCI(\usb_reset_ctrl_inst/urst_delay_cry[0] ), 
    .F0(\usb_reset_ctrl_inst/urst_delay_s[1] ), 
    .Q0(\usb_reset_ctrl_inst/urst_delay[1] ), 
    .F1(\usb_reset_ctrl_inst/urst_delay_s[2] ), 
    .Q1(\usb_reset_ctrl_inst/urst_delay[2] ), 
    .FCO(\usb_reset_ctrl_inst/urst_delay_cry[2] ));
  usb_reset_ctrl_inst_SLICE_31 \usb_reset_ctrl_inst/SLICE_31 ( 
    .B1(\usb_reset_ctrl_inst/N_806_i ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[0] ), 
    .B0(\usb_reset_ctrl_inst/N_806_i ), 
    .DI1(\usb_reset_ctrl_inst/urst_delay_s[0] ), 
    .CE(\usb_reset_ctrl_inst/urst_delaye ), .CLK(clock_c), 
    .F1(\usb_reset_ctrl_inst/urst_delay_s[0] ), 
    .Q1(\usb_reset_ctrl_inst/urst_delay[0] ), 
    .FCO(\usb_reset_ctrl_inst/urst_delay_cry[0] ));
  server_power_control_switch_reset_control_SLICE_32 
    \server_power_control/switch_reset_control/SLICE_32 ( 
    .B0(\server_power_control/switch_reset_control/switch_rst_cnt[7] ), 
    .A0(\server_power_control/switch_reset_control/N_32_i ), 
    .DI0(\server_power_control/switch_reset_control/switch_rst_cnt_s[7] ), 
    .CE(\server_power_control/switch_reset_control/switch_rst_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/switch_reset_control/switch_rst_cnt_cry[6] ), 
    .F0(\server_power_control/switch_reset_control/switch_rst_cnt_s[7] ), 
    .Q0(\server_power_control/switch_reset_control/switch_rst_cnt[7] ));
  server_power_control_switch_reset_control_SLICE_33 
    \server_power_control/switch_reset_control/SLICE_33 ( 
    .B1(\server_power_control/switch_reset_control/N_32_i ), 
    .A1(\server_power_control/switch_reset_control/switch_rst_cnt[6] ), 
    .B0(\server_power_control/switch_reset_control/N_32_i ), 
    .A0(\server_power_control/switch_reset_control/switch_rst_cnt[5] ), 
    .DI1(\server_power_control/switch_reset_control/switch_rst_cnt_s[6] ), 
    .DI0(\server_power_control/switch_reset_control/switch_rst_cnt_s[5] ), 
    .CE(\server_power_control/switch_reset_control/switch_rst_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/switch_reset_control/switch_rst_cnt_cry[4] ), 
    .F0(\server_power_control/switch_reset_control/switch_rst_cnt_s[5] ), 
    .Q0(\server_power_control/switch_reset_control/switch_rst_cnt[5] ), 
    .F1(\server_power_control/switch_reset_control/switch_rst_cnt_s[6] ), 
    .Q1(\server_power_control/switch_reset_control/switch_rst_cnt[6] ), 
    .FCO(\server_power_control/switch_reset_control/switch_rst_cnt_cry[6] ));
  server_power_control_switch_reset_control_SLICE_34 
    \server_power_control/switch_reset_control/SLICE_34 ( 
    .B1(\server_power_control/switch_reset_control/switch_rst_cnt[4] ), 
    .A1(\server_power_control/switch_reset_control/N_32_i ), 
    .B0(\server_power_control/switch_reset_control/switch_rst_cnt[3] ), 
    .A0(\server_power_control/switch_reset_control/N_32_i ), 
    .DI1(\server_power_control/switch_reset_control/switch_rst_cnt_s[4] ), 
    .DI0(\server_power_control/switch_reset_control/switch_rst_cnt_s[3] ), 
    .CE(\server_power_control/switch_reset_control/switch_rst_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/switch_reset_control/switch_rst_cnt_cry[2] ), 
    .F0(\server_power_control/switch_reset_control/switch_rst_cnt_s[3] ), 
    .Q0(\server_power_control/switch_reset_control/switch_rst_cnt[3] ), 
    .F1(\server_power_control/switch_reset_control/switch_rst_cnt_s[4] ), 
    .Q1(\server_power_control/switch_reset_control/switch_rst_cnt[4] ), 
    .FCO(\server_power_control/switch_reset_control/switch_rst_cnt_cry[4] ));
  server_power_control_switch_reset_control_SLICE_35 
    \server_power_control/switch_reset_control/SLICE_35 ( 
    .B1(\server_power_control/switch_reset_control/N_32_i ), 
    .A1(\server_power_control/switch_reset_control/switch_rst_cnt[2] ), 
    .B0(\server_power_control/switch_reset_control/N_32_i ), 
    .A0(\server_power_control/switch_reset_control/switch_rst_cnt[1] ), 
    .DI1(\server_power_control/switch_reset_control/switch_rst_cnt_s[2] ), 
    .DI0(\server_power_control/switch_reset_control/switch_rst_cnt_s[1] ), 
    .CE(\server_power_control/switch_reset_control/switch_rst_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/switch_reset_control/switch_rst_cnt_cry[0] ), 
    .F0(\server_power_control/switch_reset_control/switch_rst_cnt_s[1] ), 
    .Q0(\server_power_control/switch_reset_control/switch_rst_cnt[1] ), 
    .F1(\server_power_control/switch_reset_control/switch_rst_cnt_s[2] ), 
    .Q1(\server_power_control/switch_reset_control/switch_rst_cnt[2] ), 
    .FCO(\server_power_control/switch_reset_control/switch_rst_cnt_cry[2] ));
  server_power_control_switch_reset_control_SLICE_36 
    \server_power_control/switch_reset_control/SLICE_36 ( 
    .B1(\server_power_control/switch_reset_control/switch_rst_cnt[0] ), 
    .A1(\server_power_control/switch_reset_control/N_32_i ), 
    .A0(\server_power_control/switch_reset_control/N_32_i ), 
    .DI1(\server_power_control/switch_reset_control/switch_rst_cnt_s[0] ), 
    .CE(\server_power_control/switch_reset_control/switch_rst_cnte ), 
    .CLK(clock_c), 
    .F1(\server_power_control/switch_reset_control/switch_rst_cnt_s[0] ), 
    .Q1(\server_power_control/switch_reset_control/switch_rst_cnt[0] ), 
    .FCO(\server_power_control/switch_reset_control/switch_rst_cnt_cry[0] ));
  server_power_control_switch_reset_control_SLICE_37 
    \server_power_control/switch_reset_control/SLICE_37 ( 
    .B1(\server_power_control/switch_reset_control/switch_0v8_cnt[8] ), 
    .A1(\server_power_control/switch_reset_control/N_461 ), 
    .B0(\server_power_control/switch_reset_control/switch_0v8_cnt[7] ), 
    .A0(\server_power_control/switch_reset_control/N_461 ), 
    .DI1(\server_power_control/switch_reset_control/switch_0v8_cnt_s[8] ), 
    .DI0(\server_power_control/switch_reset_control/switch_0v8_cnt_s[7] ), 
    .CE(\server_power_control/switch_reset_control/N_434_i ), .CLK(clock_c), 
    .FCI(\server_power_control/switch_reset_control/switch_0v8_cnt_cry[6] ), 
    .F0(\server_power_control/switch_reset_control/switch_0v8_cnt_s[7] ), 
    .Q0(\server_power_control/switch_reset_control/switch_0v8_cnt[7] ), 
    .F1(\server_power_control/switch_reset_control/switch_0v8_cnt_s[8] ), 
    .Q1(\server_power_control/switch_reset_control/switch_0v8_cnt[8] ));
  server_power_control_switch_reset_control_SLICE_38 
    \server_power_control/switch_reset_control/SLICE_38 ( 
    .B1(\server_power_control/switch_reset_control/switch_0v8_cnt[6] ), 
    .A1(\server_power_control/switch_reset_control/N_461 ), 
    .B0(\server_power_control/switch_reset_control/switch_0v8_cnt[5] ), 
    .A0(\server_power_control/switch_reset_control/N_461 ), 
    .DI1(\server_power_control/switch_reset_control/switch_0v8_cnt_s[6] ), 
    .DI0(\server_power_control/switch_reset_control/switch_0v8_cnt_s[5] ), 
    .CE(\server_power_control/switch_reset_control/N_434_i ), .CLK(clock_c), 
    .FCI(\server_power_control/switch_reset_control/switch_0v8_cnt_cry[4] ), 
    .F0(\server_power_control/switch_reset_control/switch_0v8_cnt_s[5] ), 
    .Q0(\server_power_control/switch_reset_control/switch_0v8_cnt[5] ), 
    .F1(\server_power_control/switch_reset_control/switch_0v8_cnt_s[6] ), 
    .Q1(\server_power_control/switch_reset_control/switch_0v8_cnt[6] ), 
    .FCO(\server_power_control/switch_reset_control/switch_0v8_cnt_cry[6] ));
  server_power_control_switch_reset_control_SLICE_39 
    \server_power_control/switch_reset_control/SLICE_39 ( 
    .B1(\server_power_control/switch_reset_control/switch_0v8_cnt[4] ), 
    .A1(\server_power_control/switch_reset_control/N_461 ), 
    .B0(\server_power_control/switch_reset_control/switch_0v8_cnt[3] ), 
    .A0(\server_power_control/switch_reset_control/N_461 ), 
    .DI1(\server_power_control/switch_reset_control/switch_0v8_cnt_s[4] ), 
    .DI0(\server_power_control/switch_reset_control/switch_0v8_cnt_s[3] ), 
    .CE(\server_power_control/switch_reset_control/N_434_i ), .CLK(clock_c), 
    .FCI(\server_power_control/switch_reset_control/switch_0v8_cnt_cry[2] ), 
    .F0(\server_power_control/switch_reset_control/switch_0v8_cnt_s[3] ), 
    .Q0(\server_power_control/switch_reset_control/switch_0v8_cnt[3] ), 
    .F1(\server_power_control/switch_reset_control/switch_0v8_cnt_s[4] ), 
    .Q1(\server_power_control/switch_reset_control/switch_0v8_cnt[4] ), 
    .FCO(\server_power_control/switch_reset_control/switch_0v8_cnt_cry[4] ));
  server_power_control_switch_reset_control_SLICE_40 
    \server_power_control/switch_reset_control/SLICE_40 ( 
    .B1(\server_power_control/switch_reset_control/switch_0v8_cnt[2] ), 
    .A1(\server_power_control/switch_reset_control/N_461 ), 
    .B0(\server_power_control/switch_reset_control/switch_0v8_cnt[1] ), 
    .A0(\server_power_control/switch_reset_control/N_461 ), 
    .DI1(\server_power_control/switch_reset_control/switch_0v8_cnt_s[2] ), 
    .DI0(\server_power_control/switch_reset_control/switch_0v8_cnt_s[1] ), 
    .CE(\server_power_control/switch_reset_control/N_434_i ), .CLK(clock_c), 
    .FCI(\server_power_control/switch_reset_control/switch_0v8_cnt_cry[0] ), 
    .F0(\server_power_control/switch_reset_control/switch_0v8_cnt_s[1] ), 
    .Q0(\server_power_control/switch_reset_control/switch_0v8_cnt[1] ), 
    .F1(\server_power_control/switch_reset_control/switch_0v8_cnt_s[2] ), 
    .Q1(\server_power_control/switch_reset_control/switch_0v8_cnt[2] ), 
    .FCO(\server_power_control/switch_reset_control/switch_0v8_cnt_cry[2] ));
  server_power_control_switch_reset_control_SLICE_41 
    \server_power_control/switch_reset_control/SLICE_41 ( 
    .B1(\server_power_control/switch_reset_control/switch_0v8_cnt[0] ), 
    .A1(\server_power_control/switch_reset_control/N_461 ), 
    .A0(\server_power_control/switch_reset_control/N_461 ), 
    .DI1(\server_power_control/switch_reset_control/switch_0v8_cnt_s[0] ), 
    .CE(\server_power_control/switch_reset_control/N_434_i ), .CLK(clock_c), 
    .F1(\server_power_control/switch_reset_control/switch_0v8_cnt_s[0] ), 
    .Q1(\server_power_control/switch_reset_control/switch_0v8_cnt[0] ), 
    .FCO(\server_power_control/switch_reset_control/switch_0v8_cnt_cry[0] ));
  server_power_control_cpu_pwr_control_SLICE_42 
    \server_power_control/cpu_pwr_control/SLICE_42 ( 
    .B1(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A1(\server_power_control/cpu_pwr_control/seq_cnt[10] ), 
    .B0(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A0(\server_power_control/cpu_pwr_control/seq_cnt[9] ), 
    .DI1(\server_power_control/cpu_pwr_control/seq_cnt_s[10] ), 
    .DI0(\server_power_control/cpu_pwr_control/seq_cnt_s[9] ), 
    .CE(\server_power_control/cpu_pwr_control/seq_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/cpu_pwr_control/seq_cnt_cry[8] ), 
    .F0(\server_power_control/cpu_pwr_control/seq_cnt_s[9] ), 
    .Q0(\server_power_control/cpu_pwr_control/seq_cnt[9] ), 
    .F1(\server_power_control/cpu_pwr_control/seq_cnt_s[10] ), 
    .Q1(\server_power_control/cpu_pwr_control/seq_cnt[10] ));
  server_power_control_cpu_pwr_control_SLICE_43 
    \server_power_control/cpu_pwr_control/SLICE_43 ( 
    .B1(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A1(\server_power_control/cpu_pwr_control/seq_cnt[8] ), 
    .B0(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A0(\server_power_control/cpu_pwr_control/seq_cnt[7] ), 
    .DI1(\server_power_control/cpu_pwr_control/seq_cnt_s[8] ), 
    .DI0(\server_power_control/cpu_pwr_control/seq_cnt_s[7] ), 
    .CE(\server_power_control/cpu_pwr_control/seq_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/cpu_pwr_control/seq_cnt_cry[6] ), 
    .F0(\server_power_control/cpu_pwr_control/seq_cnt_s[7] ), 
    .Q0(\server_power_control/cpu_pwr_control/seq_cnt[7] ), 
    .F1(\server_power_control/cpu_pwr_control/seq_cnt_s[8] ), 
    .Q1(\server_power_control/cpu_pwr_control/seq_cnt[8] ), 
    .FCO(\server_power_control/cpu_pwr_control/seq_cnt_cry[8] ));
  server_power_control_cpu_pwr_control_SLICE_44 
    \server_power_control/cpu_pwr_control/SLICE_44 ( 
    .B1(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A1(\server_power_control/cpu_pwr_control/seq_cnt[6] ), 
    .B0(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A0(\server_power_control/cpu_pwr_control/seq_cnt[5] ), 
    .DI1(\server_power_control/cpu_pwr_control/seq_cnt_s[6] ), 
    .DI0(\server_power_control/cpu_pwr_control/seq_cnt_s[5] ), 
    .CE(\server_power_control/cpu_pwr_control/seq_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/cpu_pwr_control/seq_cnt_cry[4] ), 
    .F0(\server_power_control/cpu_pwr_control/seq_cnt_s[5] ), 
    .Q0(\server_power_control/cpu_pwr_control/seq_cnt[5] ), 
    .F1(\server_power_control/cpu_pwr_control/seq_cnt_s[6] ), 
    .Q1(\server_power_control/cpu_pwr_control/seq_cnt[6] ), 
    .FCO(\server_power_control/cpu_pwr_control/seq_cnt_cry[6] ));
  server_power_control_cpu_pwr_control_SLICE_45 
    \server_power_control/cpu_pwr_control/SLICE_45 ( 
    .B1(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A1(\server_power_control/cpu_pwr_control/seq_cnt[4] ), 
    .B0(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A0(\server_power_control/cpu_pwr_control/seq_cnt[3] ), 
    .DI1(\server_power_control/cpu_pwr_control/seq_cnt_s[4] ), 
    .DI0(\server_power_control/cpu_pwr_control/seq_cnt_s[3] ), 
    .CE(\server_power_control/cpu_pwr_control/seq_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/cpu_pwr_control/seq_cnt_cry[2] ), 
    .F0(\server_power_control/cpu_pwr_control/seq_cnt_s[3] ), 
    .Q0(\server_power_control/cpu_pwr_control/seq_cnt[3] ), 
    .F1(\server_power_control/cpu_pwr_control/seq_cnt_s[4] ), 
    .Q1(\server_power_control/cpu_pwr_control/seq_cnt[4] ), 
    .FCO(\server_power_control/cpu_pwr_control/seq_cnt_cry[4] ));
  server_power_control_cpu_pwr_control_SLICE_46 
    \server_power_control/cpu_pwr_control/SLICE_46 ( 
    .B1(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A1(\server_power_control/cpu_pwr_control/seq_cnt[2] ), 
    .B0(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A0(\server_power_control/cpu_pwr_control/seq_cnt[1] ), 
    .DI1(\server_power_control/cpu_pwr_control/seq_cnt_s[2] ), 
    .DI0(\server_power_control/cpu_pwr_control/seq_cnt_s[1] ), 
    .CE(\server_power_control/cpu_pwr_control/seq_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/cpu_pwr_control/seq_cnt_cry[0] ), 
    .F0(\server_power_control/cpu_pwr_control/seq_cnt_s[1] ), 
    .Q0(\server_power_control/cpu_pwr_control/seq_cnt[1] ), 
    .F1(\server_power_control/cpu_pwr_control/seq_cnt_s[2] ), 
    .Q1(\server_power_control/cpu_pwr_control/seq_cnt[2] ), 
    .FCO(\server_power_control/cpu_pwr_control/seq_cnt_cry[2] ));
  server_power_control_cpu_pwr_control_SLICE_47 
    \server_power_control/cpu_pwr_control/SLICE_47 ( 
    .B1(\server_power_control/cpu_pwr_control/N_601_i ), 
    .A1(\server_power_control/cpu_pwr_control/seq_cnt[0] ), 
    .B0(\server_power_control/cpu_pwr_control/N_601_i ), 
    .DI1(\server_power_control/cpu_pwr_control/seq_cnt_s[0] ), 
    .CE(\server_power_control/cpu_pwr_control/seq_cnte ), .CLK(clock_c), 
    .F1(\server_power_control/cpu_pwr_control/seq_cnt_s[0] ), 
    .Q1(\server_power_control/cpu_pwr_control/seq_cnt[0] ), 
    .FCO(\server_power_control/cpu_pwr_control/seq_cnt_cry[0] ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_48 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_48 ( 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[7] ), 
    .DI0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[7] )
    , 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_timee ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[6] )
    , 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[7] )
    , 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[7] ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_49 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_49 ( 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[6] ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[5] ), 
    .DI1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[6] )
    , 
    .DI0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[5] )
    , 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_timee ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[4] )
    , 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[5] )
    , 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[5] ), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[6] )
    , 
    .Q1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[6] ), 
    .FCO(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[6] )
    );
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_50 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_50 ( 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[4] ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[3] ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time ), 
    .DI1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[4] )
    , 
    .DI0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[3] )
    , 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_timee ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[2] )
    , 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[3] )
    , 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[3] ), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[4] )
    , 
    .Q1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[4] ), 
    .FCO(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[4] )
    );
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_51 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_51 ( 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[2] ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[1] ), 
    .DI1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[2] )
    , 
    .DI0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[1] )
    , 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_timee ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[0] )
    , 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[1] )
    , 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[1] ), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[2] )
    , 
    .Q1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[2] ), 
    .FCO(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[2] )
    );
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_52 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_52 ( 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[0] ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time ), 
    .DI1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[0] )
    , 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_timee ), 
    .CLK(clock_c), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s[0] )
    , 
    .Q1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[0] ), 
    .FCO(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry[0] )
    );
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_53 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_53 ( 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[7] ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt ), 
    .DI0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[7] ), 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[6] ), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[7] ), 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[7] ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_54 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_54 ( 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[6] ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[5] ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt ), 
    .DI1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[6] ), 
    .DI0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[5] ), 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[4] ), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[5] ), 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[5] ), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[6] ), 
    .Q1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[6] ), 
    .FCO(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[6] ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_55 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_55 ( 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[4] ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[3] ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt ), 
    .DI1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[4] ), 
    .DI0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[3] ), 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[2] ), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[3] ), 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[3] ), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[4] ), 
    .Q1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[4] ), 
    .FCO(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[4] ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_56 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_56 ( 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[2] ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[1] ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt ), 
    .DI1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[2] ), 
    .DI0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[1] ), 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[0] ), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[1] ), 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[1] ), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[2] ), 
    .Q1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[2] ), 
    .FCO(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[2] ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_57 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_57 ( 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[0] ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt ), 
    .DI1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[0] ), 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnte ), 
    .CLK(clock_c), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s[0] ), 
    .Q1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[0] ), 
    .FCO(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry[0] ));
  server_power_control_power_signal_detect_inst_SLICE_58 
    \server_power_control/power_signal_detect_inst/SLICE_58 ( 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[15] ), 
    .DI0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[15] ), 
    .CE(\server_power_control/power_signal_detect_inst/low_time_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[14] ), 
    .F0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[15] ), 
    .Q0(\server_power_control/power_signal_detect_inst/low_time_cnt[15] ));
  server_power_control_power_signal_detect_inst_SLICE_59 
    \server_power_control/power_signal_detect_inst/SLICE_59 ( 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[14] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[13] ), 
    .DI1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[14] ), 
    .DI0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[13] ), 
    .CE(\server_power_control/power_signal_detect_inst/low_time_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[12] ), 
    .F0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[13] ), 
    .Q0(\server_power_control/power_signal_detect_inst/low_time_cnt[13] ), 
    .F1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[14] ), 
    .Q1(\server_power_control/power_signal_detect_inst/low_time_cnt[14] ), 
    .FCO(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[14] ));
  server_power_control_power_signal_detect_inst_SLICE_60 
    \server_power_control/power_signal_detect_inst/SLICE_60 ( 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[12] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[11] ), 
    .DI1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[12] ), 
    .DI0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[11] ), 
    .CE(\server_power_control/power_signal_detect_inst/low_time_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[10] ), 
    .F0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[11] ), 
    .Q0(\server_power_control/power_signal_detect_inst/low_time_cnt[11] ), 
    .F1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[12] ), 
    .Q1(\server_power_control/power_signal_detect_inst/low_time_cnt[12] ), 
    .FCO(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[12] ));
  server_power_control_power_signal_detect_inst_SLICE_61 
    \server_power_control/power_signal_detect_inst/SLICE_61 ( 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[10] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[9] ), 
    .DI1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[10] ), 
    .DI0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[9] ), 
    .CE(\server_power_control/power_signal_detect_inst/low_time_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[8] ), 
    .F0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[9] ), 
    .Q0(\server_power_control/power_signal_detect_inst/low_time_cnt[9] ), 
    .F1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[10] ), 
    .Q1(\server_power_control/power_signal_detect_inst/low_time_cnt[10] ), 
    .FCO(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[10] ));
  server_power_control_power_signal_detect_inst_SLICE_62 
    \server_power_control/power_signal_detect_inst/SLICE_62 ( 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[8] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[7] ), 
    .DI1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[8] ), 
    .DI0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[7] ), 
    .CE(\server_power_control/power_signal_detect_inst/low_time_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[6] ), 
    .F0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[7] ), 
    .Q0(\server_power_control/power_signal_detect_inst/low_time_cnt[7] ), 
    .F1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[8] ), 
    .Q1(\server_power_control/power_signal_detect_inst/low_time_cnt[8] ), 
    .FCO(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[8] ));
  server_power_control_power_signal_detect_inst_SLICE_63 
    \server_power_control/power_signal_detect_inst/SLICE_63 ( 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[6] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[5] ), 
    .DI1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[6] ), 
    .DI0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[5] ), 
    .CE(\server_power_control/power_signal_detect_inst/low_time_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[4] ), 
    .F0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[5] ), 
    .Q0(\server_power_control/power_signal_detect_inst/low_time_cnt[5] ), 
    .F1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[6] ), 
    .Q1(\server_power_control/power_signal_detect_inst/low_time_cnt[6] ), 
    .FCO(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[6] ));
  server_power_control_power_signal_detect_inst_SLICE_64 
    \server_power_control/power_signal_detect_inst/SLICE_64 ( 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[4] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[3] ), 
    .DI1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[4] ), 
    .DI0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[3] ), 
    .CE(\server_power_control/power_signal_detect_inst/low_time_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[2] ), 
    .F0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[3] ), 
    .Q0(\server_power_control/power_signal_detect_inst/low_time_cnt[3] ), 
    .F1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[4] ), 
    .Q1(\server_power_control/power_signal_detect_inst/low_time_cnt[4] ), 
    .FCO(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[4] ));
  server_power_control_power_signal_detect_inst_SLICE_65 
    \server_power_control/power_signal_detect_inst/SLICE_65 ( 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[2] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[1] ), 
    .DI1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[2] ), 
    .DI0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[1] ), 
    .CE(\server_power_control/power_signal_detect_inst/low_time_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[0] ), 
    .F0(\server_power_control/power_signal_detect_inst/low_time_cnt_s[1] ), 
    .Q0(\server_power_control/power_signal_detect_inst/low_time_cnt[1] ), 
    .F1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[2] ), 
    .Q1(\server_power_control/power_signal_detect_inst/low_time_cnt[2] ), 
    .FCO(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[2] ));
  server_power_control_power_signal_detect_inst_SLICE_66 
    \server_power_control/power_signal_detect_inst/SLICE_66 ( 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .DI1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[0] ), 
    .CE(\server_power_control/power_signal_detect_inst/low_time_cnte ), 
    .CLK(clock_c), 
    .F1(\server_power_control/power_signal_detect_inst/low_time_cnt_s[0] ), 
    .Q1(\server_power_control/power_signal_detect_inst/low_time_cnt[0] ), 
    .FCO(\server_power_control/power_signal_detect_inst/low_time_cnt_cry[0] ));
  server_power_control_power_signal_detect_inst_SLICE_67 
    \server_power_control/power_signal_detect_inst/SLICE_67 ( 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[15] ), 
    .DI0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[15] ), 
    .CE(\server_power_control/power_signal_detect_inst/debounce_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[14] ), 
    .F0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[15] ), 
    .Q0(\server_power_control/power_signal_detect_inst/debounce_cnt[15] ));
  server_power_control_power_signal_detect_inst_SLICE_68 
    \server_power_control/power_signal_detect_inst/SLICE_68 ( 
    .B1(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[14] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[13] ), 
    .DI1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[14] ), 
    .DI0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[13] ), 
    .CE(\server_power_control/power_signal_detect_inst/debounce_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[12] ), 
    .F0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[13] ), 
    .Q0(\server_power_control/power_signal_detect_inst/debounce_cnt[13] ), 
    .F1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[14] ), 
    .Q1(\server_power_control/power_signal_detect_inst/debounce_cnt[14] ), 
    .FCO(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[14] ));
  server_power_control_power_signal_detect_inst_SLICE_69 
    \server_power_control/power_signal_detect_inst/SLICE_69 ( 
    .B1(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[12] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[11] ), 
    .DI1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[12] ), 
    .DI0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[11] ), 
    .CE(\server_power_control/power_signal_detect_inst/debounce_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[10] ), 
    .F0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[11] ), 
    .Q0(\server_power_control/power_signal_detect_inst/debounce_cnt[11] ), 
    .F1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[12] ), 
    .Q1(\server_power_control/power_signal_detect_inst/debounce_cnt[12] ), 
    .FCO(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[12] ));
  server_power_control_power_signal_detect_inst_SLICE_70 
    \server_power_control/power_signal_detect_inst/SLICE_70 ( 
    .B1(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[10] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[9] ), 
    .DI1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[10] ), 
    .DI0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[9] ), 
    .CE(\server_power_control/power_signal_detect_inst/debounce_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[8] ), 
    .F0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[9] ), 
    .Q0(\server_power_control/power_signal_detect_inst/debounce_cnt[9] ), 
    .F1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[10] ), 
    .Q1(\server_power_control/power_signal_detect_inst/debounce_cnt[10] ), 
    .FCO(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[10] ));
  server_power_control_power_signal_detect_inst_SLICE_71 
    \server_power_control/power_signal_detect_inst/SLICE_71 ( 
    .B1(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[8] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[7] ), 
    .DI1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[8] ), 
    .DI0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[7] ), 
    .CE(\server_power_control/power_signal_detect_inst/debounce_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[6] ), 
    .F0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[7] ), 
    .Q0(\server_power_control/power_signal_detect_inst/debounce_cnt[7] ), 
    .F1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[8] ), 
    .Q1(\server_power_control/power_signal_detect_inst/debounce_cnt[8] ), 
    .FCO(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[8] ));
  server_power_control_power_signal_detect_inst_SLICE_72 
    \server_power_control/power_signal_detect_inst/SLICE_72 ( 
    .B1(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[6] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[5] ), 
    .DI1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[6] ), 
    .DI0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[5] ), 
    .CE(\server_power_control/power_signal_detect_inst/debounce_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[4] ), 
    .F0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[5] ), 
    .Q0(\server_power_control/power_signal_detect_inst/debounce_cnt[5] ), 
    .F1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[6] ), 
    .Q1(\server_power_control/power_signal_detect_inst/debounce_cnt[6] ), 
    .FCO(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[6] ));
  server_power_control_power_signal_detect_inst_SLICE_73 
    \server_power_control/power_signal_detect_inst/SLICE_73 ( 
    .B1(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[4] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[3] ), 
    .DI1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[4] ), 
    .DI0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[3] ), 
    .CE(\server_power_control/power_signal_detect_inst/debounce_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[2] ), 
    .F0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[3] ), 
    .Q0(\server_power_control/power_signal_detect_inst/debounce_cnt[3] ), 
    .F1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[4] ), 
    .Q1(\server_power_control/power_signal_detect_inst/debounce_cnt[4] ), 
    .FCO(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[4] ));
  server_power_control_power_signal_detect_inst_SLICE_74 
    \server_power_control/power_signal_detect_inst/SLICE_74 ( 
    .B1(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[2] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[1] ), 
    .DI1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[2] ), 
    .DI0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[1] ), 
    .CE(\server_power_control/power_signal_detect_inst/debounce_cnte ), 
    .CLK(clock_c), 
    .FCI(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[0] ), 
    .F0(\server_power_control/power_signal_detect_inst/debounce_cnt_s[1] ), 
    .Q0(\server_power_control/power_signal_detect_inst/debounce_cnt[1] ), 
    .F1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[2] ), 
    .Q1(\server_power_control/power_signal_detect_inst/debounce_cnt[2] ), 
    .FCO(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[2] ));
  server_power_control_power_signal_detect_inst_SLICE_75 
    \server_power_control/power_signal_detect_inst/SLICE_75 ( 
    .B1(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .DI1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[0] ), 
    .CE(\server_power_control/power_signal_detect_inst/debounce_cnte ), 
    .CLK(clock_c), 
    .F1(\server_power_control/power_signal_detect_inst/debounce_cnt_s[0] ), 
    .Q1(\server_power_control/power_signal_detect_inst/debounce_cnt[0] ), 
    .FCO(\server_power_control/power_signal_detect_inst/debounce_cnt_cry[0] ));
  server_power_control_SLICE_76 \server_power_control/SLICE_76 ( 
    .A0(\server_power_control/cpu_dly[7] ), 
    .DI0(\server_power_control/un1_cpu_dly_1[7] ), .CLK(clock_c), 
    .FCI(\server_power_control/un1_cpu_dly_1_cry_6 ), 
    .F0(\server_power_control/un1_cpu_dly_1[7] ), 
    .Q0(\server_power_control/cpu_dly[7] ));
  server_power_control_SLICE_77 \server_power_control/SLICE_77 ( 
    .A1(\server_power_control/cpu_dly[6] ), 
    .A0(\server_power_control/cpu_dly[5] ), 
    .DI1(\server_power_control/un1_cpu_dly_1[6] ), .CLK(clock_c), 
    .FCI(\server_power_control/un1_cpu_dly_1_cry_4 ), 
    .F0(\server_power_control/un1_cpu_dly_1_cry_5_0_S0 ), 
    .F1(\server_power_control/un1_cpu_dly_1[6] ), 
    .Q1(\server_power_control/cpu_dly[6] ), 
    .FCO(\server_power_control/un1_cpu_dly_1_cry_6 ));
  server_power_control_SLICE_78 \server_power_control/SLICE_78 ( 
    .B1(\server_power_control/cpu_dly[4] ), 
    .A0(\server_power_control/cpu_dly[3] ), 
    .DI0(\server_power_control/un1_cpu_dly_1[3] ), .CLK(clock_c), 
    .FCI(\server_power_control/un1_cpu_dly_1_cry_2 ), 
    .F0(\server_power_control/un1_cpu_dly_1[3] ), 
    .Q0(\server_power_control/cpu_dly[3] ), 
    .F1(\server_power_control/un1_cpu_dly_1_cry_3_0_S1 ), 
    .FCO(\server_power_control/un1_cpu_dly_1_cry_4 ));
  server_power_control_SLICE_79 \server_power_control/SLICE_79 ( 
    .A1(\server_power_control/cpu_dly[2] ), 
    .A0(\server_power_control/cpu_dly[1] ), 
    .DI1(\server_power_control/un1_cpu_dly_1[2] ), .CLK(clock_c), 
    .FCI(\server_power_control/un1_cpu_dly_1_cry_0 ), 
    .F0(\server_power_control/un1_cpu_dly_1_cry_1_0_S0 ), 
    .F1(\server_power_control/un1_cpu_dly_1[2] ), 
    .Q1(\server_power_control/cpu_dly[2] ), 
    .FCO(\server_power_control/un1_cpu_dly_1_cry_2 ));
  server_power_control_SLICE_80 \server_power_control/SLICE_80 ( 
    .A1(\server_power_control/cpu_dly[0] ), 
    .B0(\server_power_control/wait_time_out_0_sqmuxa_1 ), 
    .F1(\server_power_control/un1_cpu_dly_1_cry_0_0_S1 ), 
    .FCO(\server_power_control/un1_cpu_dly_1_cry_0 ));
  server_power_control_SLICE_81 \server_power_control/SLICE_81 ( 
    .B0(\server_power_control/N_125 ), 
    .A0(\server_power_control/reboot_cnt[15] ), 
    .DI0(\server_power_control/reboot_cnt_s[15] ), 
    .CE(\server_power_control/reboot_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/reboot_cnt_cry[14] ), 
    .F0(\server_power_control/reboot_cnt_s[15] ), 
    .Q0(\server_power_control/reboot_cnt[15] ));
  server_power_control_SLICE_82 \server_power_control/SLICE_82 ( 
    .B1(\server_power_control/N_125 ), 
    .A1(\server_power_control/reboot_cnt[14] ), 
    .B0(\server_power_control/N_125 ), 
    .A0(\server_power_control/reboot_cnt[13] ), 
    .DI1(\server_power_control/reboot_cnt_s[14] ), 
    .DI0(\server_power_control/reboot_cnt_s[13] ), 
    .CE(\server_power_control/reboot_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/reboot_cnt_cry[12] ), 
    .F0(\server_power_control/reboot_cnt_s[13] ), 
    .Q0(\server_power_control/reboot_cnt[13] ), 
    .F1(\server_power_control/reboot_cnt_s[14] ), 
    .Q1(\server_power_control/reboot_cnt[14] ), 
    .FCO(\server_power_control/reboot_cnt_cry[14] ));
  server_power_control_SLICE_83 \server_power_control/SLICE_83 ( 
    .B1(\server_power_control/N_125 ), 
    .A1(\server_power_control/reboot_cnt[12] ), 
    .B0(\server_power_control/N_125 ), 
    .A0(\server_power_control/reboot_cnt[11] ), 
    .DI1(\server_power_control/reboot_cnt_s[12] ), 
    .DI0(\server_power_control/reboot_cnt_s[11] ), 
    .CE(\server_power_control/reboot_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/reboot_cnt_cry[10] ), 
    .F0(\server_power_control/reboot_cnt_s[11] ), 
    .Q0(\server_power_control/reboot_cnt[11] ), 
    .F1(\server_power_control/reboot_cnt_s[12] ), 
    .Q1(\server_power_control/reboot_cnt[12] ), 
    .FCO(\server_power_control/reboot_cnt_cry[12] ));
  server_power_control_SLICE_84 \server_power_control/SLICE_84 ( 
    .B1(\server_power_control/N_125 ), 
    .A1(\server_power_control/reboot_cnt[10] ), 
    .B0(\server_power_control/N_125 ), 
    .A0(\server_power_control/reboot_cnt[9] ), 
    .DI1(\server_power_control/reboot_cnt_s[10] ), 
    .DI0(\server_power_control/reboot_cnt_s[9] ), 
    .CE(\server_power_control/reboot_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/reboot_cnt_cry[8] ), 
    .F0(\server_power_control/reboot_cnt_s[9] ), 
    .Q0(\server_power_control/reboot_cnt[9] ), 
    .F1(\server_power_control/reboot_cnt_s[10] ), 
    .Q1(\server_power_control/reboot_cnt[10] ), 
    .FCO(\server_power_control/reboot_cnt_cry[10] ));
  server_power_control_SLICE_85 \server_power_control/SLICE_85 ( 
    .B1(\server_power_control/N_125 ), 
    .A1(\server_power_control/reboot_cnt[8] ), 
    .B0(\server_power_control/N_125 ), 
    .A0(\server_power_control/reboot_cnt[7] ), 
    .DI1(\server_power_control/reboot_cnt_s[8] ), 
    .DI0(\server_power_control/reboot_cnt_s[7] ), 
    .CE(\server_power_control/reboot_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/reboot_cnt_cry[6] ), 
    .F0(\server_power_control/reboot_cnt_s[7] ), 
    .Q0(\server_power_control/reboot_cnt[7] ), 
    .F1(\server_power_control/reboot_cnt_s[8] ), 
    .Q1(\server_power_control/reboot_cnt[8] ), 
    .FCO(\server_power_control/reboot_cnt_cry[8] ));
  server_power_control_SLICE_86 \server_power_control/SLICE_86 ( 
    .B1(\server_power_control/N_125 ), 
    .A1(\server_power_control/reboot_cnt[6] ), 
    .B0(\server_power_control/N_125 ), 
    .A0(\server_power_control/reboot_cnt[5] ), 
    .DI1(\server_power_control/reboot_cnt_s[6] ), 
    .DI0(\server_power_control/reboot_cnt_s[5] ), 
    .CE(\server_power_control/reboot_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/reboot_cnt_cry[4] ), 
    .F0(\server_power_control/reboot_cnt_s[5] ), 
    .Q0(\server_power_control/reboot_cnt[5] ), 
    .F1(\server_power_control/reboot_cnt_s[6] ), 
    .Q1(\server_power_control/reboot_cnt[6] ), 
    .FCO(\server_power_control/reboot_cnt_cry[6] ));
  server_power_control_SLICE_87 \server_power_control/SLICE_87 ( 
    .B1(\server_power_control/N_125 ), 
    .A1(\server_power_control/reboot_cnt[4] ), 
    .B0(\server_power_control/N_125 ), 
    .A0(\server_power_control/reboot_cnt[3] ), 
    .DI1(\server_power_control/reboot_cnt_s[4] ), 
    .DI0(\server_power_control/reboot_cnt_s[3] ), 
    .CE(\server_power_control/reboot_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/reboot_cnt_cry[2] ), 
    .F0(\server_power_control/reboot_cnt_s[3] ), 
    .Q0(\server_power_control/reboot_cnt[3] ), 
    .F1(\server_power_control/reboot_cnt_s[4] ), 
    .Q1(\server_power_control/reboot_cnt[4] ), 
    .FCO(\server_power_control/reboot_cnt_cry[4] ));
  server_power_control_SLICE_88 \server_power_control/SLICE_88 ( 
    .B1(\server_power_control/N_125 ), 
    .A1(\server_power_control/reboot_cnt[2] ), 
    .B0(\server_power_control/N_125 ), 
    .A0(\server_power_control/reboot_cnt[1] ), 
    .DI1(\server_power_control/reboot_cnt_s[2] ), 
    .DI0(\server_power_control/reboot_cnt_s[1] ), 
    .CE(\server_power_control/reboot_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/reboot_cnt_cry[0] ), 
    .F0(\server_power_control/reboot_cnt_s[1] ), 
    .Q0(\server_power_control/reboot_cnt[1] ), 
    .F1(\server_power_control/reboot_cnt_s[2] ), 
    .Q1(\server_power_control/reboot_cnt[2] ), 
    .FCO(\server_power_control/reboot_cnt_cry[2] ));
  server_power_control_SLICE_89 \server_power_control/SLICE_89 ( 
    .B1(\server_power_control/N_125 ), 
    .A1(\server_power_control/reboot_cnt[0] ), 
    .B0(\server_power_control/N_125 ), 
    .DI1(\server_power_control/reboot_cnt_s[0] ), 
    .CE(\server_power_control/reboot_cnte ), .CLK(clock_c), 
    .F1(\server_power_control/reboot_cnt_s[0] ), 
    .Q1(\server_power_control/reboot_cnt[0] ), 
    .FCO(\server_power_control/reboot_cnt_cry[0] ));
  server_power_control_SLICE_90 \server_power_control/SLICE_90 ( 
    .B1(\server_power_control/efuse_dly[8] ), 
    .A1(\server_power_control/N_103_i ), 
    .B0(\server_power_control/efuse_dly[7] ), 
    .A0(\server_power_control/N_103_i ), 
    .DI1(\server_power_control/efuse_dly_s[8] ), 
    .DI0(\server_power_control/efuse_dly_s[7] ), 
    .CE(\server_power_control/efuse_dlye ), .CLK(clock_c), 
    .FCI(\server_power_control/efuse_dly_cry[6] ), 
    .F0(\server_power_control/efuse_dly_s[7] ), 
    .Q0(\server_power_control/efuse_dly[7] ), 
    .F1(\server_power_control/efuse_dly_s[8] ), 
    .Q1(\server_power_control/efuse_dly[8] ));
  server_power_control_SLICE_91 \server_power_control/SLICE_91 ( 
    .B1(\server_power_control/efuse_dly[6] ), 
    .A1(\server_power_control/N_103_i ), 
    .B0(\server_power_control/efuse_dly[5] ), 
    .A0(\server_power_control/N_103_i ), 
    .DI1(\server_power_control/efuse_dly_s[6] ), 
    .DI0(\server_power_control/efuse_dly_s[5] ), 
    .CE(\server_power_control/efuse_dlye ), .CLK(clock_c), 
    .FCI(\server_power_control/efuse_dly_cry[4] ), 
    .F0(\server_power_control/efuse_dly_s[5] ), 
    .Q0(\server_power_control/efuse_dly[5] ), 
    .F1(\server_power_control/efuse_dly_s[6] ), 
    .Q1(\server_power_control/efuse_dly[6] ), 
    .FCO(\server_power_control/efuse_dly_cry[6] ));
  server_power_control_SLICE_92 \server_power_control/SLICE_92 ( 
    .B1(\server_power_control/N_103_i ), 
    .A1(\server_power_control/efuse_dly[4] ), 
    .B0(\server_power_control/N_103_i ), 
    .A0(\server_power_control/efuse_dly[3] ), 
    .DI1(\server_power_control/efuse_dly_s[4] ), 
    .DI0(\server_power_control/efuse_dly_s[3] ), 
    .CE(\server_power_control/efuse_dlye ), .CLK(clock_c), 
    .FCI(\server_power_control/efuse_dly_cry[2] ), 
    .F0(\server_power_control/efuse_dly_s[3] ), 
    .Q0(\server_power_control/efuse_dly[3] ), 
    .F1(\server_power_control/efuse_dly_s[4] ), 
    .Q1(\server_power_control/efuse_dly[4] ), 
    .FCO(\server_power_control/efuse_dly_cry[4] ));
  server_power_control_SLICE_93 \server_power_control/SLICE_93 ( 
    .B1(\server_power_control/efuse_dly[2] ), 
    .A1(\server_power_control/N_103_i ), 
    .B0(\server_power_control/efuse_dly[1] ), 
    .A0(\server_power_control/N_103_i ), 
    .DI1(\server_power_control/efuse_dly_s[2] ), 
    .DI0(\server_power_control/efuse_dly_s[1] ), 
    .CE(\server_power_control/efuse_dlye ), .CLK(clock_c), 
    .FCI(\server_power_control/efuse_dly_cry[0] ), 
    .F0(\server_power_control/efuse_dly_s[1] ), 
    .Q0(\server_power_control/efuse_dly[1] ), 
    .F1(\server_power_control/efuse_dly_s[2] ), 
    .Q1(\server_power_control/efuse_dly[2] ), 
    .FCO(\server_power_control/efuse_dly_cry[2] ));
  server_power_control_SLICE_94 \server_power_control/SLICE_94 ( 
    .B1(\server_power_control/N_103_i ), 
    .A1(\server_power_control/efuse_dly[0] ), 
    .B0(\server_power_control/N_103_i ), 
    .DI1(\server_power_control/efuse_dly_s[0] ), 
    .CE(\server_power_control/efuse_dlye ), .CLK(clock_c), 
    .F1(\server_power_control/efuse_dly_s[0] ), 
    .Q1(\server_power_control/efuse_dly[0] ), 
    .FCO(\server_power_control/efuse_dly_cry[0] ));
  server_power_control_SLICE_95 \server_power_control/SLICE_95 ( 
    .B0(\server_power_control/wait_time_out_cnt ), 
    .A0(\server_power_control/wait_time_out_cnt[15] ), 
    .DI0(\server_power_control/wait_time_out_cnt_s[15] ), 
    .CE(\server_power_control/wait_time_out_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/wait_time_out_cnt_cry[14] ), 
    .F0(\server_power_control/wait_time_out_cnt_s[15] ), 
    .Q0(\server_power_control/wait_time_out_cnt[15] ));
  server_power_control_SLICE_96 \server_power_control/SLICE_96 ( 
    .B1(\server_power_control/wait_time_out_cnt ), 
    .A1(\server_power_control/wait_time_out_cnt[14] ), 
    .B0(\server_power_control/wait_time_out_cnt ), 
    .A0(\server_power_control/wait_time_out_cnt[13] ), 
    .DI1(\server_power_control/wait_time_out_cnt_s[14] ), 
    .DI0(\server_power_control/wait_time_out_cnt_s[13] ), 
    .CE(\server_power_control/wait_time_out_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/wait_time_out_cnt_cry[12] ), 
    .F0(\server_power_control/wait_time_out_cnt_s[13] ), 
    .Q0(\server_power_control/wait_time_out_cnt[13] ), 
    .F1(\server_power_control/wait_time_out_cnt_s[14] ), 
    .Q1(\server_power_control/wait_time_out_cnt[14] ), 
    .FCO(\server_power_control/wait_time_out_cnt_cry[14] ));
  server_power_control_SLICE_97 \server_power_control/SLICE_97 ( 
    .B1(\server_power_control/wait_time_out_cnt ), 
    .A1(\server_power_control/wait_time_out_cnt[12] ), 
    .B0(\server_power_control/wait_time_out_cnt ), 
    .A0(\server_power_control/wait_time_out_cnt[11] ), 
    .DI1(\server_power_control/wait_time_out_cnt_s[12] ), 
    .DI0(\server_power_control/wait_time_out_cnt_s[11] ), 
    .CE(\server_power_control/wait_time_out_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/wait_time_out_cnt_cry[10] ), 
    .F0(\server_power_control/wait_time_out_cnt_s[11] ), 
    .Q0(\server_power_control/wait_time_out_cnt[11] ), 
    .F1(\server_power_control/wait_time_out_cnt_s[12] ), 
    .Q1(\server_power_control/wait_time_out_cnt[12] ), 
    .FCO(\server_power_control/wait_time_out_cnt_cry[12] ));
  server_power_control_SLICE_98 \server_power_control/SLICE_98 ( 
    .B1(\server_power_control/wait_time_out_cnt ), 
    .A1(\server_power_control/wait_time_out_cnt[10] ), 
    .B0(\server_power_control/wait_time_out_cnt ), 
    .A0(\server_power_control/wait_time_out_cnt[9] ), 
    .DI1(\server_power_control/wait_time_out_cnt_s[10] ), 
    .DI0(\server_power_control/wait_time_out_cnt_s[9] ), 
    .CE(\server_power_control/wait_time_out_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/wait_time_out_cnt_cry[8] ), 
    .F0(\server_power_control/wait_time_out_cnt_s[9] ), 
    .Q0(\server_power_control/wait_time_out_cnt[9] ), 
    .F1(\server_power_control/wait_time_out_cnt_s[10] ), 
    .Q1(\server_power_control/wait_time_out_cnt[10] ), 
    .FCO(\server_power_control/wait_time_out_cnt_cry[10] ));
  server_power_control_SLICE_99 \server_power_control/SLICE_99 ( 
    .B1(\server_power_control/wait_time_out_cnt ), 
    .A1(\server_power_control/wait_time_out_cnt[8] ), 
    .B0(\server_power_control/wait_time_out_cnt ), 
    .A0(\server_power_control/wait_time_out_cnt[7] ), 
    .DI1(\server_power_control/wait_time_out_cnt_s[8] ), 
    .DI0(\server_power_control/wait_time_out_cnt_s[7] ), 
    .CE(\server_power_control/wait_time_out_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/wait_time_out_cnt_cry[6] ), 
    .F0(\server_power_control/wait_time_out_cnt_s[7] ), 
    .Q0(\server_power_control/wait_time_out_cnt[7] ), 
    .F1(\server_power_control/wait_time_out_cnt_s[8] ), 
    .Q1(\server_power_control/wait_time_out_cnt[8] ), 
    .FCO(\server_power_control/wait_time_out_cnt_cry[8] ));
  server_power_control_SLICE_100 \server_power_control/SLICE_100 ( 
    .B1(\server_power_control/wait_time_out_cnt[6] ), 
    .A1(\server_power_control/wait_time_out_cnt ), 
    .B0(\server_power_control/wait_time_out_cnt[5] ), 
    .A0(\server_power_control/wait_time_out_cnt ), 
    .DI1(\server_power_control/wait_time_out_cnt_s[6] ), 
    .DI0(\server_power_control/wait_time_out_cnt_s[5] ), 
    .CE(\server_power_control/wait_time_out_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/wait_time_out_cnt_cry[4] ), 
    .F0(\server_power_control/wait_time_out_cnt_s[5] ), 
    .Q0(\server_power_control/wait_time_out_cnt[5] ), 
    .F1(\server_power_control/wait_time_out_cnt_s[6] ), 
    .Q1(\server_power_control/wait_time_out_cnt[6] ), 
    .FCO(\server_power_control/wait_time_out_cnt_cry[6] ));
  server_power_control_SLICE_101 \server_power_control/SLICE_101 ( 
    .B1(\server_power_control/wait_time_out_cnt ), 
    .A1(\server_power_control/wait_time_out_cnt[4] ), 
    .B0(\server_power_control/wait_time_out_cnt ), 
    .A0(\server_power_control/wait_time_out_cnt[3] ), 
    .DI1(\server_power_control/wait_time_out_cnt_s[4] ), 
    .DI0(\server_power_control/wait_time_out_cnt_s[3] ), 
    .CE(\server_power_control/wait_time_out_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/wait_time_out_cnt_cry[2] ), 
    .F0(\server_power_control/wait_time_out_cnt_s[3] ), 
    .Q0(\server_power_control/wait_time_out_cnt[3] ), 
    .F1(\server_power_control/wait_time_out_cnt_s[4] ), 
    .Q1(\server_power_control/wait_time_out_cnt[4] ), 
    .FCO(\server_power_control/wait_time_out_cnt_cry[4] ));
  server_power_control_SLICE_102 \server_power_control/SLICE_102 ( 
    .B1(\server_power_control/wait_time_out_cnt[2] ), 
    .A1(\server_power_control/wait_time_out_cnt ), 
    .B0(\server_power_control/wait_time_out_cnt[1] ), 
    .A0(\server_power_control/wait_time_out_cnt ), 
    .DI1(\server_power_control/wait_time_out_cnt_s[2] ), 
    .DI0(\server_power_control/wait_time_out_cnt_s[1] ), 
    .CE(\server_power_control/wait_time_out_cnte ), .CLK(clock_c), 
    .FCI(\server_power_control/wait_time_out_cnt_cry[0] ), 
    .F0(\server_power_control/wait_time_out_cnt_s[1] ), 
    .Q0(\server_power_control/wait_time_out_cnt[1] ), 
    .F1(\server_power_control/wait_time_out_cnt_s[2] ), 
    .Q1(\server_power_control/wait_time_out_cnt[2] ), 
    .FCO(\server_power_control/wait_time_out_cnt_cry[2] ));
  server_power_control_SLICE_103 \server_power_control/SLICE_103 ( 
    .B1(\server_power_control/wait_time_out_cnt ), 
    .A1(\server_power_control/wait_time_out_cnt[0] ), 
    .B0(\server_power_control/wait_time_out_cnt ), 
    .DI1(\server_power_control/wait_time_out_cnt_s[0] ), 
    .CE(\server_power_control/wait_time_out_cnte ), .CLK(clock_c), 
    .F1(\server_power_control/wait_time_out_cnt_s[0] ), 
    .Q1(\server_power_control/wait_time_out_cnt[0] ), 
    .FCO(\server_power_control/wait_time_out_cnt_cry[0] ));
  server_power_control_SLICE_104 \server_power_control/SLICE_104 ( 
    .B1(\server_power_control/N_87_i ), .A1(\server_power_control/psu_dly[8] ), 
    .B0(\server_power_control/N_87_i ), .A0(\server_power_control/psu_dly[7] ), 
    .DI1(\server_power_control/psu_dly_s[8] ), 
    .DI0(\server_power_control/psu_dly_s[7] ), 
    .CE(\server_power_control/psu_dlye ), .CLK(clock_c), 
    .FCI(\server_power_control/psu_dly_cry[6] ), 
    .F0(\server_power_control/psu_dly_s[7] ), 
    .Q0(\server_power_control/psu_dly[7] ), 
    .F1(\server_power_control/psu_dly_s[8] ), 
    .Q1(\server_power_control/psu_dly[8] ));
  server_power_control_SLICE_105 \server_power_control/SLICE_105 ( 
    .B1(\server_power_control/N_87_i ), .A1(\server_power_control/psu_dly[6] ), 
    .B0(\server_power_control/N_87_i ), .A0(\server_power_control/psu_dly[5] ), 
    .DI1(\server_power_control/psu_dly_s[6] ), 
    .DI0(\server_power_control/psu_dly_s[5] ), 
    .CE(\server_power_control/psu_dlye ), .CLK(clock_c), 
    .FCI(\server_power_control/psu_dly_cry[4] ), 
    .F0(\server_power_control/psu_dly_s[5] ), 
    .Q0(\server_power_control/psu_dly[5] ), 
    .F1(\server_power_control/psu_dly_s[6] ), 
    .Q1(\server_power_control/psu_dly[6] ), 
    .FCO(\server_power_control/psu_dly_cry[6] ));
  server_power_control_SLICE_106 \server_power_control/SLICE_106 ( 
    .B1(\server_power_control/N_87_i ), .A1(\server_power_control/psu_dly[4] ), 
    .B0(\server_power_control/N_87_i ), .A0(\server_power_control/psu_dly[3] ), 
    .DI1(\server_power_control/psu_dly_s[4] ), 
    .DI0(\server_power_control/psu_dly_s[3] ), 
    .CE(\server_power_control/psu_dlye ), .CLK(clock_c), 
    .FCI(\server_power_control/psu_dly_cry[2] ), 
    .F0(\server_power_control/psu_dly_s[3] ), 
    .Q0(\server_power_control/psu_dly[3] ), 
    .F1(\server_power_control/psu_dly_s[4] ), 
    .Q1(\server_power_control/psu_dly[4] ), 
    .FCO(\server_power_control/psu_dly_cry[4] ));
  server_power_control_SLICE_107 \server_power_control/SLICE_107 ( 
    .B1(\server_power_control/N_87_i ), .A1(\server_power_control/psu_dly[2] ), 
    .B0(\server_power_control/N_87_i ), .A0(\server_power_control/psu_dly[1] ), 
    .DI1(\server_power_control/psu_dly_s[2] ), 
    .DI0(\server_power_control/psu_dly_s[1] ), 
    .CE(\server_power_control/psu_dlye ), .CLK(clock_c), 
    .FCI(\server_power_control/psu_dly_cry[0] ), 
    .F0(\server_power_control/psu_dly_s[1] ), 
    .Q0(\server_power_control/psu_dly[1] ), 
    .F1(\server_power_control/psu_dly_s[2] ), 
    .Q1(\server_power_control/psu_dly[2] ), 
    .FCO(\server_power_control/psu_dly_cry[2] ));
  server_power_control_SLICE_108 \server_power_control/SLICE_108 ( 
    .B1(\server_power_control/N_87_i ), .A1(\server_power_control/psu_dly[0] ), 
    .B0(\server_power_control/N_87_i ), 
    .DI1(\server_power_control/psu_dly_s[0] ), 
    .CE(\server_power_control/psu_dlye ), .CLK(clock_c), 
    .F1(\server_power_control/psu_dly_s[0] ), 
    .Q1(\server_power_control/psu_dly[0] ), 
    .FCO(\server_power_control/psu_dly_cry[0] ));
  i2c0_slave_inst0_SLICE_109 \i2c0_slave_inst0/SLICE_109 ( 
    .B0(\i2c0_slave_inst0/delay_cnt[7] ), .A0(\i2c0_slave_inst0/delay_cnt ), 
    .DI0(\i2c0_slave_inst0/delay_cnt_s[7] ), 
    .CE(\i2c0_slave_inst0/delay_cnte ), .CLK(clock_c), 
    .FCI(\i2c0_slave_inst0/delay_cnt_cry[6] ), 
    .F0(\i2c0_slave_inst0/delay_cnt_s[7] ), 
    .Q0(\i2c0_slave_inst0/delay_cnt[7] ));
  i2c0_slave_inst0_SLICE_110 \i2c0_slave_inst0/SLICE_110 ( 
    .B1(\i2c0_slave_inst0/delay_cnt ), .A1(\i2c0_slave_inst0/delay_cnt[6] ), 
    .B0(\i2c0_slave_inst0/delay_cnt ), .A0(\i2c0_slave_inst0/delay_cnt[5] ), 
    .DI1(\i2c0_slave_inst0/delay_cnt_s[6] ), 
    .DI0(\i2c0_slave_inst0/delay_cnt_s[5] ), 
    .CE(\i2c0_slave_inst0/delay_cnte ), .CLK(clock_c), 
    .FCI(\i2c0_slave_inst0/delay_cnt_cry[4] ), 
    .F0(\i2c0_slave_inst0/delay_cnt_s[5] ), 
    .Q0(\i2c0_slave_inst0/delay_cnt[5] ), 
    .F1(\i2c0_slave_inst0/delay_cnt_s[6] ), 
    .Q1(\i2c0_slave_inst0/delay_cnt[6] ), 
    .FCO(\i2c0_slave_inst0/delay_cnt_cry[6] ));
  i2c0_slave_inst0_SLICE_111 \i2c0_slave_inst0/SLICE_111 ( 
    .B1(\i2c0_slave_inst0/delay_cnt[4] ), .A1(\i2c0_slave_inst0/delay_cnt ), 
    .B0(\i2c0_slave_inst0/delay_cnt[3] ), .A0(\i2c0_slave_inst0/delay_cnt ), 
    .DI1(\i2c0_slave_inst0/delay_cnt_s[4] ), 
    .DI0(\i2c0_slave_inst0/delay_cnt_s[3] ), 
    .CE(\i2c0_slave_inst0/delay_cnte ), .CLK(clock_c), 
    .FCI(\i2c0_slave_inst0/delay_cnt_cry[2] ), 
    .F0(\i2c0_slave_inst0/delay_cnt_s[3] ), 
    .Q0(\i2c0_slave_inst0/delay_cnt[3] ), 
    .F1(\i2c0_slave_inst0/delay_cnt_s[4] ), 
    .Q1(\i2c0_slave_inst0/delay_cnt[4] ), 
    .FCO(\i2c0_slave_inst0/delay_cnt_cry[4] ));
  i2c0_slave_inst0_SLICE_112 \i2c0_slave_inst0/SLICE_112 ( 
    .B1(\i2c0_slave_inst0/delay_cnt ), .A1(\i2c0_slave_inst0/delay_cnt[2] ), 
    .B0(\i2c0_slave_inst0/delay_cnt ), .A0(\i2c0_slave_inst0/delay_cnt[1] ), 
    .DI1(\i2c0_slave_inst0/delay_cnt_s[2] ), 
    .DI0(\i2c0_slave_inst0/delay_cnt_s[1] ), 
    .CE(\i2c0_slave_inst0/delay_cnte ), .CLK(clock_c), 
    .FCI(\i2c0_slave_inst0/delay_cnt_cry[0] ), 
    .F0(\i2c0_slave_inst0/delay_cnt_s[1] ), 
    .Q0(\i2c0_slave_inst0/delay_cnt[1] ), 
    .F1(\i2c0_slave_inst0/delay_cnt_s[2] ), 
    .Q1(\i2c0_slave_inst0/delay_cnt[2] ), 
    .FCO(\i2c0_slave_inst0/delay_cnt_cry[2] ));
  i2c0_slave_inst0_SLICE_113 \i2c0_slave_inst0/SLICE_113 ( 
    .B1(\i2c0_slave_inst0/delay_cnt[0] ), .A1(\i2c0_slave_inst0/delay_cnt ), 
    .A0(\i2c0_slave_inst0/delay_cnt ), .DI1(\i2c0_slave_inst0/delay_cnt_s[0] ), 
    .CE(\i2c0_slave_inst0/delay_cnte ), .CLK(clock_c), 
    .F1(\i2c0_slave_inst0/delay_cnt_s[0] ), 
    .Q1(\i2c0_slave_inst0/delay_cnt[0] ), 
    .FCO(\i2c0_slave_inst0/delay_cnt_cry[0] ));
  i2c0_slave_inst0_SLICE_114 \i2c0_slave_inst0/SLICE_114 ( 
    .C1(\cpld_register_addr[7] ), .B1(\i2c0_slave_inst0/N_49_i_0_i ), 
    .A1(\i2c0_slave_inst0/rcv_bit[7] ), .C0(\cpld_register_addr[6] ), 
    .B0(\i2c0_slave_inst0/N_49_i_0_i ), .A0(\i2c0_slave_inst0/rcv_bit[6] ), 
    .DI1(\i2c0_slave_inst0/word_addr_s[7] ), 
    .DI0(\i2c0_slave_inst0/word_addr_s[6] ), 
    .CE(\i2c0_slave_inst0/start_next_bit ), .CLK(clock_c), 
    .FCI(\i2c0_slave_inst0/word_addr_cry[5] ), 
    .F0(\i2c0_slave_inst0/word_addr_s[6] ), .Q0(\cpld_register_addr[6] ), 
    .F1(\i2c0_slave_inst0/word_addr_s[7] ), .Q1(\cpld_register_addr[7] ));
  i2c0_slave_inst0_SLICE_115 \i2c0_slave_inst0/SLICE_115 ( 
    .C1(\cpld_register_addr[5] ), .B1(\i2c0_slave_inst0/rcv_bit[5] ), 
    .A1(\i2c0_slave_inst0/N_49_i_0_i ), .C0(\cpld_register_addr[4] ), 
    .B0(\i2c0_slave_inst0/rcv_bit[4] ), .A0(\i2c0_slave_inst0/N_49_i_0_i ), 
    .DI1(\i2c0_slave_inst0/word_addr_s[5] ), 
    .DI0(\i2c0_slave_inst0/word_addr_s[4] ), 
    .CE(\i2c0_slave_inst0/start_next_bit ), .CLK(clock_c), 
    .FCI(\i2c0_slave_inst0/word_addr_cry[3] ), 
    .F0(\i2c0_slave_inst0/word_addr_s[4] ), .Q0(\cpld_register_addr[4] ), 
    .F1(\i2c0_slave_inst0/word_addr_s[5] ), .Q1(\cpld_register_addr[5] ), 
    .FCO(\i2c0_slave_inst0/word_addr_cry[5] ));
  i2c0_slave_inst0_SLICE_116 \i2c0_slave_inst0/SLICE_116 ( 
    .C1(\cpld_register_addr[3] ), .B1(\i2c0_slave_inst0/N_49_i_0_i ), 
    .A1(\i2c0_slave_inst0/rcv_bit[3] ), .C0(\cpld_register_addr[2] ), 
    .B0(\i2c0_slave_inst0/N_49_i_0_i ), .A0(\i2c0_slave_inst0/rcv_bit[2] ), 
    .DI1(\i2c0_slave_inst0/word_addr_s[3] ), 
    .DI0(\i2c0_slave_inst0/word_addr_s[2] ), 
    .CE(\i2c0_slave_inst0/start_next_bit ), .CLK(clock_c), 
    .FCI(\i2c0_slave_inst0/word_addr_cry[1] ), 
    .F0(\i2c0_slave_inst0/word_addr_s[2] ), .Q0(\cpld_register_addr[2] ), 
    .F1(\i2c0_slave_inst0/word_addr_s[3] ), .Q1(\cpld_register_addr[3] ), 
    .FCO(\i2c0_slave_inst0/word_addr_cry[3] ));
  i2c0_slave_inst0_SLICE_117 \i2c0_slave_inst0/SLICE_117 ( 
    .C1(\cpld_register_addr[1] ), .B1(\i2c0_slave_inst0/rcv_bit[1] ), 
    .A1(\i2c0_slave_inst0/N_49_i_0_i ), .C0(\cpld_register_addr[0] ), 
    .B0(\i2c0_slave_inst0/rcv_bit[0] ), .A0(\i2c0_slave_inst0/N_49_i_0_i ), 
    .DI1(\i2c0_slave_inst0/word_addr_s[1] ), 
    .DI0(\i2c0_slave_inst0/word_addr_s[0] ), 
    .CE(\i2c0_slave_inst0/start_next_bit ), .CLK(clock_c), 
    .FCI(\i2c0_slave_inst0/word_addr ), .F0(\i2c0_slave_inst0/word_addr_s[0] ), 
    .Q0(\cpld_register_addr[0] ), .F1(\i2c0_slave_inst0/word_addr_s[1] ), 
    .Q1(\cpld_register_addr[1] ), .FCO(\i2c0_slave_inst0/word_addr_cry[1] ));
  i2c0_slave_inst0_SLICE_118 \i2c0_slave_inst0/SLICE_118 ( 
    .B1(\i2c0_slave_inst0/N_49_i_0_i ), .A0(\i2c0_slave_inst0/N_18 ), 
    .FCO(\i2c0_slave_inst0/word_addr ));
  i2c0_slave_inst0_SLICE_119 \i2c0_slave_inst0/SLICE_119 ( 
    .B1(\i2c0_slave_inst0/timeout_cnt[4] ), .A1(\i2c0_slave_inst0/N_236_i ), 
    .B0(\i2c0_slave_inst0/timeout_cnt[3] ), .A0(\i2c0_slave_inst0/N_236_i ), 
    .DI1(\i2c0_slave_inst0/timeout_cnt_s[4] ), 
    .DI0(\i2c0_slave_inst0/timeout_cnt_s[3] ), 
    .CE(\i2c0_slave_inst0/timeout_cnte ), .CLK(clock_c), 
    .FCI(\i2c0_slave_inst0/timeout_cnt_cry[2] ), 
    .F0(\i2c0_slave_inst0/timeout_cnt_s[3] ), 
    .Q0(\i2c0_slave_inst0/timeout_cnt[3] ), 
    .F1(\i2c0_slave_inst0/timeout_cnt_s[4] ), 
    .Q1(\i2c0_slave_inst0/timeout_cnt[4] ));
  i2c0_slave_inst0_SLICE_120 \i2c0_slave_inst0/SLICE_120 ( 
    .B1(\i2c0_slave_inst0/N_236_i ), .A1(\i2c0_slave_inst0/timeout_cnt[2] ), 
    .B0(\i2c0_slave_inst0/timeout_cnt[1] ), .A0(\i2c0_slave_inst0/N_236_i ), 
    .DI1(\i2c0_slave_inst0/timeout_cnt_s[2] ), 
    .DI0(\i2c0_slave_inst0/timeout_cnt_s[1] ), 
    .CE(\i2c0_slave_inst0/timeout_cnte ), .CLK(clock_c), 
    .FCI(\i2c0_slave_inst0/timeout_cnt_cry[0] ), 
    .F0(\i2c0_slave_inst0/timeout_cnt_s[1] ), 
    .Q0(\i2c0_slave_inst0/timeout_cnt[1] ), 
    .F1(\i2c0_slave_inst0/timeout_cnt_s[2] ), 
    .Q1(\i2c0_slave_inst0/timeout_cnt[2] ), 
    .FCO(\i2c0_slave_inst0/timeout_cnt_cry[2] ));
  i2c0_slave_inst0_SLICE_121 \i2c0_slave_inst0/SLICE_121 ( 
    .B1(\i2c0_slave_inst0/timeout_cnt[0] ), .A1(\i2c0_slave_inst0/N_236_i ), 
    .A0(\i2c0_slave_inst0/N_236_i ), .DI1(\i2c0_slave_inst0/timeout_cnt_s[0] ), 
    .CE(\i2c0_slave_inst0/timeout_cnte ), .CLK(clock_c), 
    .F1(\i2c0_slave_inst0/timeout_cnt_s[0] ), 
    .Q1(\i2c0_slave_inst0/timeout_cnt[0] ), 
    .FCO(\i2c0_slave_inst0/timeout_cnt_cry[0] ));
  timer_inst_SLICE_122 \timer_inst/SLICE_122 ( 
    .A1(\timer_inst/int_1ms_cnt[0] ), .FCO(\timer_inst/un6_int_1ms_cnt_cry_0 ));
  timer_inst_SLICE_123 \timer_inst/SLICE_123 ( 
    .B0(\timer_inst/int_100ms_cnt[21] ), 
    .FCI(\timer_inst/un6_int_100ms_cnt_cry_20 ), 
    .F0(\timer_inst/un6_int_100ms_cnt_s_21_0_S0 ));
  timer_inst_SLICE_124 \timer_inst/SLICE_124 ( 
    .A1(\timer_inst/int_100ms_cnt[20] ), .A0(\timer_inst/int_100ms_cnt[19] ), 
    .DI1(\timer_inst/un6_int_100ms_cnt[20] ), 
    .DI0(\timer_inst/un6_int_100ms_cnt[19] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_100ms_cnt_cry_18 ), 
    .F0(\timer_inst/un6_int_100ms_cnt[19] ), 
    .Q0(\timer_inst/int_100ms_cnt[19] ), 
    .F1(\timer_inst/un6_int_100ms_cnt[20] ), 
    .Q1(\timer_inst/int_100ms_cnt[20] ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_20 ));
  timer_inst_SLICE_125 \timer_inst/SLICE_125 ( 
    .B1(\timer_inst/int_100ms_cnt[18] ), .A0(\timer_inst/int_100ms_cnt[17] ), 
    .FCI(\timer_inst/un6_int_100ms_cnt_cry_16 ), 
    .F0(\timer_inst/un6_int_100ms_cnt_cry_17_0_S0 ), 
    .F1(\timer_inst/un6_int_100ms_cnt_cry_17_0_S1 ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_18 ));
  timer_inst_SLICE_126 \timer_inst/SLICE_126 ( 
    .A1(\timer_inst/int_100ms_cnt[16] ), .A0(\timer_inst/int_100ms_cnt[15] ), 
    .DI1(\timer_inst/un6_int_100ms_cnt[16] ), 
    .DI0(\timer_inst/un6_int_100ms_cnt[15] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_100ms_cnt_cry_14 ), 
    .F0(\timer_inst/un6_int_100ms_cnt[15] ), 
    .Q0(\timer_inst/int_100ms_cnt[15] ), 
    .F1(\timer_inst/un6_int_100ms_cnt[16] ), 
    .Q1(\timer_inst/int_100ms_cnt[16] ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_16 ));
  timer_inst_SLICE_127 \timer_inst/SLICE_127 ( 
    .A1(\timer_inst/int_100ms_cnt[14] ), .A0(\timer_inst/int_100ms_cnt[13] ), 
    .DI1(\timer_inst/un6_int_100ms_cnt[14] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_100ms_cnt_cry_12 ), 
    .F0(\timer_inst/un6_int_100ms_cnt_cry_13_0_S0 ), 
    .F1(\timer_inst/un6_int_100ms_cnt[14] ), 
    .Q1(\timer_inst/int_100ms_cnt[14] ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_14 ));
  timer_inst_SLICE_128 \timer_inst/SLICE_128 ( 
    .A1(\timer_inst/int_100ms_cnt[12] ), .A0(\timer_inst/int_100ms_cnt[11] ), 
    .DI1(\timer_inst/un6_int_100ms_cnt[12] ), 
    .DI0(\timer_inst/un6_int_100ms_cnt[11] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_100ms_cnt_cry_10 ), 
    .F0(\timer_inst/un6_int_100ms_cnt[11] ), 
    .Q0(\timer_inst/int_100ms_cnt[11] ), 
    .F1(\timer_inst/un6_int_100ms_cnt[12] ), 
    .Q1(\timer_inst/int_100ms_cnt[12] ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_12 ));
  timer_inst_SLICE_129 \timer_inst/SLICE_129 ( 
    .B1(\timer_inst/int_100ms_cnt[10] ), .A0(\timer_inst/int_100ms_cnt[9] ), 
    .DI0(\timer_inst/un6_int_100ms_cnt[9] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_100ms_cnt_cry_8 ), 
    .F0(\timer_inst/un6_int_100ms_cnt[9] ), .Q0(\timer_inst/int_100ms_cnt[9] ), 
    .F1(\timer_inst/un6_int_100ms_cnt_cry_9_0_S1 ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_10 ));
  timer_inst_SLICE_130 \timer_inst/SLICE_130 ( 
    .A1(\timer_inst/int_100ms_cnt[8] ), .A0(\timer_inst/int_100ms_cnt[7] ), 
    .FCI(\timer_inst/un6_int_100ms_cnt_cry_6 ), 
    .F0(\timer_inst/un6_int_100ms_cnt_cry_7_0_S0 ), 
    .F1(\timer_inst/un6_int_100ms_cnt_cry_7_0_S1 ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_8 ));
  timer_inst_SLICE_131 \timer_inst/SLICE_131 ( 
    .A1(\timer_inst/int_100ms_cnt[6] ), .A0(\timer_inst/int_100ms_cnt[5] ), 
    .DI1(\timer_inst/un6_int_100ms_cnt[6] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_100ms_cnt_cry_4 ), 
    .F0(\timer_inst/un6_int_100ms_cnt_cry_5_0_S0 ), 
    .F1(\timer_inst/un6_int_100ms_cnt[6] ), .Q1(\timer_inst/int_100ms_cnt[6] ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_6 ));
  timer_inst_SLICE_132 \timer_inst/SLICE_132 ( 
    .A1(\timer_inst/int_100ms_cnt[4] ), .A0(\timer_inst/int_100ms_cnt[3] ), 
    .DI1(\timer_inst/un6_int_100ms_cnt[4] ), 
    .DI0(\timer_inst/un6_int_100ms_cnt[3] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_100ms_cnt_cry_2 ), 
    .F0(\timer_inst/un6_int_100ms_cnt[3] ), .Q0(\timer_inst/int_100ms_cnt[3] ), 
    .F1(\timer_inst/un6_int_100ms_cnt[4] ), .Q1(\timer_inst/int_100ms_cnt[4] ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_4 ));
  timer_inst_SLICE_133 \timer_inst/SLICE_133 ( 
    .A1(\timer_inst/int_100ms_cnt[2] ), .A0(\timer_inst/int_100ms_cnt[1] ), 
    .DI1(\timer_inst/un6_int_100ms_cnt[2] ), 
    .DI0(\timer_inst/un6_int_100ms_cnt[1] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_100ms_cnt_cry_0 ), 
    .F0(\timer_inst/un6_int_100ms_cnt[1] ), .Q0(\timer_inst/int_100ms_cnt[1] ), 
    .F1(\timer_inst/un6_int_100ms_cnt[2] ), .Q1(\timer_inst/int_100ms_cnt[2] ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_2 ));
  timer_inst_SLICE_134 \timer_inst/SLICE_134 ( 
    .B1(\timer_inst/int_100ms_cnt[0] ), 
    .FCO(\timer_inst/un6_int_100ms_cnt_cry_0 ));
  timer_inst_SLICE_135 \timer_inst/SLICE_135 ( 
    .A1(\timer_inst/int_1ms_cnt[14] ), .A0(\timer_inst/int_1ms_cnt[13] ), 
    .FCI(\timer_inst/un6_int_1ms_cnt_cry_12 ), 
    .F0(\timer_inst/un6_int_1ms_cnt_cry_13_0_S0 ), 
    .F1(\timer_inst/un6_int_1ms_cnt_cry_13_0_S1 ));
  timer_inst_SLICE_136 \timer_inst/SLICE_136 ( 
    .A1(\timer_inst/int_1ms_cnt[12] ), .A0(\timer_inst/int_1ms_cnt[11] ), 
    .DI1(\timer_inst/un6_int_1ms_cnt[12] ), 
    .DI0(\timer_inst/un6_int_1ms_cnt[11] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_1ms_cnt_cry_10 ), 
    .F0(\timer_inst/un6_int_1ms_cnt[11] ), .Q0(\timer_inst/int_1ms_cnt[11] ), 
    .F1(\timer_inst/un6_int_1ms_cnt[12] ), .Q1(\timer_inst/int_1ms_cnt[12] ), 
    .FCO(\timer_inst/un6_int_1ms_cnt_cry_12 ));
  timer_inst_SLICE_137 \timer_inst/SLICE_137 ( 
    .A1(\timer_inst/int_1ms_cnt[10] ), .A0(\timer_inst/int_1ms_cnt[9] ), 
    .DI1(\timer_inst/un6_int_1ms_cnt[10] ), 
    .DI0(\timer_inst/un6_int_1ms_cnt[9] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_1ms_cnt_cry_8 ), 
    .F0(\timer_inst/un6_int_1ms_cnt[9] ), .Q0(\timer_inst/int_1ms_cnt[9] ), 
    .F1(\timer_inst/un6_int_1ms_cnt[10] ), .Q1(\timer_inst/int_1ms_cnt[10] ), 
    .FCO(\timer_inst/un6_int_1ms_cnt_cry_10 ));
  timer_inst_SLICE_138 \timer_inst/SLICE_138 ( 
    .A1(\timer_inst/int_1ms_cnt[8] ), .A0(\timer_inst/int_1ms_cnt[7] ), 
    .FCI(\timer_inst/un6_int_1ms_cnt_cry_6 ), 
    .F0(\timer_inst/un6_int_1ms_cnt_cry_7_0_S0 ), 
    .F1(\timer_inst/un6_int_1ms_cnt_cry_7_0_S1 ), 
    .FCO(\timer_inst/un6_int_1ms_cnt_cry_8 ));
  timer_inst_SLICE_139 \timer_inst/SLICE_139 ( 
    .A1(\timer_inst/int_1ms_cnt[6] ), .A0(\timer_inst/int_1ms_cnt[5] ), 
    .DI1(\timer_inst/un6_int_1ms_cnt[6] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_1ms_cnt_cry_4 ), 
    .F0(\timer_inst/un6_int_1ms_cnt_cry_5_0_S0 ), 
    .F1(\timer_inst/un6_int_1ms_cnt[6] ), .Q1(\timer_inst/int_1ms_cnt[6] ), 
    .FCO(\timer_inst/un6_int_1ms_cnt_cry_6 ));
  timer_inst_SLICE_140 \timer_inst/SLICE_140 ( 
    .A1(\timer_inst/int_1ms_cnt[4] ), .B0(\timer_inst/int_1ms_cnt[3] ), 
    .DI1(\timer_inst/un6_int_1ms_cnt[4] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_1ms_cnt_cry_2 ), 
    .F0(\timer_inst/un6_int_1ms_cnt_cry_3_0_S0 ), 
    .F1(\timer_inst/un6_int_1ms_cnt[4] ), .Q1(\timer_inst/int_1ms_cnt[4] ), 
    .FCO(\timer_inst/un6_int_1ms_cnt_cry_4 ));
  timer_inst_SLICE_141 \timer_inst/SLICE_141 ( 
    .A1(\timer_inst/int_1ms_cnt[2] ), .A0(\timer_inst/int_1ms_cnt[1] ), 
    .DI1(\timer_inst/un6_int_1ms_cnt[2] ), 
    .DI0(\timer_inst/un6_int_1ms_cnt[1] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .FCI(\timer_inst/un6_int_1ms_cnt_cry_0 ), 
    .F0(\timer_inst/un6_int_1ms_cnt[1] ), .Q0(\timer_inst/int_1ms_cnt[1] ), 
    .F1(\timer_inst/un6_int_1ms_cnt[2] ), .Q1(\timer_inst/int_1ms_cnt[2] ), 
    .FCO(\timer_inst/un6_int_1ms_cnt_cry_2 ));
  SLICE_142 SLICE_142( .D0(int_100ms_en), .A0(CO0), .DI0(\flash_clk_cnt_0[0] ), 
    .CLK(clock_c), .F0(\flash_clk_cnt_0[0] ), .Q0(CO0));
  server_power_control_SLICE_143 \server_power_control/SLICE_143 ( 
    .D1(a_gpio5_c), .C1(\server_power_control/next_state101 ), 
    .B1(\server_power_control/is_normal_reboot ), 
    .A1(\server_power_control/current_state[3] ), .D0(a_gpio5_c), 
    .C0(\server_power_control/is_normal_reboot ), 
    .B0(\server_power_control/current_state[2] ), 
    .A0(\server_power_control/current_state[1] ), 
    .DI0(\server_power_control/N_61_i ), 
    .CE(\server_power_control/un1_next_state105_8_i ), .CLK(clock_c), 
    .F0(\server_power_control/N_61_i ), .Q0(a_gpio2_c), 
    .F1(\server_power_control/N_125 ));
  bmc_reset_ctrl_inst_SLICE_147 \bmc_reset_ctrl_inst/SLICE_147 ( 
    .D1(\bmc_reset_ctrl_inst/current_state[0] ), 
    .C1(\bmc_reset_ctrl_inst.sig_r0 ), .B1(\bmc_reset_ctrl_inst.sig_r1 ), 
    .A1(\bmc_reset_ctrl_inst.prst_delay_4[2] ), 
    .D0(\bmc_reset_ctrl_inst/current_state[0] ), 
    .C0(\bmc_reset_ctrl_inst.sig_r0 ), .A0(\bmc_reset_ctrl_inst.sig_r1 ), 
    .DI1(\bmc_reset_ctrl_inst/next_state_3[1] ), 
    .DI0(\bmc_reset_ctrl_inst/N_537_i ), 
    .CLK(\bmc_reset_ctrl_inst/un1_next_state24_0_0 ), 
    .F0(\bmc_reset_ctrl_inst/N_537_i ), 
    .Q0(\bmc_reset_ctrl_inst/next_state[0] ), 
    .F1(\bmc_reset_ctrl_inst/next_state_3[1] ), 
    .Q1(\bmc_reset_ctrl_inst/next_state[1] ));
  bmc_reset_ctrl_inst_SLICE_148 \bmc_reset_ctrl_inst/SLICE_148 ( 
    .D1(\bmc_reset_ctrl_inst/bmc_srst5 ), 
    .B1(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_1_0_S1 ), 
    .C0(\bmc_reset_ctrl_inst/bmc_srst5 ), 
    .B0(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_1_0_S0 ), 
    .DI1(\bmc_reset_ctrl_inst/srst_delay_3[2] ), 
    .DI0(\bmc_reset_ctrl_inst/srst_delay_3[1] ), .CLK(clock_c), 
    .F0(\bmc_reset_ctrl_inst/srst_delay_3[1] ), 
    .Q0(\bmc_reset_ctrl_inst/srst_delay[1] ), 
    .F1(\bmc_reset_ctrl_inst/srst_delay_3[2] ), 
    .Q1(\bmc_reset_ctrl_inst/srst_delay[2] ));
  bmc_reset_ctrl_inst_SLICE_149 \bmc_reset_ctrl_inst/SLICE_149 ( 
    .C1(\bmc_reset_ctrl_inst/bmc_srst5 ), 
    .B1(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_5_0_S0 ), 
    .D0(\bmc_reset_ctrl_inst/bmc_srst5 ), 
    .A0(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_3_0_S0 ), 
    .DI1(\bmc_reset_ctrl_inst/srst_delay_3[5] ), 
    .DI0(\bmc_reset_ctrl_inst/srst_delay_3[3] ), .CLK(clock_c), 
    .F0(\bmc_reset_ctrl_inst/srst_delay_3[3] ), 
    .Q0(\bmc_reset_ctrl_inst/srst_delay[3] ), 
    .F1(\bmc_reset_ctrl_inst/srst_delay_3[5] ), 
    .Q1(\bmc_reset_ctrl_inst/srst_delay[5] ));
  bmc_reset_ctrl_inst_SLICE_150 \bmc_reset_ctrl_inst/SLICE_150 ( 
    .D1(\bmc_reset_ctrl_inst/srst_delay[3] ), 
    .C1(\bmc_reset_ctrl_inst/srst_delay[4] ), 
    .B1(\bmc_reset_ctrl_inst/srst_delay[7] ), 
    .A1(\bmc_reset_ctrl_inst/srst_delay[1] ), 
    .D0(\bmc_reset_ctrl_inst/bmc_srst5 ), 
    .C0(\bmc_reset_ctrl_inst/un1_srst_delay_1_cry_5_0_S1 ), 
    .DI0(\bmc_reset_ctrl_inst/srst_delay_3[6] ), .CLK(clock_c), 
    .F0(\bmc_reset_ctrl_inst/srst_delay_3[6] ), 
    .Q0(\bmc_reset_ctrl_inst/srst_delay[6] ), 
    .F1(\bmc_reset_ctrl_inst/bmc_srst5_4 ));
  i2c0_slave_inst0_SLICE_151 \i2c0_slave_inst0/SLICE_151 ( 
    .D1(\i2c0_slave_inst0/current_state[4] ), 
    .C1(\i2c0_slave_inst0/rd_data_i_m[2] ), 
    .A1(\i2c0_slave_inst0/start_next_bit_1d ), 
    .D0(\i2c0_slave_inst0/sda_out_reg_13_iv_3 ), 
    .C0(\i2c0_slave_inst0/sda_out_reg_13_iv_0 ), 
    .B0(\i2c0_slave_inst0/rd_data_i_m[0] ), 
    .A0(\i2c0_slave_inst0/sda_out_reg_13_iv_5 ), 
    .DI0(\i2c0_slave_inst0/sda_out_reg_13_iv_i ), 
    .CE(\i2c0_slave_inst0/un1_sda_out_reg_2_sqmuxa_i ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/sda_out_reg_13_iv_i ), .Q0(bmc_sda_out), 
    .F1(\i2c0_slave_inst0/sda_out_reg_13_iv_0 ));
  bmc_reset_ctrl_inst_SLICE_152 \bmc_reset_ctrl_inst/SLICE_152 ( 
    .C1(\bmc_reset_ctrl_inst/srst_delay[6] ), 
    .B1(\bmc_reset_ctrl_inst/srst_delay[0] ), 
    .B0(\bmc_reset_ctrl_inst/bmc_srst5 ), .A0(bmc_srst_c), 
    .DI0(\bmc_reset_ctrl_inst/N_2656_0 ), .CLK(clock_c), 
    .F0(\bmc_reset_ctrl_inst/N_2656_0 ), .Q0(bmc_srst_c), 
    .F1(\bmc_reset_ctrl_inst/bmc_srst5_3 ));
  SLICE_157 SLICE_157( .D1(\flash_clk_cnt[2] ), .C1(CO0), 
    .B1(\flash_clk_cnt[3] ), .A1(\flash_clk_cnt[1] ), .D0(int_100ms_en), 
    .B0(flash_clk_cnt9), .A0(cpld_led_test_c), .DI0(flash_1s_RNO), 
    .CLK(clock_c), .F0(flash_1s_RNO), .Q0(cpld_led_test_c), 
    .F1(flash_clk_cnt9));
  server_power_control_cpu_pwr_control_SLICE_158 
    \server_power_control/cpu_pwr_control/SLICE_158 ( 
    .D1(\server_power_control/cpu_pwr_control/seq_cnt[10] ), 
    .C1(\server_power_control/cpu_pwr_control/seq_cnt[6] ), 
    .B1(\server_power_control/cpu_pwr_control/seq_cnt[9] ), 
    .A1(\server_power_control/cpu_pwr_control/seq_cnt[8] ), 
    .D0(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .C0(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .B0(\server_power_control/cpu_pwr_control/N_598 ), 
    .DI0(\server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state40_5_i_0 ), 
    .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] ), 
    .Q0(cpua_sys_reset_c), 
    .F1(\server_power_control/cpu_pwr_control/un1_current_state_4_i_o2 ));
  SLICE_159 SLICE_159( .D1(data_out_r_20_sn_N_44_mux), .C1(N_156), 
    .B1(data_out_r_20_sn_N_25), .A1(pg_vdd_5v_c), 
    .D0(\server_power_control/cpu_pwr_control/N_153 ), 
    .B0(data_out_r_20_sn_N_25), 
    .A0(\server_power_control/cpu_pwr_control/N_146 ), 
    .DI1(\data_out_r_20[3] ), .DI0(\data_out_r_20[0] ), .CE(wr_data_vld), 
    .CLK(clock_c), .F0(\data_out_r_20[0] ), .Q0(\data_out_r[0] ), 
    .F1(\data_out_r_20[3] ), .Q1(\data_out_r[3] ));
  SLICE_160 SLICE_160( .D1(data_out_r_20_sn_N_44_mux), 
    .C1(\server_power_control/cpu_pwr_control/N_99 ), 
    .B1(\server_power_control/cpu_pwr_control/data_out_r_20_sn_N_16 ), 
    .A1(pg_bp_5v_c), .D0(data_out_r_20_sn_N_22), 
    .C0(\server_power_control/cpu_pwr_control/N_128 ), 
    .B0(\server_power_control/cpu_pwr_control/N_137 ), 
    .DI0(\data_out_r_20[1] ), .M0(data_out_r_20_sn_N_25), .CE(wr_data_vld), 
    .CLK(clock_c), .OFX0(\data_out_r_20[1] ), .Q0(\data_out_r[1] ));
  SLICE_161 SLICE_161( 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_sn_N_16 ), 
    .C1(data_out_r_20_sn_N_44_mux), .B1(pg_5v_aux_c), 
    .A1(\server_power_control/cpu_pwr_control/data_out_r_20_sn_N_14 ), 
    .D0(data_out_r_20_sn_N_22), 
    .C0(\server_power_control/cpu_pwr_control/N_138 ), 
    .A0(\server_power_control/cpu_pwr_control/N_129 ), 
    .DI0(\data_out_r_20[2] ), .M0(data_out_r_20_sn_N_25), .CE(wr_data_vld), 
    .CLK(clock_c), .OFX0(\data_out_r_20[2] ), .Q0(\data_out_r[2] ));
  SLICE_162 SLICE_162( .D1(\server_power_control/N_441 ), 
    .C1(\server_power_control/N_78_2 ), .B1(data_out_r_20_sn_N_20), 
    .A1(\server_power_control/data_out_r_20_0_1[5] ), 
    .D0(\server_power_control/cpu_pwr_control/N_150 ), 
    .C0(data_out_r_20_sn_N_25), 
    .A0(\server_power_control/cpu_pwr_control/N_157 ), 
    .DI1(\data_out_r_20[5] ), .DI0(\data_out_r_20[4] ), .CE(wr_data_vld), 
    .CLK(clock_c), .F0(\data_out_r_20[4] ), .Q0(\data_out_r[4] ), 
    .F1(\data_out_r_20[5] ), .Q1(\data_out_r[5] ));
  SLICE_163 SLICE_163( .D1(\server_power_control/cpu_pwr_control/N_143 ), 
    .C1(\server_power_control/cpu_pwr_control/N_134 ), 
    .B1(data_out_r_20_sn_N_25), .A1(data_out_r_20_sn_N_22), .D0(N_142), 
    .C0(N_133), .B0(data_out_r_20_sn_N_25), .A0(data_out_r_20_sn_N_22), 
    .DI1(\data_out_r_20[7] ), .DI0(\data_out_r_20[6] ), .CE(wr_data_vld), 
    .CLK(clock_c), .F0(\data_out_r_20[6] ), .Q0(\data_out_r[6] ), 
    .F1(\data_out_r_20[7] ), .Q1(\data_out_r[7] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_181 \eeprom_i2c_inst/e2prom_i2c/SLICE_181 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/next_state21 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/un1_start_next_bit_1d ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_15 ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_start_next_bit_1d ), 
    .Q0(\eeprom_i2c_inst.e2prom_i2c.sda_out_en_i ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_202 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_182 \eeprom_i2c_inst/e2prom_i2c/SLICE_182 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[1] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/before_state_en_7[0] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/before_state_en_8[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/before_state[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/before_state_en_8[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/before_state_en_7[0] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/before_state[0] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[1] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[0] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/un31_NE ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[0] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/before_state[0] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[1] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/before_state[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_183 \eeprom_i2c_inst/e2prom_i2c/SLICE_183 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[3] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/before_state_en_7[0] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/before_state_en_8[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/before_state[3] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/before_state_en_8[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/before_state_en_7[0] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[2] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/before_state[2] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[3] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[2] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/un31_NE ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[2] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/before_state[2] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[3] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/before_state[3] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_184 \eeprom_i2c_inst/e2prom_i2c/SLICE_184 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/N_486 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_476_i_1 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/un31_NE ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_486 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/N_476_i ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/N_477_i ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_477_i ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_476_i ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_185 \eeprom_i2c_inst/e2prom_i2c/SLICE_185 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/N_252 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[3] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/un31_NE_1 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/next_state_1_0[3] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_475_i_1 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt_5_i_a2_0_0[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_486 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/un31_NE ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/N_475_i ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_475_i ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un31_NE ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_186 \eeprom_i2c_inst/e2prom_i2c/SLICE_186 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_199 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_225 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .B0(\eeprom_i2c_inst/i2c_start ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/N_151_i ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/current_state_ns[0] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/current_state_ns[0] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_151_i ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/current_state[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_187 \eeprom_i2c_inst/e2prom_i2c/SLICE_187 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/N_187 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/N_202 ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state_ns_i_1[2] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_198 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/next_state21 ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/N_155_i ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/N_153_i ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_153_i ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_155_i ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_188 \eeprom_i2c_inst/e2prom_i2c/SLICE_188 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/opcode ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/N_276 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_234_1 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[6] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_231 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_276 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/current_state_ns[6] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/current_state_ns[4] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/current_state_ns[4] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/current_state_ns[6] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/current_state[6] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_189 \eeprom_i2c_inst/e2prom_i2c/SLICE_189 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/N_231_1 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state_ns_a4_1_0[8] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_276 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_236 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[7] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/current_state_ns[8] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/current_state_ns[7] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/current_state_ns[7] ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/current_state[7] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/current_state_ns[8] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_190 \eeprom_i2c_inst/e2prom_i2c/SLICE_190 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/N_186 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_240 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[9] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/N_165_i ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/N_163_i ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_163_i ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/current_state[9] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_165_i ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_191 \eeprom_i2c_inst/e2prom_i2c/SLICE_191 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/N_45 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/N_140 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_45 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_140 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[0] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/N_12_i ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/N_264_i ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnte ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_264_i ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[0] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_12_i ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_192 \eeprom_i2c_inst/e2prom_i2c/SLICE_192 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/N_45 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/N_140 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_23 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[3] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_45 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_21 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_140 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[2] ), 
    .DI1(\eeprom_i2c_inst/e2prom_i2c/N_8_i ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/N_10_i ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnte ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_10_i ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[2] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_8_i ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[3] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_193 \eeprom_i2c_inst/e2prom_i2c/SLICE_193 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[3] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/start_stretch_en ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/N_23 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_en ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/N_45_i ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/un1_scl_out_en20_4_i_0 ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_45_i ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/e2prom_scl_out_en ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_140 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_194 \eeprom_i2c_inst/e2prom_i2c/SLICE_194 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .A0(\eeprom_i2c_inst/i2c_rw ), .DI0(\eeprom_i2c_inst/e2prom_i2c/opcode_3 ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/N_222_i ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/opcode_3 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/opcode ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_222_i ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_195 \eeprom_i2c_inst/e2prom_i2c/SLICE_195 
    ( .C0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean_i ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/rcv_ack_0_sqmuxa ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean_i ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/rcv_ack ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_197 \eeprom_i2c_inst/e2prom_i2c/SLICE_197 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[6] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det11_0_a2_1 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_RNIEK4J[3] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[2] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[7] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det11 ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det11 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/scl_falling ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det11_0_a2_1 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_203 \eeprom_i2c_inst/e2prom_i2c/SLICE_203 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[7] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[6] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[2] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_484 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[6] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[2] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[7] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det9 ), 
    .M1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det9 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/scl_rising ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_485 ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[0] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_208 \eeprom_i2c_inst/e2prom_i2c/SLICE_208 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/g0_2_1 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[4] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[8] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[3] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_485 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[0] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_RNIEK4J[3] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[1] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det12 ), 
    .M1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[0] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det12 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/state_cnt_RNIEK4J[3] ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_210 \eeprom_i2c_inst/e2prom_i2c/SLICE_210 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[0] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[6] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[7] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[2] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/state_cnt_RNIEK4J[3] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[1] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det10_0_a2_2 ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det10 ), 
    .M1(\eeprom_i2c_inst.e2prom_i2c.scl_in_dly[0] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det10 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/start_repeat ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det10_0_a2_2 ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_211 \eeprom_i2c_inst/e2prom_i2c/SLICE_211 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/g0_1_4 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[4] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[3] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[6] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_484 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[2] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[7] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det8 ), 
    .M1(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[1] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det8 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_484 ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[2] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_212 \eeprom_i2c_inst/e2prom_i2c/SLICE_212 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/start_stretch_en ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/start_stretch_en8 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_en8 ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/N_36_i ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_en8 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/start_stretch_en ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_36_i ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_213 \eeprom_i2c_inst/e2prom_i2c/SLICE_213 
    ( .D1(int_1ms_en), .C1(\eeprom_i2c_inst/i2c_busy ), 
    .B1(\eeprom_i2c_inst/i2c_start ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .D0(\eeprom_i2c_inst/i2c_busy ), .C0(\eeprom_i2c_inst/i2c_start ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_RNIP7CE1[2] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/N_126 ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_2_sqmuxa_i ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_126 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_2_sqmuxa_i ));
  eeprom_i2c_inst_SLICE_217 \eeprom_i2c_inst/SLICE_217 ( 
    .D1(\eeprom_i2c_inst/i2c_busy ), .C1(\eeprom_i2c_inst/i2c_wait ), 
    .B1(\eeprom_i2c_inst/i2c_busy_1d ), .A1(start_e2prom), 
    .D0(\eeprom_i2c_inst/i2c_busy ), .C0(\eeprom_i2c_inst/i2c_wait ), 
    .B0(\eeprom_i2c_inst/i2c_busy_1d ), .A0(start_e2prom), 
    .DI0(\eeprom_i2c_inst/i2c_start_4 ), .M1(\eeprom_i2c_inst/i2c_busy ), 
    .CLK(clock_c), .F0(\eeprom_i2c_inst/i2c_start_4 ), 
    .Q0(\eeprom_i2c_inst/i2c_start ), 
    .F1(\eeprom_i2c_inst/un1_i2c_start23_i_0 ), 
    .Q1(\eeprom_i2c_inst/i2c_busy_1d ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_227 \eeprom_i2c_inst/e2prom_i2c/SLICE_227 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/N_490 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[1] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[1] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/next_state21 ), 
    .DI0(\eeprom_i2c_inst/e2prom_i2c/rd_data_7_sqmuxa ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/rd_data_7_sqmuxa ), 
    .Q0(\eeprom_i2c_inst/rd_data_vld ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[4] ));
  server_power_control_SLICE_228 \server_power_control/SLICE_228 ( 
    .D1(\server_power_control/current_state[0] ), 
    .C1(\server_power_control/current_state[2] ), 
    .B1(\server_power_control/current_state[1] ), 
    .A1(\server_power_control/current_state[3] ), 
    .D0(\server_power_control/current_state[3] ), 
    .C0(\server_power_control/current_state[0] ), 
    .B0(\server_power_control/current_state[1] ), 
    .A0(\server_power_control/current_state[2] ), 
    .DI0(\server_power_control/N_43 ), 
    .CE(\server_power_control.un1_next_state105_11_i ), .CLK(clock_c), 
    .F0(\server_power_control/N_43 ), .Q0(en_bp_5v_c), 
    .F1(\server_power_control/un1_next_state115_1_0 ));
  server_power_control_cpu_pwr_control_SLICE_229 
    \server_power_control/cpu_pwr_control/SLICE_229 ( 
    .D1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .B1(en_vddc_a_c), 
    .D0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .C0(\server_power_control/cpu_pwr_control/N_618 ), .B0(en_vpp_a0_c), 
    .A0(\server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] ), 
    .DI0(\server_power_control/cpu_pwr_control/enable_reg_RNO[4] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state42_i_0 ), 
    .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/enable_reg_RNO[4] ), 
    .Q0(en_pcie_h_a_c), .F1(\server_power_control/cpu_pwr_control/N_618 ));
  server_power_control_cpu_pwr_control_SLICE_230 
    \server_power_control/cpu_pwr_control/SLICE_230 ( .C1(en_vdd_3v3_c), 
    .A1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .D0(\server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] ), 
    .C0(\server_power_control/cpu_pwr_control/N_626 ), .B0(en_vddc_a_c), 
    .A0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .DI0(\server_power_control/cpu_pwr_control/enable_reg_RNO[2] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state42_i_0 ), 
    .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/enable_reg_RNO[2] ), 
    .Q0(en_vdd_1v8_c), .F1(\server_power_control/cpu_pwr_control/N_626 ));
  server_power_control_cpu_pwr_control_SLICE_231 
    \server_power_control/cpu_pwr_control/SLICE_231 ( .D1(en_vdd_5v_c), 
    .C1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .D0(\server_power_control/cpu_pwr_control/N_624 ), 
    .C0(\server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] ), 
    .B0(en_vdd_1v8_c), 
    .A0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .DI0(\server_power_control/cpu_pwr_control/enable_reg_RNO[1] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state42_i_0 ), 
    .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/enable_reg_RNO[1] ), 
    .Q0(en_vdd_3v3_c), .F1(\server_power_control/cpu_pwr_control/N_624 ));
  server_power_control_cpu_pwr_control_SLICE_232 
    \server_power_control/cpu_pwr_control/SLICE_232 ( .D1(bmc_gpio51_c), 
    .C1(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .B1(\server_power_control/cpu_pwr_on_off ), 
    .A1(\server_power_control/cpu_pwr_control/N_16_2 ), .D0(en_vdd_3v3_c), 
    .C0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .A0(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .DI0(\server_power_control/cpu_pwr_control/enable_reg_RNO[0] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state42_i_0 ), 
    .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/enable_reg_RNO[0] ), 
    .Q0(en_vdd_5v_c), .F1(\server_power_control/cpu_pwr_control/N_16 ));
  server_power_control_cpu_pwr_control_SLICE_233 
    \server_power_control/cpu_pwr_control/SLICE_233 ( .C1(en_vdd_1v8_c), 
    .A1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .D0(\server_power_control/cpu_pwr_control/N_616 ), .C0(en_pcie_h_a_c), 
    .B0(\server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] ), 
    .A0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .DI0(\server_power_control/cpu_pwr_control/enable_reg_RNO[3] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state42_i_0 ), 
    .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/enable_reg_RNO[3] ), 
    .Q0(en_vddc_a_c), .F1(\server_power_control/cpu_pwr_control/N_616 ));
  server_power_control_cpu_pwr_control_SLICE_234 
    \server_power_control/cpu_pwr_control/SLICE_234 ( 
    .C1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .A1(en_vpp_a0_c), 
    .D0(\server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] ), 
    .C0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .B0(en_vtt_a0_c), .A0(\server_power_control/cpu_pwr_control/N_622 ), 
    .DI0(\server_power_control/cpu_pwr_control/enable_reg_RNO[6] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state42_i_0 ), 
    .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/enable_reg_RNO[6] ), 
    .Q0(en_vddq_a0_c), .F1(\server_power_control/cpu_pwr_control/N_622 ));
  server_power_control_cpu_pwr_control_SLICE_235 
    \server_power_control/cpu_pwr_control/SLICE_235 ( .D1(en_pcie_h_a_c), 
    .A1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .D0(en_vddq_a0_c), 
    .C0(\server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] ), 
    .B0(\server_power_control/cpu_pwr_control/N_620 ), 
    .A0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .DI0(\server_power_control/cpu_pwr_control/enable_reg_RNO[5] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state42_i_0 ), 
    .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/enable_reg_RNO[5] ), 
    .Q0(en_vpp_a0_c), .F1(\server_power_control/cpu_pwr_control/N_620 ));
  server_power_control_cpu_pwr_control_SLICE_236 
    \server_power_control/cpu_pwr_control/SLICE_236 ( 
    .D1(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .C1(\server_power_control/cpu_pwr_control/N_598 ), .A1(int_100ms_en), 
    .D0(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .C0(\server_power_control/cpu_pwr_control/N_598 ), 
    .B0(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .A0(en_vtt_a0_c), 
    .DI0(\server_power_control/cpu_pwr_control/enable_reg_RNO[8] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state42_i_0 ), 
    .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/enable_reg_RNO[8] ), 
    .Q0(en_vqps18_a_c), .F1(\server_power_control/cpu_pwr_control/N_603 ));
  server_power_control_cpu_pwr_control_SLICE_237 
    \server_power_control/cpu_pwr_control/SLICE_237 ( .C1(en_vddq_a0_c), 
    .A1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .D0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .C0(en_vqps18_a_c), 
    .B0(\server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] ), 
    .A0(\server_power_control/cpu_pwr_control/N_613 ), 
    .DI0(\server_power_control/cpu_pwr_control/enable_reg_RNO[7] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state42_i_0 ), 
    .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/enable_reg_RNO[7] ), 
    .Q0(en_vtt_a0_c), .F1(\server_power_control/cpu_pwr_control/N_613 ));
  SLICE_238 SLICE_238( .D1(CO0), .B1(\flash_clk_cnt[2] ), 
    .A1(\flash_clk_cnt[1] ), .D0(CO0), .C0(\flash_clk_cnt[3] ), 
    .B0(\flash_clk_cnt[2] ), .A0(\flash_clk_cnt[1] ), .DI1(SUM2), 
    .DI0(\flash_clk_cnt_3[1] ), .CE(int_100ms_en), .CLK(clock_c), 
    .F0(\flash_clk_cnt_3[1] ), .Q0(\flash_clk_cnt[1] ), .F1(SUM2), 
    .Q1(\flash_clk_cnt[2] ));
  SLICE_239 SLICE_239( .D0(\flash_clk_cnt[2] ), .C0(CO0), 
    .B0(\flash_clk_cnt[3] ), .A0(\flash_clk_cnt[1] ), 
    .DI0(\flash_clk_cnt_3[3] ), .CE(int_100ms_en), .CLK(clock_c), 
    .F0(\flash_clk_cnt_3[3] ), .Q0(\flash_clk_cnt[3] ));
  i2c0_slave_inst0_SLICE_240 \i2c0_slave_inst0/SLICE_240 ( 
    .D1(\i2c0_slave_inst0/current_state[2] ), 
    .B1(\i2c0_slave_inst0/current_state[3] ), 
    .A1(\i2c0_slave_inst0/current_state[6] ), 
    .D0(\i2c0_slave_inst0/current_state[5] ), 
    .B0(\i2c0_slave_inst0/current_state[1] ), 
    .A0(\i2c0_slave_inst0/current_state[3] ), .DI1(\i2c0_slave_inst0/N_108_i ), 
    .DI0(\i2c0_slave_inst0/N_107_i ), 
    .CE(\i2c0_slave_inst0/un1_stretch_en_2_NE ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/N_107_i ), .Q0(\i2c0_slave_inst0/before_state[0] ), 
    .F1(\i2c0_slave_inst0/N_108_i ), .Q1(\i2c0_slave_inst0/before_state[1] ));
  i2c0_slave_inst0_SLICE_241 \i2c0_slave_inst0/SLICE_241 ( 
    .D1(\i2c0_slave_inst0/current_state[5] ), 
    .C1(\i2c0_slave_inst0/current_state[6] ), 
    .B1(\i2c0_slave_inst0/current_state[4] ), 
    .D0(\i2c0_slave_inst0/current_state[5] ), 
    .C0(\i2c0_slave_inst0/current_state[6] ), 
    .B0(\i2c0_slave_inst0/current_state[4] ), .DI0(\i2c0_slave_inst0/N_109_i ), 
    .CE(\i2c0_slave_inst0/un1_stretch_en_2_NE ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/N_109_i ), .Q0(\i2c0_slave_inst0/before_state[2] ), 
    .F1(\i2c0_slave_inst0/un1_stretch_en_i_a2[2] ));
  i2c0_slave_inst0_SLICE_242 \i2c0_slave_inst0/SLICE_242 ( 
    .D1(\i2c0_slave_inst0/bit_cnt[0] ), .C1(\i2c0_slave_inst0/start_next_bit ), 
    .B1(\i2c0_slave_inst0/un1_stretch_en_2_NE ), 
    .A1(\i2c0_slave_inst0/bit_cnt[1] ), .C0(\i2c0_slave_inst0/start_next_bit ), 
    .B0(\i2c0_slave_inst0/un1_stretch_en_2_NE ), 
    .A0(\i2c0_slave_inst0/bit_cnt[0] ), .DI1(\i2c0_slave_inst0/bit_cnt_3[1] ), 
    .DI0(\i2c0_slave_inst0/bit_cnt_3[0] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/bit_cnt_3[0] ), .Q0(\i2c0_slave_inst0/bit_cnt[0] ), 
    .F1(\i2c0_slave_inst0/bit_cnt_3[1] ), .Q1(\i2c0_slave_inst0/bit_cnt[1] ));
  i2c0_slave_inst0_SLICE_243 \i2c0_slave_inst0/SLICE_243 ( 
    .D1(\i2c0_slave_inst0/un1_stretch_en_2_0 ), 
    .C1(\i2c0_slave_inst0/un1_stretch_en_2_1 ), .B1(\i2c0_slave_inst0/N_159 ), 
    .A1(\i2c0_slave_inst0/un1_stretch_en_i_a2[2] ), 
    .D0(\i2c0_slave_inst0/bit_cnt[1] ), 
    .C0(\i2c0_slave_inst0/un1_stretch_en_2_NE ), .B0(\i2c0_slave_inst0/CO0 ), 
    .A0(\i2c0_slave_inst0/bit_cnt[2] ), .DI0(\i2c0_slave_inst0/bit_cnt_3[2] ), 
    .CLK(clock_c), .F0(\i2c0_slave_inst0/bit_cnt_3[2] ), 
    .Q0(\i2c0_slave_inst0/bit_cnt[2] ), 
    .F1(\i2c0_slave_inst0/un1_stretch_en_2_NE ));
  i2c0_slave_inst0_SLICE_244 \i2c0_slave_inst0/SLICE_244 ( 
    .D1(\i2c0_slave_inst0/current_state_ns_i_a5_0[1] ), 
    .C1(\i2c0_slave_inst0/N_142 ), 
    .B1(\i2c0_slave_inst0/current_state_ns_i_0[1] ), 
    .A1(\i2c0_slave_inst0/current_state[1] ), 
    .D0(\i2c0_slave_inst0/next_state16_NE ), .C0(\i2c0_slave_inst0/N_142 ), 
    .B0(\i2c0_slave_inst0/current_state[1] ), 
    .A0(\i2c0_slave_inst0/current_state_ns_0_0_1[0] ), 
    .DI1(\i2c0_slave_inst0/N_94_i ), 
    .DI0(\i2c0_slave_inst0/current_state_ns[0] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/current_state_ns[0] ), 
    .Q0(\i2c0_slave_inst0/current_state[0] ), .F1(\i2c0_slave_inst0/N_94_i ), 
    .Q1(\i2c0_slave_inst0/current_state[1] ));
  i2c0_slave_inst0_SLICE_245 \i2c0_slave_inst0/SLICE_245 ( 
    .D1(\i2c0_slave_inst0/N_413 ), .C1(\i2c0_slave_inst0/N_114 ), 
    .B1(\i2c0_slave_inst0/N_421 ), .D0(\i2c0_slave_inst0/start_next_bit ), 
    .C0(\i2c0_slave_inst0/N_114 ), .B0(\i2c0_slave_inst0/N_406 ), 
    .A0(\i2c0_slave_inst0/N_70 ), .DI1(\i2c0_slave_inst0/N_98_i ), 
    .DI0(\i2c0_slave_inst0/N_96_i ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/N_96_i ), .Q0(\i2c0_slave_inst0/current_state[2] ), 
    .F1(\i2c0_slave_inst0/N_98_i ), .Q1(\i2c0_slave_inst0/current_state[3] ));
  i2c0_slave_inst0_SLICE_246 \i2c0_slave_inst0/SLICE_246 ( 
    .D1(\i2c0_slave_inst0/current_state_ns_i_0[5] ), 
    .C1(\i2c0_slave_inst0/N_140 ), .B1(\i2c0_slave_inst0/N_137 ), 
    .A1(\i2c0_slave_inst0/N_114 ), 
    .D0(\i2c0_slave_inst0/current_state_ns_i_a5_0[4] ), 
    .C0(\i2c0_slave_inst0/next_state16_NE ), 
    .B0(\i2c0_slave_inst0/current_state[1] ), 
    .A0(\i2c0_slave_inst0/current_state_ns_i_1[4] ), 
    .DI1(\i2c0_slave_inst0/N_102_i ), .DI0(\i2c0_slave_inst0/N_100_i ), 
    .CLK(clock_c), .F0(\i2c0_slave_inst0/N_100_i ), 
    .Q0(\i2c0_slave_inst0/current_state[4] ), .F1(\i2c0_slave_inst0/N_102_i ), 
    .Q1(\i2c0_slave_inst0/current_state[5] ));
  i2c0_slave_inst0_SLICE_247 \i2c0_slave_inst0/SLICE_247 ( 
    .D1(\i2c0_slave_inst0/current_state[6] ), 
    .C1(\i2c0_slave_inst0/before_state[0] ), 
    .B1(\i2c0_slave_inst0/before_state[1] ), 
    .A1(\i2c0_slave_inst0/before_state[2] ), .D0(\i2c0_slave_inst0/N_111 ), 
    .C0(\i2c0_slave_inst0/N_127 ), .B0(\i2c0_slave_inst0/N_114 ), 
    .A0(\i2c0_slave_inst0/N_141 ), .DI0(\i2c0_slave_inst0/N_104_i ), 
    .CLK(clock_c), .F0(\i2c0_slave_inst0/N_104_i ), 
    .Q0(\i2c0_slave_inst0/current_state[6] ), .F1(\i2c0_slave_inst0/N_141 ));
  i2c0_slave_inst0_SLICE_248 \i2c0_slave_inst0/SLICE_248 ( 
    .D1(\i2c0_slave_inst0/start_en ), 
    .C1(\i2c0_slave_inst0/scl_in_clean_dly[0] ), 
    .B1(\i2c0_slave_inst0/scl_in_clean_dly[1] ), 
    .A1(\i2c0_slave_inst0/current_state[0] ), .D0(\i2c0_slave_inst0/start_en ), 
    .C0(\i2c0_slave_inst0/scl_in_clean_dly[0] ), 
    .B0(\i2c0_slave_inst0/scl_in_clean_dly[1] ), 
    .A0(\i2c0_slave_inst0/current_state[0] ), 
    .DI0(\i2c0_slave_inst0/delay_cnt16 ), .CE(\i2c0_slave_inst0/N_54 ), 
    .CLK(clock_c), .F0(\i2c0_slave_inst0/delay_cnt16 ), 
    .Q0(\i2c0_slave_inst0/delay_cnt_en ), .F1(\i2c0_slave_inst0/delay_cnt ));
  i2c0_slave_inst0_SLICE_256 \i2c0_slave_inst0/SLICE_256 ( 
    .D1(\i2c0_slave_inst0/time_out_en ), .B1(\i2c0_slave_inst0/N_416 ), 
    .A1(\i2c0_slave_inst0/start_next_bit ), 
    .C0(\i2c0_slave_inst0/sda_in_clean ), 
    .DI0(\i2c0_slave_inst0/sda_in_clean_i ), 
    .CE(\i2c0_slave_inst0/rcv_ack_0_sqmuxa ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/sda_in_clean_i ), .Q0(\i2c0_slave_inst0/rcv_ack ), 
    .F1(\i2c0_slave_inst0/un1_start_2_0 ));
  i2c0_slave_inst0_SLICE_275 \i2c0_slave_inst0/SLICE_275 ( .D1(int_1ms_en), 
    .C1(\i2c0_slave_inst0/start ), .B1(\i2c0_slave_inst0/timeout_cnt_en ), 
    .A1(\i2c0_slave_inst0/N_416 ), .D0(\i2c0_slave_inst0/sda_in_clean_dly[0] ), 
    .C0(\i2c0_slave_inst0/sda_in_clean ), .B0(\i2c0_slave_inst0/scl_in_clean ), 
    .DI0(\i2c0_slave_inst0/start ), .CE(\i2c0_slave_inst0/un1_start_2_0 ), 
    .CLK(clock_c), .F0(\i2c0_slave_inst0/start ), 
    .Q0(\i2c0_slave_inst0/start_en ), .F1(\i2c0_slave_inst0/un1_start_3_i ));
  i2c0_slave_inst0_SLICE_276 \i2c0_slave_inst0/SLICE_276 ( 
    .D1(\i2c0_slave_inst0/scl_in_clean_dly[1] ), 
    .C1(\i2c0_slave_inst0/start_en ), 
    .B1(\i2c0_slave_inst0/scl_in_clean_dly[0] ), 
    .A1(\i2c0_slave_inst0/current_state[0] ), 
    .D0(\i2c0_slave_inst0/un1_delay_cnt_3_4 ), 
    .C0(\i2c0_slave_inst0/un1_delay_cnt15_1 ), 
    .B0(\i2c0_slave_inst0/un1_delay_cnt_3_5 ), 
    .A0(\i2c0_slave_inst0/delay_cnt_en ), 
    .DI0(\i2c0_slave_inst0/delay_cnt_en_1_sqmuxa ), 
    .M1(\i2c0_slave_inst0/scl_in_clean ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/delay_cnt_en_1_sqmuxa ), 
    .Q0(\i2c0_slave_inst0/start_next_bit ), 
    .F1(\i2c0_slave_inst0/un1_delay_cnt15_1 ), 
    .Q1(\i2c0_slave_inst0/scl_in_clean_dly[0] ));
  i2c0_slave_inst0_SLICE_278 \i2c0_slave_inst0/SLICE_278 ( 
    .D1(\i2c0_slave_inst0/timeout_cnt[0] ), 
    .C1(\i2c0_slave_inst0/timeout_cnt[2] ), 
    .B1(\i2c0_slave_inst0/timeout_cnt[3] ), 
    .A1(\i2c0_slave_inst0/timeout_cnt[4] ), 
    .D0(\i2c0_slave_inst0/timeout_cnt_en ), .C0(\i2c0_slave_inst0/N_234_1 ), 
    .B0(\i2c0_slave_inst0/N_416 ), .A0(\i2c0_slave_inst0/timeout_cnt[1] ), 
    .DI0(\i2c0_slave_inst0/N_234_i ), .CE(\i2c0_slave_inst0/un1_start_3_i ), 
    .CLK(clock_c), .F0(\i2c0_slave_inst0/N_234_i ), 
    .Q0(\i2c0_slave_inst0/time_out_en ), .F1(\i2c0_slave_inst0/N_234_1 ));
  timer_inst_SLICE_280 \timer_inst/SLICE_280 ( 
    .C1(\timer_inst/int_100ms_cnt11_11 ), .B1(\timer_inst/int_100ms_cnt[11] ), 
    .A1(\timer_inst/int_100ms_cnt[0] ), .D0(\timer_inst/int_100ms_cnt11_18 ), 
    .C0(\timer_inst/int_100ms_cnt11_16 ), .B0(\timer_inst/int_100ms_cnt11_13 ), 
    .A0(\timer_inst/int_100ms_cnt11_12 ), .DI0(\timer_inst/int_100ms_cnt11 ), 
    .CE(\timer_inst/rst_n_dly[1] ), .CLK(clock_c), 
    .F0(\timer_inst/int_100ms_cnt11 ), .Q0(int_100ms_en), 
    .F1(\timer_inst/int_100ms_cnt11_16 ));
  timer_inst_SLICE_281 \timer_inst/SLICE_281 ( 
    .C1(\timer_inst/int_1ms_cnt[13] ), .B1(\timer_inst/int_1ms_cnt[8] ), 
    .A1(\timer_inst/int_1ms_cnt[0] ), .D0(\timer_inst/int_1ms_cnt11_9 ), 
    .C0(\timer_inst/int_1ms_cnt11_7 ), .B0(\timer_inst/int_1ms_cnt11_8 ), 
    .A0(\timer_inst/int_1ms_cnt11_10 ), .DI0(\timer_inst/int_1ms_cnt11 ), 
    .CE(\timer_inst/rst_n_dly[1] ), .CLK(clock_c), 
    .F0(\timer_inst/int_1ms_cnt11 ), .Q0(int_1ms_en), 
    .F1(\timer_inst/int_1ms_cnt11_7 ));
  server_power_control_switch_reset_control_SLICE_282 
    \server_power_control/switch_reset_control/SLICE_282 ( .D1(int_1ms_en), 
    .C1(\server_power_control/switch_reset_control/current_state[1] ), 
    .D0(\server_power_control/switch_reset_control/current_state[0] ), 
    .C0(\server_power_control/switch_reset_control/current_state[1] ), 
    .DI0(\server_power_control/switch_reset_control/N_16_i ), 
    .CE(\server_power_control/switch_reset_control/current_state[2] ), 
    .CLK(clock_c), .F0(\server_power_control/switch_reset_control/N_16_i ), 
    .Q0(pcie_swa_sys_rst_c), 
    .F1(\server_power_control/switch_reset_control/N_32_i ));
  usb_reset_ctrl_inst_SLICE_283 \usb_reset_ctrl_inst/SLICE_283 ( 
    .D1(\usb_reset_ctrl_inst/current_state[2] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[5] ), 
    .B1(\usb_reset_ctrl_inst/urst_delay[11] ), 
    .A1(\usb_reset_ctrl_inst/current_state[1] ), 
    .D0(\usb_reset_ctrl_inst/current_state[0] ), 
    .C0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_17 ), 
    .B0(\usb_reset_ctrl_inst/usb_prst_1_0_35_i_0_a2_0_2 ), 
    .A0(\usb_reset_ctrl_inst/current_state[1] ), 
    .DI0(\usb_reset_ctrl_inst/N_539_i ), 
    .CE(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0 ), .CLK(clock_c), 
    .F0(\usb_reset_ctrl_inst/N_539_i ), .Q0(pcie_usb0_rst_c), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_7_4 ));
  por_SLICE_284 \por/SLICE_284 ( .DI0(\por/VCC ), .M1(\por/rst_btn_dly[0] ), 
    .CLK(clock_c), .F0(\por/VCC ), .Q0(\por/rst_btn_dly[0] ), 
    .Q1(\por/rst_btn_dly[1] ));
  server_power_control_SLICE_303 \server_power_control/SLICE_303 ( 
    .D1(\server_power_control/next_state112 ), 
    .B1(\server_power_control/un1_cpu_dly_1_cry_1_0_S0 ), 
    .A1(\server_power_control/psu_on_off17 ), 
    .D0(\server_power_control/next_state112 ), 
    .B0(\server_power_control/psu_on_off17 ), 
    .A0(\server_power_control/un1_cpu_dly_1_cry_0_0_S1 ), 
    .DI1(\server_power_control/cpu_dly_4[1] ), 
    .DI0(\server_power_control/cpu_dly_4[0] ), .CLK(clock_c), 
    .F0(\server_power_control/cpu_dly_4[0] ), 
    .Q0(\server_power_control/cpu_dly[0] ), 
    .F1(\server_power_control/cpu_dly_4[1] ), 
    .Q1(\server_power_control/cpu_dly[1] ));
  server_power_control_SLICE_304 \server_power_control/SLICE_304 ( 
    .D1(\server_power_control/psu_on_off17 ), 
    .C1(\server_power_control/un1_cpu_dly_1_cry_5_0_S0 ), 
    .A1(\server_power_control/next_state112 ), 
    .D0(\server_power_control/un1_cpu_dly_1_cry_3_0_S1 ), 
    .C0(\server_power_control/psu_on_off17 ), 
    .A0(\server_power_control/next_state112 ), 
    .DI1(\server_power_control/cpu_dly_4[5] ), 
    .DI0(\server_power_control/cpu_dly_4[4] ), .CLK(clock_c), 
    .F0(\server_power_control/cpu_dly_4[4] ), 
    .Q0(\server_power_control/cpu_dly[4] ), 
    .F1(\server_power_control/cpu_dly_4[5] ), 
    .Q1(\server_power_control/cpu_dly[5] ));
  server_power_control_SLICE_305 \server_power_control/SLICE_305 ( 
    .D1(\server_power_control/current_state[0] ), 
    .B1(\server_power_control/current_state[1] ), 
    .A1(\server_power_control/current_state[3] ), 
    .D0(\server_power_control/current_state[1] ), 
    .C0(\server_power_control/current_state[3] ), 
    .B0(\server_power_control/current_state[0] ), 
    .A0(\server_power_control/psu_on_off17 ), 
    .DI0(\server_power_control/N_85_i ), 
    .CE(\server_power_control/un1_next_state105_10 ), .CLK(clock_c), 
    .F0(\server_power_control/N_85_i ), 
    .Q0(\server_power_control/cpu_off_done ), 
    .F1(\server_power_control/un1_psu_on_off44 ));
  server_power_control_cpu_pwr_control_SLICE_308 
    \server_power_control/cpu_pwr_control/SLICE_308 ( 
    .D1(\server_power_control/cpu_pwr_control/pwr_all_on ), 
    .C1(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .B1(\server_power_control/cpu_pwr_on_off ), 
    .A1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .D0(\server_power_control/cpu_pwr_control/N_16 ), 
    .C0(\server_power_control/cpu_pwr_control/reset_done ), 
    .B0(\server_power_control/cpu_pwr_control/next_state_1_0_1[0] ), 
    .A0(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .DI1(\server_power_control/cpu_pwr_control/N_10_i ), 
    .DI0(\server_power_control/cpu_pwr_control/next_state_1[0] ), 
    .CLK(\server_power_control/cpu_pwr_control/current_state_RNI16S31[1] ), 
    .F0(\server_power_control/cpu_pwr_control/next_state_1[0] ), 
    .Q0(\server_power_control/cpu_pwr_control/next_state[0] ), 
    .F1(\server_power_control/cpu_pwr_control/N_10_i ), 
    .Q1(\server_power_control/cpu_pwr_control/next_state[1] ));
  server_power_control_cpu_pwr_control_SLICE_309 
    \server_power_control/cpu_pwr_control/SLICE_309 ( .D1(en_vddq_a0_c), 
    .C1(en_vtt_a0_c), 
    .B1(\server_power_control/cpu_pwr_control/next_state36_0 ), 
    .A1(en_pcie_h_a_c), 
    .D0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .C0(\server_power_control/cpu_pwr_control/next_state36_6 ), 
    .B0(\server_power_control/cpu_pwr_control/N_18 ), 
    .A0(\server_power_control/cpu_pwr_control/next_state36_5 ), 
    .DI0(\server_power_control/cpu_pwr_control/next_state_1[2] ), 
    .CLK(\server_power_control/cpu_pwr_control/current_state_RNI16S31[1] ), 
    .F0(\server_power_control/cpu_pwr_control/next_state_1[2] ), 
    .Q0(\server_power_control/cpu_pwr_control/next_state[2] ), 
    .F1(\server_power_control/cpu_pwr_control/next_state36_6 ));
  server_power_control_cpu_pwr_control_SLICE_311 
    \server_power_control/cpu_pwr_control/SLICE_311 ( 
    .D1(\server_power_control/cpu_pwr_control/seq_cnt[5] ), 
    .C1(\server_power_control/cpu_pwr_control/seq_cnt[7] ), 
    .D0(\server_power_control/cpu_pwr_control/seq_cnt[5] ), 
    .B0(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .DI0(\server_power_control/cpu_pwr_control/N_163_i ), 
    .CE(\server_power_control/cpu_pwr_control/un1_current_state_4_i_0 ), 
    .CLK(clock_c), .F0(\server_power_control/cpu_pwr_control/N_163_i ), 
    .Q0(\server_power_control/cpu_pwr_control/reset_done ), 
    .F1(\server_power_control/cpu_pwr_control/enable_reg_6_iv_0_5_o2_0_0 ));
  server_power_control_SLICE_315 \server_power_control/SLICE_315 ( 
    .D1(\server_power_control/current_state[3] ), .B1(bp_ncp_gok_c), 
    .D0(ncp0_gok_c), 
    .C0(\server_power_control/un1_efuse_dly_0_sqmuxa_1_0_a3_1_0 ), 
    .B0(\server_power_control/current_state[1] ), 
    .A0(\server_power_control/current_state[0] ), 
    .DI0(\server_power_control/N_63 ), 
    .CE(\server_power_control/un1_efuse_dly_0_sqmuxa_2 ), .CLK(clock_c), 
    .F0(\server_power_control/N_63 ), .Q0(\server_power_control/efuse_done ), 
    .F1(\server_power_control/un1_efuse_dly_0_sqmuxa_1_0_a3_1_0 ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_316 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_316 ( 
    .C0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state[1] )
    , 
    .DI0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state_i[1] )
    , .CLK(clock_c), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state_i[1] )
    , .Q0(\server_power_control/is_normal_reboot ));
  server_power_control_power_signal_detect_inst_SLICE_317 
    \server_power_control/power_signal_detect_inst/SLICE_317 ( 
    .C1(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .A1(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .D0(\server_power_control/power_signal_detect_inst/is_pwr_force_off12 ), 
    .C0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .A0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .DI0(\server_power_control/power_signal_detect_inst/N_57_i ), 
    .CE(\server_power_control/power_signal_detect_inst/un1_current_state_6_i ), 
    .CLK(clock_c), .F0(\server_power_control/power_signal_detect_inst/N_57_i ), 
    .Q0(\server_power_control/is_pwr_force_off ), 
    .F1(\server_power_control/power_signal_detect_inst/debounce_cnt ));
  server_power_control_power_signal_detect_inst_SLICE_318 
    \server_power_control/power_signal_detect_inst/SLICE_318 ( 
    .D1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[3] ), 
    .C1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[2] ), 
    .B1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[1] ), 
    .A1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[0] ), 
    .C0(\server_power_control/power_signal_detect_inst/next_state52 ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .DI0(\server_power_control/power_signal_detect_inst/N_49_i ), 
    .CE(\server_power_control/power_signal_detect_inst/un1_next_state64_5_i ), 
    .CLK(clock_c), .F0(\server_power_control/power_signal_detect_inst/N_49_i ), 
    .Q0(\server_power_control/is_pwr_on_off ), 
    .F1(\server_power_control/power_signal_detect_inst/next_state52 ));
  server_power_control_SLICE_319 \server_power_control/SLICE_319 ( 
    .B0(\server_power_control/current_state[2] ), 
    .DI0(\server_power_control/current_state_i[2] ), 
    .CE(\server_power_control/un1_is_reboot_0_sqmuxa ), .CLK(clock_c), 
    .F0(\server_power_control/current_state_i[2] ), 
    .Q0(\server_power_control/is_reboot ));
  server_power_control_SLICE_320 \server_power_control/SLICE_320 ( 
    .D1(\server_power_control/current_state[3] ), 
    .C1(\server_power_control/N_22 ), .B1(\server_power_control/N_17 ), 
    .A1(\server_power_control/current_state[1] ), 
    .D0(\server_power_control/current_state[3] ), 
    .C0(\server_power_control/i11_mux ), .B0(\server_power_control/N_13 ), 
    .DI0(\server_power_control/next_state_1[0] ), 
    .M0(\server_power_control/current_state[2] ), 
    .CLK(\server_power_control/un1_next_state115_1_0 ), 
    .OFX0(\server_power_control/next_state_1[0] ), 
    .Q0(\server_power_control/next_state[0] ));
  server_power_control_SLICE_321 \server_power_control/SLICE_321 ( 
    .D1(\server_power_control/N_56_mux ), 
    .C1(\server_power_control/current_state[2] ), 
    .B1(\server_power_control/next_state110_1 ), 
    .A1(\server_power_control/N_8 ), .D0(\server_power_control/i15_mux_1 ), 
    .C0(\server_power_control/current_state[2] ), 
    .B0(\server_power_control/current_state[3] ), 
    .A0(\server_power_control/N_38 ), .DI1(\server_power_control/N_45_i ), 
    .DI0(\server_power_control/next_state_1[1] ), 
    .CLK(\server_power_control/un1_next_state115_1_0 ), 
    .F0(\server_power_control/next_state_1[1] ), 
    .Q0(\server_power_control/next_state[1] ), 
    .F1(\server_power_control/N_45_i ), 
    .Q1(\server_power_control/next_state[2] ));
  server_power_control_SLICE_322 \server_power_control/SLICE_322 ( 
    .D1(\server_power_control/current_state[1] ), 
    .B1(\server_power_control/current_state[3] ), 
    .D0(\server_power_control/N_56_mux ), 
    .C0(\server_power_control/i15_mux_2 ), 
    .B0(\server_power_control/next_state110_1 ), 
    .A0(\server_power_control/current_state[2] ), 
    .DI0(\server_power_control/next_state_1[3] ), 
    .CLK(\server_power_control/un1_next_state115_1_0 ), 
    .F0(\server_power_control/next_state_1[3] ), 
    .Q0(\server_power_control/next_state[3] ), 
    .F1(\server_power_control/next_state110_1 ));
  server_power_control_power_signal_detect_inst_SLICE_324 
    \server_power_control/power_signal_detect_inst/SLICE_324 ( 
    .D1(\server_power_control/power_signal_detect_inst/force_sig_cnt[1] ), 
    .C1(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B1(\server_power_control/power_signal_detect_inst/force_sig_cnt[0] ), 
    .A1(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .C0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/force_sig_cnt[0] ), 
    .A0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .DI1(\server_power_control/power_signal_detect_inst/N_637_i ), 
    .DI0(\server_power_control/power_signal_detect_inst/N_649 ), 
    .CE(\server_power_control/power_signal_detect_inst/force_sig_cnte ), 
    .CLK(clock_c), .F0(\server_power_control/power_signal_detect_inst/N_649 ), 
    .Q0(\server_power_control/power_signal_detect_inst/force_sig_cnt[0] ), 
    .F1(\server_power_control/power_signal_detect_inst/N_637_i ), 
    .Q1(\server_power_control/power_signal_detect_inst/force_sig_cnt[1] ));
  server_power_control_power_signal_detect_inst_SLICE_325 
    \server_power_control/power_signal_detect_inst/SLICE_325 ( 
    .D1(\server_power_control/power_signal_detect_inst/force_sig_cnt[2] ), 
    .C1(\server_power_control/power_signal_detect_inst/next_state69_1 ), 
    .B1(\server_power_control/power_signal_detect_inst/N_640 ), 
    .A1(\server_power_control/power_signal_detect_inst/force_sig_cnt[3] ), 
    .D0(\server_power_control/power_signal_detect_inst/force_sig_cnt[2] ), 
    .C0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/N_640 ), 
    .A0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .DI1(\server_power_control/power_signal_detect_inst/N_4_i ), 
    .DI0(\server_power_control/power_signal_detect_inst/N_636_i ), 
    .CE(\server_power_control/power_signal_detect_inst/force_sig_cnte ), 
    .CLK(clock_c), 
    .F0(\server_power_control/power_signal_detect_inst/N_636_i ), 
    .Q0(\server_power_control/power_signal_detect_inst/force_sig_cnt[2] ), 
    .F1(\server_power_control/power_signal_detect_inst/N_4_i ), 
    .Q1(\server_power_control/power_signal_detect_inst/force_sig_cnt[3] ));
  server_power_control_power_signal_detect_inst_SLICE_327 
    \server_power_control/power_signal_detect_inst/SLICE_327 ( 
    .D1(\server_power_control/power_signal_detect_inst/N_29 ), 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/N_34_mux ), 
    .D0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .C0(\server_power_control/power_signal_detect_inst/N_12 ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/N_9 ), 
    .DI1(\server_power_control/power_signal_detect_inst/N_32_i ), 
    .DI0(\server_power_control/power_signal_detect_inst/next_state_1[0] ), 
    .CLK(\server_power_control/power_signal_detect_inst/un1_next_state69 ), 
    .F0(\server_power_control/power_signal_detect_inst/next_state_1[0] ), 
    .Q0(\server_power_control/power_signal_detect_inst/next_state[0] ), 
    .F1(\server_power_control/power_signal_detect_inst/N_32_i ), 
    .Q1(\server_power_control/power_signal_detect_inst/next_state[2] ));
  server_power_control_power_signal_detect_inst_SLICE_328 
    \server_power_control/power_signal_detect_inst/SLICE_328 ( 
    .D1(\server_power_control/power_signal_detect_inst/N_21 ), 
    .C1(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B1(\server_power_control/power_signal_detect_inst/next_state52 ), 
    .A1(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .D0(\server_power_control/power_signal_detect_inst/N_33_mux ), 
    .C0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/pwr_btn_pressed ), 
    .A0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .DI0(\server_power_control/power_signal_detect_inst/next_state_1[1] ), 
    .M0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .CLK(\server_power_control/power_signal_detect_inst/un1_next_state69 ), 
    .OFX0(\server_power_control/power_signal_detect_inst/next_state_1[1] ), 
    .Q0(\server_power_control/power_signal_detect_inst/next_state[1] ));
  server_power_control_power_signal_detect_inst_SLICE_329 
    \server_power_control/power_signal_detect_inst/SLICE_329 ( 
    .D1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[0] ), 
    .C1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[1] ), 
    .C0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/normal_sig_cnt[0] ), 
    .DI1(\server_power_control/power_signal_detect_inst/normal_sig_cnt_n1 ), 
    .DI0(\server_power_control/power_signal_detect_inst/N_262_i ), 
    .CE(\server_power_control/power_signal_detect_inst/normal_sig_cnte ), 
    .CLK(clock_c), 
    .F0(\server_power_control/power_signal_detect_inst/N_262_i ), 
    .Q0(\server_power_control/power_signal_detect_inst/normal_sig_cnt[0] ), 
    .F1(\server_power_control/power_signal_detect_inst/normal_sig_cnt_n1 ), 
    .Q1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[1] ));
  server_power_control_power_signal_detect_inst_SLICE_330 
    \server_power_control/power_signal_detect_inst/SLICE_330 ( 
    .D1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[2] ), 
    .C1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .B1(\server_power_control/power_signal_detect_inst/normal_sig_cnt_c1 ), 
    .A1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[3] ), 
    .D0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .C0(\server_power_control/power_signal_detect_inst/normal_sig_cnt[1] ), 
    .B0(\server_power_control/power_signal_detect_inst/normal_sig_cnt[0] ), 
    .A0(\server_power_control/power_signal_detect_inst/normal_sig_cnt[2] ), 
    .DI1(\server_power_control/power_signal_detect_inst/normal_sig_cnt_n3 ), 
    .DI0(\server_power_control/power_signal_detect_inst/normal_sig_cnt_n2 ), 
    .CE(\server_power_control/power_signal_detect_inst/normal_sig_cnte ), 
    .CLK(clock_c), 
    .F0(\server_power_control/power_signal_detect_inst/normal_sig_cnt_n2 ), 
    .Q0(\server_power_control/power_signal_detect_inst/normal_sig_cnt[2] ), 
    .F1(\server_power_control/power_signal_detect_inst/normal_sig_cnt_n3 ), 
    .Q1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[3] ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_331 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_331 ( 
    .D1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state[0] )
    , 
    .C1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state[1] )
    , .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/N_31_7 ), 
    .C0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state[1] )
    , .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec ), 
    .DI1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/N_28_i ), 
    .DI0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state_ns[0] )
    , .CLK(clock_c), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state_ns[0] )
    , 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state[0] )
    , .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/N_28_i ), 
    .Q1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state[1] )
    );
  SLICE_332 SLICE_332( .C0(cpld_extrst_c), .B0(bmc_gpio49_c), 
    .DI0(\server_power_control/power_signal_detect_inst/rst_ext_in ), 
    .CLK(clock_c), 
    .F0(\server_power_control/power_signal_detect_inst/rst_ext_in ), 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst ), 
    .F1(GND));
  SLICE_333 SLICE_333( .D0(\timer_inst/int_100ms_cnt[14] ), 
    .C0(\timer_inst/int_100ms_cnt[12] ), .B0(\timer_inst/int_100ms_cnt[20] ), 
    .A0(\timer_inst/int_100ms_cnt[19] ), 
    .M0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst ), 
    .CLK(clock_c), .F0(\timer_inst/int_100ms_cnt11_15 ), 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst_pre ), 
    .F1(VCC));
  SLICE_334 SLICE_334( .D1(\timer_inst/int_1ms_cnt[5] ), 
    .C1(\timer_inst/int_1ms_cnt[1] ), .B1(\timer_inst/int_1ms_cnt[2] ), 
    .A1(\timer_inst/int_1ms_cnt[7] ), .D0(\i2c0_slave_inst0/next_state16_5 ), 
    .C0(\i2c0_slave_inst0/next_state16_6_i ), 
    .B0(\i2c0_slave_inst0/next_state16_3 ), 
    .A0(\i2c0_slave_inst0/next_state16_4_i ), 
    .M0(\server_power_control/power_signal_detect_inst/rst_ext_in ), 
    .CE(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5 ), 
    .CLK(clock_c), .F0(\i2c0_slave_inst0/next_state16_NE_4 ), 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec ), 
    .F1(\timer_inst/int_1ms_cnt11_8 ));
  server_power_control_SLICE_335 \server_power_control/SLICE_335 ( 
    .D1(\server_power_control/wait_time_out_cnt[8] ), 
    .C1(\server_power_control/wait_time_out_cnt[7] ), 
    .B1(\server_power_control/wait_time_out_cnt[10] ), 
    .A1(\server_power_control/wait_time_out_cnt[11] ), 
    .D0(\server_power_control.power_signal_detect_inst.sig_r0 ), 
    .B0(\server_power_control/power_signal_detect_inst/sig_r1 ), 
    .M0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec ), 
    .CLK(clock_c), 
    .F0(\server_power_control/power_signal_detect_inst/pos_edge ), 
    .Q0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec_pre ), 
    .F1(\server_power_control/g0_13 ));
  server_power_control_power_signal_detect_inst_SLICE_336 
    \server_power_control/power_signal_detect_inst/SLICE_336 ( 
    .D1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[0] ), 
    .A1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[1] ), 
    .C0(\server_power_control/power_signal_detect_inst/force_sig_cnt[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/force_sig_cnt[1] ), 
    .M0(\server_power_control.power_signal_detect_inst.sig_r0 ), .LSR(reset_i), 
    .CLK(clock_c), .F0(\server_power_control/power_signal_detect_inst/N_640 ), 
    .Q0(\server_power_control/power_signal_detect_inst/sig_r1 ), 
    .F1(\server_power_control/power_signal_detect_inst/normal_sig_cnt_c1 ));
  server_power_control_SLICE_337 \server_power_control/SLICE_337 ( 
    .D1(\server_power_control/psu_done_0_sqmuxa ), 
    .C1(\server_power_control/psu_on_off26 ), 
    .B1(\server_power_control/next_state113 ), 
    .A1(\server_power_control/un1_psu_done_1_sqmuxa_1_2 ), 
    .D0(\server_power_control/current_state[0] ), 
    .C0(\server_power_control/psu_dly11 ), 
    .B0(\server_power_control/current_state[1] ), 
    .A0(\server_power_control/current_state[2] ), 
    .DI0(\server_power_control/psu_done_0_sqmuxa ), 
    .CE(\server_power_control/un1_psu_done_1_sqmuxa_1_i ), .CLK(clock_c), 
    .F0(\server_power_control/psu_done_0_sqmuxa ), 
    .Q0(\server_power_control/psu_done ), 
    .F1(\server_power_control/un1_psu_done_1_sqmuxa_1_i ));
  server_power_control_SLICE_338 \server_power_control/SLICE_338 ( 
    .D1(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .C1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .D0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[3] ), 
    .C0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[6] ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[7] ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[5] ), 
    .M1(\server_power_control/switch_reset_control/next_state[1] ), 
    .M0(\server_power_control/switch_reset_control/next_state[0] ), 
    .CLK(clock_c), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5_4 ), 
    .Q0(\server_power_control/switch_reset_control/current_state[0] ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_next_state69 ), 
    .Q1(\server_power_control/switch_reset_control/current_state[1] ));
  server_power_control_SLICE_339 \server_power_control/SLICE_339 ( 
    .D1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[3] ), 
    .C1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[2] ), 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[4] ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[1] ), 
    .D0(en_vdd_5v_c), .C0(en_vdd_1v8_c), 
    .M0(\server_power_control/switch_reset_control/next_state[2] ), 
    .CLK(clock_c), .F0(\server_power_control/cpu_pwr_control/next_state36_0 ), 
    .Q0(\server_power_control/switch_reset_control/current_state[2] ), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/next_state24_0_a2_4 )
    );
  server_power_control_switch_reset_control_SLICE_340 
    \server_power_control/switch_reset_control/SLICE_340 ( 
    .D1(\server_power_control/switch_reset_control/current_state[1] ), 
    .C1(\server_power_control/switch_reset_control/next_state13 ), 
    .B1(pg_pcie_sw_0v8_a_c), 
    .A1(\server_power_control/switch_reset_control/current_state[0] ), 
    .D0(\server_power_control/switch_reset_control/current_state[2] ), 
    .A0(\server_power_control/switch_reset_control/N_447 ), 
    .DI1(\server_power_control/switch_reset_control/N_11_i ), 
    .DI0(\server_power_control/switch_reset_control/N_436_i ), 
    .CLK(\server_power_control/switch_reset_control/un1_next_state43_0 ), 
    .F0(\server_power_control/switch_reset_control/N_436_i ), 
    .Q0(\server_power_control/switch_reset_control/next_state[0] ), 
    .F1(\server_power_control/switch_reset_control/N_11_i ), 
    .Q1(\server_power_control/switch_reset_control/next_state[1] ));
  server_power_control_SLICE_341 \server_power_control/SLICE_341 ( 
    .D1(pg_pcie_sw_0v8_a_c), .C1(pg_pcie_sw_0v8_b_c), .B1(pg_bp_5v_c), 
    .A1(pg_vdd_5v_c), .D0(pg_pcie_sw_0v8_a_c), 
    .C0(\server_power_control/switch_reset_control/current_state[2] ), 
    .DI0(\server_power_control/switch_reset_control/N_435_i ), 
    .CLK(\server_power_control/switch_reset_control/un1_next_state43_0 ), 
    .F0(\server_power_control/switch_reset_control/N_435_i ), 
    .Q0(\server_power_control/switch_reset_control/next_state[2] ), 
    .F1(\server_power_control/cpu_pwr_control/bmc_pwrgd_4 ));
  server_power_control_SLICE_342 \server_power_control/SLICE_342 ( 
    .D1(int_100ms_en), .C1(\server_power_control/next_state105 ), 
    .B1(\server_power_control/next_state111 ), 
    .A1(\server_power_control/wait_time_out_0_sqmuxa ), 
    .D0(\server_power_control/g0_14 ), .C0(\server_power_control/g0_11 ), 
    .B0(\server_power_control/g0_16 ), .A0(\server_power_control/g0_10 ), 
    .DI0(\server_power_control/wait_time_out_0_sqmuxa ), 
    .CE(\server_power_control/un1_wait_time_out_0_sqmuxa_1 ), .CLK(clock_c), 
    .F0(\server_power_control/wait_time_out_0_sqmuxa ), 
    .Q0(\server_power_control/wait_time_out ), 
    .F1(\server_power_control/wait_time_out_cnte ));
  SLICE_343 SLICE_343( .D1(\cpld_register_addr[1] ), 
    .C1(\usb_reset_ctrl_inst/N_51 ), .B1(\cpld_register_addr[2] ), 
    .A1(\cpld_register_addr[3] ), .D0(\cpld_register_addr[1] ), 
    .C0(\usb_reset_ctrl_inst/N_466 ), .B0(\cpld_register_addr[2] ), 
    .A0(\usb_reset_ctrl_inst/N_465_2 ), .DI0(start_e2prom_2), .CLK(clock_c), 
    .F0(start_e2prom_2), .Q0(start_e2prom), .F1(\usb_reset_ctrl_inst/N_466 ));
  SLICE_344 SLICE_344( .D1(\bmc_write_data[3] ), .C1(\bmc_write_data[4] ), 
    .B1(\bmc_write_data[1] ), .A1(\bmc_write_data[6] ), 
    .D0(\bmc_write_data[2] ), .C0(\usb_reset_ctrl_inst/test_interrupt7_3 ), 
    .B0(\usb_reset_ctrl_inst/test_interrupt7_4 ), .A0(\bmc_write_data[0] ), 
    .DI0(test_interrupt7), .CE(test_interrupt_1_sqmuxa), .CLK(clock_c), 
    .F0(test_interrupt7), .Q0(test_interrupt), 
    .F1(\usb_reset_ctrl_inst/test_interrupt7_4 ));
  SLICE_345 SLICE_345( .D1(pg_vtt_b1_c), .C1(pg_vpp_b1_c), .B1(pg_vtt_b0_c), 
    .A1(pg_vpp_b0_c), .D0(en_vdd_3v3_c), .C0(en_vddc_a_c), .B0(en_vqps18_a_c), 
    .A0(en_vpp_a0_c), .M1(\bmc_write_data[1] ), .M0(\bmc_write_data[0] ), 
    .CE(test_register_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/next_state36_5 ), 
    .Q0(\test_register[0] ), .F1(\server_power_control/cpub_pwrok_7 ), 
    .Q1(\test_register[1] ));
  SLICE_346 SLICE_346( 
    .D1(\server_power_control/switch_reset_control/switch_0v8_cnt[6] ), 
    .C1(\server_power_control/switch_reset_control/switch_0v8_cnt[0] ), 
    .A1(\server_power_control/switch_reset_control/switch_0v8_cnt[5] ), 
    .D0(\server_power_control/switch_reset_control/switch_rst_cnt[3] ), 
    .C0(\server_power_control/switch_reset_control/switch_rst_cnt[5] ), 
    .B0(\server_power_control/switch_reset_control/switch_rst_cnt[6] ), 
    .A0(\server_power_control/switch_reset_control/switch_rst_cnt[4] ), 
    .M1(\bmc_write_data[3] ), .M0(\bmc_write_data[2] ), 
    .CE(test_register_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/switch_reset_control/next_state21_5 ), 
    .Q0(\test_register[2] ), 
    .F1(\server_power_control/switch_reset_control/next_state13_4 ), 
    .Q1(\test_register[3] ));
  SLICE_347 SLICE_347( 
    .D1(\server_power_control/switch_reset_control/switch_rst_cnt[7] ), 
    .C1(\server_power_control/switch_reset_control/switch_rst_cnt[0] ), 
    .B1(\server_power_control/switch_reset_control/switch_rst_cnt[1] ), 
    .A1(\server_power_control/switch_reset_control/switch_rst_cnt[2] ), 
    .C0(\bmc_write_data[7] ), .B0(\bmc_write_data[5] ), 
    .M1(\bmc_write_data[5] ), .M0(\bmc_write_data[4] ), 
    .CE(test_register_1_sqmuxa), .CLK(clock_c), 
    .F0(\usb_reset_ctrl_inst/test_interrupt7_3 ), .Q0(\test_register[4] ), 
    .F1(\server_power_control/switch_reset_control/next_state21_4 ), 
    .Q1(\test_register[5] ));
  SLICE_348 SLICE_348( .C1(\usb_reset_ctrl_inst/urst_delay[12] ), 
    .B1(\usb_reset_ctrl_inst/urst_delay[2] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[11] ), .D0(un1_reset), 
    .C0(sg1_pcie0_l0_reset_c), .A0(\reset_control_b[7] ), 
    .M1(\bmc_write_data[7] ), .M0(\bmc_write_data[6] ), 
    .CE(test_register_1_sqmuxa), .CLK(clock_c), .F0(riser2_reset_c), 
    .Q0(\test_register[6] ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_3 ), 
    .Q1(\test_register[7] ));
  timer_inst_SLICE_349 \timer_inst/SLICE_349 ( 
    .D1(\timer_inst/int_100ms_cnt[9] ), .C1(\timer_inst/int_100ms_cnt[5] ), 
    .B1(\timer_inst/int_100ms_cnt[6] ), .A1(\timer_inst/int_100ms_cnt[21] ), 
    .B0(\timer_inst/rst_n_dly[1] ), .A0(\timer_inst/int_100ms_cnt[0] ), 
    .DI0(\timer_inst/int_100ms_cnt_0[0] ), .CLK(clock_c), 
    .F0(\timer_inst/int_100ms_cnt_0[0] ), .Q0(\timer_inst/int_100ms_cnt[0] ), 
    .F1(\timer_inst/int_100ms_cnt11_11 ));
  timer_inst_SLICE_350 \timer_inst/SLICE_350 ( 
    .C1(\timer_inst/int_100ms_cnt11 ), 
    .A1(\timer_inst/un6_int_100ms_cnt_cry_7_0_S0 ), 
    .C0(\timer_inst/int_100ms_cnt11 ), 
    .B0(\timer_inst/un6_int_100ms_cnt_cry_5_0_S0 ), 
    .DI1(\timer_inst/int_100ms_cnt_3[7] ), 
    .DI0(\timer_inst/int_100ms_cnt_3[5] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .F0(\timer_inst/int_100ms_cnt_3[5] ), 
    .Q0(\timer_inst/int_100ms_cnt[5] ), .F1(\timer_inst/int_100ms_cnt_3[7] ), 
    .Q1(\timer_inst/int_100ms_cnt[7] ));
  timer_inst_SLICE_351 \timer_inst/SLICE_351 ( 
    .C1(\timer_inst/int_100ms_cnt11 ), 
    .B1(\timer_inst/un6_int_100ms_cnt_cry_9_0_S1 ), 
    .D0(\timer_inst/int_100ms_cnt11 ), 
    .A0(\timer_inst/un6_int_100ms_cnt_cry_7_0_S1 ), 
    .DI1(\timer_inst/int_100ms_cnt_3[10] ), 
    .DI0(\timer_inst/int_100ms_cnt_3[8] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .F0(\timer_inst/int_100ms_cnt_3[8] ), 
    .Q0(\timer_inst/int_100ms_cnt[8] ), .F1(\timer_inst/int_100ms_cnt_3[10] ), 
    .Q1(\timer_inst/int_100ms_cnt[10] ));
  timer_inst_SLICE_352 \timer_inst/SLICE_352 ( 
    .D1(\timer_inst/int_100ms_cnt11 ), 
    .A1(\timer_inst/un6_int_100ms_cnt_cry_17_0_S0 ), 
    .D0(\timer_inst/int_100ms_cnt11 ), 
    .A0(\timer_inst/un6_int_100ms_cnt_cry_13_0_S0 ), 
    .DI1(\timer_inst/int_100ms_cnt_3[17] ), 
    .DI0(\timer_inst/int_100ms_cnt_3[13] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .F0(\timer_inst/int_100ms_cnt_3[13] ), 
    .Q0(\timer_inst/int_100ms_cnt[13] ), .F1(\timer_inst/int_100ms_cnt_3[17] ), 
    .Q1(\timer_inst/int_100ms_cnt[17] ));
  timer_inst_SLICE_353 \timer_inst/SLICE_353 ( 
    .B1(\timer_inst/int_100ms_cnt11 ), 
    .A1(\timer_inst/un6_int_100ms_cnt_s_21_0_S0 ), 
    .D0(\timer_inst/un6_int_100ms_cnt_cry_17_0_S1 ), 
    .B0(\timer_inst/int_100ms_cnt11 ), .DI1(\timer_inst/int_100ms_cnt_3[21] ), 
    .DI0(\timer_inst/int_100ms_cnt_3[18] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .F0(\timer_inst/int_100ms_cnt_3[18] ), 
    .Q0(\timer_inst/int_100ms_cnt[18] ), .F1(\timer_inst/int_100ms_cnt_3[21] ), 
    .Q1(\timer_inst/int_100ms_cnt[21] ));
  SLICE_354 SLICE_354( .D1(\bmc_reset_ctrl_inst/prst_delay[4] ), 
    .C1(\bmc_reset_ctrl_inst/prst_delay[7] ), 
    .B1(\bmc_reset_ctrl_inst/prst_delay[1] ), 
    .A1(\bmc_reset_ctrl_inst/prst_delay[3] ), .D0(\timer_inst/rst_n_dly[1] ), 
    .A0(\timer_inst/int_1ms_cnt[0] ), .DI0(\timer_inst/int_1ms_cnt_0[0] ), 
    .CLK(clock_c), .F0(\timer_inst/int_1ms_cnt_0[0] ), 
    .Q0(\timer_inst/int_1ms_cnt[0] ), .F1(\bmc_reset_ctrl_inst/bmc_prst9_8 ));
  timer_inst_SLICE_355 \timer_inst/SLICE_355 ( 
    .C1(\timer_inst/un6_int_1ms_cnt_cry_5_0_S0 ), 
    .A1(\timer_inst/int_1ms_cnt11 ), 
    .B0(\timer_inst/un6_int_1ms_cnt_cry_3_0_S0 ), 
    .A0(\timer_inst/int_1ms_cnt11 ), .DI1(\timer_inst/int_1ms_cnt_3[5] ), 
    .DI0(\timer_inst/int_1ms_cnt_3[3] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .F0(\timer_inst/int_1ms_cnt_3[3] ), 
    .Q0(\timer_inst/int_1ms_cnt[3] ), .F1(\timer_inst/int_1ms_cnt_3[5] ), 
    .Q1(\timer_inst/int_1ms_cnt[5] ));
  timer_inst_SLICE_356 \timer_inst/SLICE_356 ( 
    .C1(\timer_inst/un6_int_1ms_cnt_cry_7_0_S1 ), 
    .A1(\timer_inst/int_1ms_cnt11 ), 
    .C0(\timer_inst/un6_int_1ms_cnt_cry_7_0_S0 ), 
    .A0(\timer_inst/int_1ms_cnt11 ), .DI1(\timer_inst/int_1ms_cnt_3[8] ), 
    .DI0(\timer_inst/int_1ms_cnt_3[7] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .F0(\timer_inst/int_1ms_cnt_3[7] ), 
    .Q0(\timer_inst/int_1ms_cnt[7] ), .F1(\timer_inst/int_1ms_cnt_3[8] ), 
    .Q1(\timer_inst/int_1ms_cnt[8] ));
  timer_inst_SLICE_357 \timer_inst/SLICE_357 ( .B1(\timer_inst/int_1ms_cnt11 ), 
    .A1(\timer_inst/un6_int_1ms_cnt_cry_13_0_S1 ), 
    .D0(\timer_inst/un6_int_1ms_cnt_cry_13_0_S0 ), 
    .A0(\timer_inst/int_1ms_cnt11 ), .DI1(\timer_inst/int_1ms_cnt_3[14] ), 
    .DI0(\timer_inst/int_1ms_cnt_3[13] ), .CE(\timer_inst/rst_n_dly[1] ), 
    .CLK(clock_c), .F0(\timer_inst/int_1ms_cnt_3[13] ), 
    .Q0(\timer_inst/int_1ms_cnt[13] ), .F1(\timer_inst/int_1ms_cnt_3[14] ), 
    .Q1(\timer_inst/int_1ms_cnt[14] ));
  SLICE_358 SLICE_358( .D1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[9] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[3] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[5] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[4] ), 
    .DI0(\timer_inst/VCC\000/BUF1 ), .M1(\timer_inst/rst_n_dly[0] ), 
    .CLK(clock_c), .F0(\timer_inst/VCC\000/BUF1 ), 
    .Q0(\timer_inst/rst_n_dly[0] ), .F1(\eeprom_i2c_inst/e2prom_i2c/g0_0_5 ), 
    .Q1(\timer_inst/rst_n_dly[1] ));
  usb_reset_ctrl_inst_SLICE_359 \usb_reset_ctrl_inst/SLICE_359 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[13] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[12] ), 
    .B1(\usb_reset_ctrl_inst/urst_delay[5] ), 
    .D0(\usb_reset_ctrl_inst/current_state[0] ), 
    .C0(\usb_reset_ctrl_inst/usb_ponrst_RNO_0 ), 
    .B0(\usb_reset_ctrl_inst/current_state[1] ), .A0(cpua_sys_reset_c), 
    .DI0(\usb_reset_ctrl_inst/N_51_i ), 
    .CE(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0 ), .CLK(clock_c), 
    .F0(\usb_reset_ctrl_inst/N_51_i ), .Q0(usb1_ponrst_c), 
    .F1(\usb_reset_ctrl_inst/usb_ponrst_RNO_0 ));
  SLICE_360 SLICE_360( .D1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[1] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .M1(\usb_reset_ctrl_inst/next_state[1] ), 
    .M0(\usb_reset_ctrl_inst/next_state[0] ), .LSR(reset_i), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_215_1 ), 
    .Q0(\usb_reset_ctrl_inst/current_state[0] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_en_1_sqmuxa_1_i_0_0_a2_1 ), 
    .Q1(\usb_reset_ctrl_inst/current_state[1] ));
  SLICE_361 SLICE_361( .C1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[9] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .M0(\usb_reset_ctrl_inst/next_state[2] ), .LSR(reset_i), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_225 ), 
    .Q0(\usb_reset_ctrl_inst/current_state[2] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_21 ));
  usb_reset_ctrl_inst_SLICE_362 \usb_reset_ctrl_inst/SLICE_362 ( 
    .D1(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_8[1] ), 
    .C1(\usb_reset_ctrl_inst/next_state_1_0_0_i_o2[1] ), 
    .B1(\usb_reset_ctrl_inst/current_state[1] ), 
    .A1(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_9[1] ), 
    .D0(\usb_reset_ctrl_inst/next_state_1_i_0_0_0[0] ), 
    .C0(\usb_reset_ctrl_inst/next_state_1_0_0_i_o2[1] ), 
    .B0(\usb_reset_ctrl_inst/current_state[1] ), 
    .DI1(\usb_reset_ctrl_inst/N_797_i ), .DI0(\usb_reset_ctrl_inst/N_8_i ), 
    .CLK(\usb_reset_ctrl_inst/current_state_RNI5EMP[0] ), 
    .F0(\usb_reset_ctrl_inst/N_8_i ), .Q0(\usb_reset_ctrl_inst/next_state[0] ), 
    .F1(\usb_reset_ctrl_inst/N_797_i ), 
    .Q1(\usb_reset_ctrl_inst/next_state[1] ));
  usb_reset_ctrl_inst_SLICE_363 \usb_reset_ctrl_inst/SLICE_363 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[11] ), 
    .C1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_15 ), 
    .B1(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_5[1] ), 
    .A1(\usb_reset_ctrl_inst/current_state[1] ), .D0(cpua_sys_reset_c), 
    .C0(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_8[1] ), 
    .B0(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_9[1] ), 
    .A0(\usb_reset_ctrl_inst/current_state[2] ), 
    .DI0(\usb_reset_ctrl_inst/next_state_1[2] ), 
    .CLK(\usb_reset_ctrl_inst/current_state_RNI5EMP[0] ), 
    .F0(\usb_reset_ctrl_inst/next_state_1[2] ), 
    .Q0(\usb_reset_ctrl_inst/next_state[2] ), 
    .F1(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_8[1] ));
  i2c0_slave_inst0_SLICE_364 \i2c0_slave_inst0/SLICE_364 ( 
    .D1(\i2c0_slave_inst0/start_next_bit ), 
    .C1(\i2c0_slave_inst0/current_state[2] ), 
    .B1(\i2c0_slave_inst0/current_state[4] ), .A1(\i2c0_slave_inst0/N_406 ), 
    .D0(\i2c0_slave_inst0/start_next_bit ), 
    .C0(\i2c0_slave_inst0/current_state[6] ), .A0(\i2c0_slave_inst0/N_406 ), 
    .DI0(\i2c0_slave_inst0/wr_data_0_sqmuxa ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/wr_data_0_sqmuxa ), .Q0(wr_data_vld), 
    .F1(\i2c0_slave_inst0/N_140 ));
  data_out_r_20_15_3__SLICE_365 \data_out_r_20_15[3]/SLICE_365 ( 
    .D1(\test_register[3] ), .C1(\cpld_register_addr[3] ), 
    .B1(\reset_control_b[3] ), .D0(riser0_slot_id1_c), 
    .C0(\cpld_register_addr[0] ), .A0(bp_ncp_d_oc_c), 
    .M1(data_out_r_20_sn_N_20), .M0(data_out_r_20_sn_N_36_i_0), .FXB(N_122), 
    .FXA(N_113), .OFX0(N_122), .OFX1(N_139));
  eeprom_i2c_inst_e2prom_i2c_un1_sda_out_0_sqmuxa_SLICE_366 
    \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366 ( 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[9] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[1] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/scl_rising ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/start_repeat ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[7] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/current_state[1] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/scl_rising ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ), 
    .OFX0(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa ));
  eeprom_i2c_inst_e2prom_i2c_sda_bit_out_7_SLICE_367 
    \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367 ( 
    .D1(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_0 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/N_491 ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/bit_mux[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/N_63 ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_sn_N_6 ), 
    .OFX0(\eeprom_i2c_inst/e2prom_i2c/N_70 ));
  eeprom_i2c_inst_e2prom_i2c_sda_bit_out_1_SLICE_368 
    \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368 ( 
    .D1(\e2prom_byte_addr[5] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .A1(\e2prom_data_wr[5] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_498 ), .A0(\e2prom_dev_addr[0] ), 
    .M1(\eeprom_i2c_inst/e2prom_i2c/N_215_1 ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .FXB(\eeprom_i2c_inst/e2prom_i2c/N_58 ), 
    .FXA(\eeprom_i2c_inst/e2prom_i2c/N_70 ), 
    .OFX0(\eeprom_i2c_inst/e2prom_i2c/N_58 ), 
    .OFX1(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out ));
  eeprom_i2c_inst_e2prom_i2c_sda_bit_out_5_0_m2_SLICE_369 
    \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369 ( 
    .C1(\e2prom_data_wr[6] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .A1(\e2prom_byte_addr[6] ), .D0(\e2prom_byte_addr[4] ), 
    .C0(\e2prom_data_wr[4] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .OFX0(\eeprom_i2c_inst/e2prom_i2c/N_491 ));
  usb_reset_ctrl_inst_data_out_r_20_15_0__SLICE_370 
    \usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370 ( 
    .C1(\cpld_register_addr[3] ), .B1(\test_register[0] ), 
    .A1(\reset_control_b[0] ), .D0(riser0_slot16b_prsnt_c), 
    .C0(\cpld_register_addr[0] ), .B0(ncp0_gok_c), .M1(data_out_r_20_sn_N_20), 
    .M0(data_out_r_20_sn_N_36_i_0), .FXB(N_119), .FXA(N_110), .OFX0(N_119), 
    .OFX1(\server_power_control/cpu_pwr_control/N_136 ));
  usb_reset_ctrl_inst_data_out_r_20_14_0__SLICE_371 
    \usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371 ( 
    .D1(\reset_control_a[0] ), .C1(\cpld_register_addr[2] ), 
    .B1(\riser_reset[0] ), .D0(\cpld_register_addr[1] ), .B0(pg_vdd_3v3_c), 
    .A0(psu1_prsnt_c), .M1(data_out_r_20_sn_N_22), 
    .M0(\cpld_register_addr[3] ), 
    .FXB(\server_power_control/cpu_pwr_control/N_136 ), 
    .FXA(\server_power_control/cpu_pwr_control/N_127 ), .OFX0(N_110), 
    .OFX1(\server_power_control/cpu_pwr_control/N_153 ));
  server_power_control_switch_reset_control_next_state_1_2_0__m7_i_m2_SLICE_372 
    \server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372 
    ( .D1(\server_power_control/switch_reset_control/current_state[1] ), 
    .C1(\server_power_control/switch_reset_control/next_state13 ), 
    .B1(pg_pcie_sw_0v8_a_c), 
    .D0(\server_power_control/switch_reset_control/current_state[1] ), 
    .C0(pg_vdd_1v8_c), 
    .B0(\server_power_control/switch_reset_control/next_state21_5 ), 
    .A0(\server_power_control/switch_reset_control/next_state21_4 ), 
    .M0(\server_power_control/switch_reset_control/current_state[0] ), 
    .OFX0(\server_power_control/switch_reset_control/N_447 ));
  server_power_control_cpu_pwr_control_data_out_r_20_19_4__SLICE_373 
    \server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373 ( 
    .D1(\server_power_control/cpu_pwr_control/N_123 ), 
    .B1(\server_power_control/cpu_pwr_control/N_114 ), 
    .A1(data_out_r_20_sn_N_20), 
    .C0(\server_power_control/cpu_pwr_control/N_106 ), 
    .B0(\server_power_control/cpu_pwr_control/N_93 ), 
    .A0(\cpld_register_addr[1] ), .M0(data_out_r_20_sn_N_22), 
    .OFX0(\server_power_control/cpu_pwr_control/N_157 ));
  server_power_control_cpu_pwr_control_data_out_r_20_17_7__SLICE_374 
    \server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374 ( 
    .D1(data_out_r_20_sn_N_36_i_0), .C1(\cpld_register_addr[3] ), 
    .B1(\reset_control_b[7] ), .A1(\test_register[7] ), .D0(\riser_reset[7] ), 
    .C0(\cpld_register_addr[3] ), .B0(\reset_control_a[7] ), 
    .A0(\cpld_register_addr[2] ), .M0(data_out_r_20_sn_N_20), 
    .OFX0(\server_power_control/cpu_pwr_control/N_143 ));
  server_power_control_cpu_pwr_control_data_out_r_20_11_1__SLICE_375 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375 ( 
    .D1(pg_vpp_a0_c), .C1(\e2prom_byte_addr[1] ), .B1(\cpld_register_addr[4] ), 
    .C0(\e2prom_dev_addr[1] ), .B0(\cpld_register_addr[4] ), 
    .A0(\power_control[1] ), .M1(\cpld_register_addr[1] ), 
    .M0(\cpld_register_addr[0] ), 
    .FXB(\server_power_control/cpu_pwr_control/N_90 ), 
    .FXA(\server_power_control/cpu_pwr_control/N_103 ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_90 ), 
    .OFX1(\server_power_control/cpu_pwr_control/N_128 ));
  server_power_control_cpu_pwr_control_data_out_r_20_11_2__SLICE_376 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376 ( 
    .D1(\e2prom_byte_addr[2] ), .C1(\cpld_register_addr[4] ), 
    .A1(pg_vddq_a1_c), .D0(\e2prom_dev_addr[2] ), .C0(\cpld_register_addr[4] ), 
    .B0(\power_control[2] ), .M1(\cpld_register_addr[1] ), 
    .M0(\cpld_register_addr[0] ), 
    .FXB(\server_power_control/cpu_pwr_control/N_91 ), 
    .FXA(\server_power_control/cpu_pwr_control/N_104 ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_91 ), 
    .OFX1(\server_power_control/cpu_pwr_control/N_129 ));
  server_power_control_cpu_pwr_control_data_out_r_20_13_1__SLICE_377 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377 ( 
    .D1(\e2prom_data_rd[1] ), .C1(ddr1_event_a_c), 
    .A1(\cpld_register_addr[0] ), .D0(pg_vpp_b0_c), 
    .B0(\cpld_register_addr[3] ), .A0(riser2_slot_id1_c), 
    .M0(\cpld_register_addr[4] ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_103 ));
  server_power_control_cpu_pwr_control_data_out_r_20_13_2__SLICE_378 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378 ( 
    .C1(ddr2_event_a_c), .B1(\e2prom_data_rd[2] ), 
    .A1(\cpld_register_addr[0] ), .C0(\cpld_register_addr[3] ), 
    .B0(riser2_slot_id0_c), .A0(pg_vddq_b1_c), .M0(\cpld_register_addr[4] ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_104 ));
  server_power_control_cpu_pwr_control_data_out_r_20_14_1__SLICE_379 
    \server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379 ( 
    .C1(\reset_control_a[1] ), .B1(\riser_reset[1] ), 
    .A1(\cpld_register_addr[2] ), .C0(\cpld_register_addr[1] ), 
    .B0(psu0_prsnt_c), .A0(pg_vdd_1v8_c), .M0(\cpld_register_addr[3] ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_111 ));
  server_power_control_cpu_pwr_control_data_out_r_20_15_1__SLICE_380 
    \server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380 ( 
    .D1(\reset_control_b[1] ), .C1(\cpld_register_addr[3] ), 
    .A1(\test_register[1] ), .C0(\cpld_register_addr[0] ), 
    .B0(riser0_slot16a_prsnt_c), .A0(ncp0_d_oc_c), .M1(data_out_r_20_sn_N_20), 
    .M0(data_out_r_20_sn_N_36_i_0), 
    .FXB(\server_power_control/cpu_pwr_control/N_120 ), 
    .FXA(\server_power_control/cpu_pwr_control/N_111 ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_120 ), 
    .OFX1(\server_power_control/cpu_pwr_control/N_137 ));
  server_power_control_cpu_pwr_control_data_out_r_20_13_7__SLICE_381 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381 ( 
    .D1(ddr3_event_b_c), .C1(\cpld_register_addr[0] ), 
    .B1(\e2prom_data_rd[7] ), .C0(riser1_slot_id0_c), 
    .B0(\cpld_register_addr[3] ), .A0(pg_vddc_b_c), 
    .M0(\cpld_register_addr[4] ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_109 ));
  server_power_control_cpu_pwr_control_data_out_r_20_13_4__SLICE_382 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382 ( 
    .D1(\e2prom_data_rd[4] ), .C1(\cpld_register_addr[0] ), 
    .B1(ddr0_event_b_c), .D0(riser1_slot16a_prsnt_c), 
    .C0(\cpld_register_addr[3] ), .A0(pg_vtt_b1_c), 
    .M0(\cpld_register_addr[4] ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_106 ));
  server_power_control_cpu_pwr_control_data_out_r_20_13_0__SLICE_383 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383 ( 
    .D1(\cpld_register_addr[0] ), .C1(ddr0_event_a_c), 
    .A1(\e2prom_data_rd[0] ), .D0(\cpld_register_addr[3] ), 
    .B0(riser2_slot16b_prsnt_c), .A0(pg_vpp_b1_c), 
    .M0(\cpld_register_addr[4] ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_102 ));
  server_power_control_cpu_pwr_control_data_out_r_20_11_7__SLICE_384 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384 ( 
    .D1(pg_vddc_a_c), .C1(\cpld_register_addr[4] ), .B1(\e2prom_byte_addr[7] ), 
    .D0(\e2prom_dev_addr[7] ), .C0(\cpld_register_addr[4] ), 
    .A0(\power_control[7] ), .M1(\cpld_register_addr[1] ), 
    .M0(\cpld_register_addr[0] ), 
    .FXB(\server_power_control/cpu_pwr_control/N_96 ), 
    .FXA(\server_power_control/cpu_pwr_control/N_109 ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_96 ), 
    .OFX1(\server_power_control/cpu_pwr_control/N_134 ));
  server_power_control_cpu_pwr_control_data_out_r_20_11_4__SLICE_385 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385 ( 
    .D1(\cpld_register_addr[4] ), .C1(\e2prom_byte_addr[4] ), .B1(pg_vtt_a1_c), 
    .D0(\cpld_register_addr[4] ), .B0(\power_control[4] ), 
    .A0(\e2prom_dev_addr[4] ), .M0(\cpld_register_addr[0] ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_93 ));
  server_power_control_cpu_pwr_control_data_out_r_20_11_0__SLICE_386 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386 ( 
    .C1(\e2prom_byte_addr[0] ), .B1(\cpld_register_addr[4] ), .A1(pg_vpp_a1_c), 
    .C0(\power_control[0] ), .B0(\cpld_register_addr[4] ), 
    .A0(\e2prom_dev_addr[0] ), .M1(\cpld_register_addr[1] ), 
    .M0(\cpld_register_addr[0] ), 
    .FXB(\server_power_control/cpu_pwr_control/N_89 ), 
    .FXA(\server_power_control/cpu_pwr_control/N_102 ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_89 ), 
    .OFX1(\server_power_control/cpu_pwr_control/N_127 ));
  server_power_control_cpu_pwr_control_data_out_r_20_14_2__SLICE_387 
    \server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387 ( 
    .C1(\cpld_register_addr[2] ), .B1(\riser_reset[2] ), 
    .A1(\reset_control_a[2] ), .D0(psu1_alert_c), .B0(pg_pcie_h_b_c), 
    .A0(\cpld_register_addr[1] ), .M0(\cpld_register_addr[3] ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_112 ));
  server_power_control_cpu_pwr_control_data_out_r_20_15_2__SLICE_388 
    \server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388 ( 
    .D1(\cpld_register_addr[3] ), .C1(\test_register[2] ), 
    .B1(\reset_control_b[2] ), .D0(bp_ncp_gok_c), .B0(riser0_slot_id2_c), 
    .A0(\cpld_register_addr[0] ), .M1(data_out_r_20_sn_N_20), 
    .M0(data_out_r_20_sn_N_36_i_0), 
    .FXB(\server_power_control/cpu_pwr_control/N_121 ), 
    .FXA(\server_power_control/cpu_pwr_control/N_112 ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_121 ), 
    .OFX1(\server_power_control/cpu_pwr_control/N_138 ));
  server_power_control_cpu_pwr_control_data_out_r_20_14_4__SLICE_389 
    \server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389 ( 
    .D1(\riser_reset[4] ), .B1(\cpld_register_addr[2] ), 
    .A1(\reset_control_a[4] ), .D0(\cpld_register_addr[1] ), 
    .C0(pg_pcie_h_a_c), .B0(psu1_pwrok_c), .M0(\cpld_register_addr[3] ), 
    .OFX0(\server_power_control/cpu_pwr_control/N_114 ));
  server_power_control_power_signal_detect_inst_next_state_1_2_0__m28_SLICE_390 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390 
    ( .D1(\server_power_control/power_signal_detect_inst/is_pwr_force_off12 ), 
    .C1(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B1(fm_pwr_btn_c), .A1(bmc_gpio48_c), 
    .D0(\server_power_control/power_signal_detect_inst/pos_edge ), 
    .C0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/pwr_btn_pressed ), 
    .A0(\server_power_control/power_signal_detect_inst/N_4 ), 
    .M0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .OFX0(\server_power_control/power_signal_detect_inst/N_29 ));
  server_power_control_power_signal_detect_inst_next_state_1_2_0__m11_SLICE_391 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391 
    ( .D1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[0] ), 
    .C1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[2] ), 
    .B1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[3] ), 
    .A1(\server_power_control/power_signal_detect_inst/normal_sig_cnt[1] ), 
    .D0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lt15 ), 
    .C0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lto15_2 )
    , .B0(bmc_gpio48_c), .A0(fm_pwr_btn_c), 
    .M0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .OFX0(\server_power_control/power_signal_detect_inst/N_12 ));
  server_power_control_next_state_1_3_0__m31_SLICE_392 
    \server_power_control/next_state_1_3_0_.m31/SLICE_392 ( 
    .D1(\server_power_control/current_state[3] ), 
    .C1(\server_power_control/current_state[0] ), 
    .B1(\server_power_control/efuse_done ), .A1(\server_power_control/N_29 ), 
    .D0(bmc_gpio51_c), .C0(\server_power_control/current_state[0] ), 
    .B0(\server_power_control/current_state[3] ), 
    .A0(\server_power_control/efuse_done ), 
    .M0(\server_power_control/current_state[1] ), 
    .OFX0(\server_power_control/i15_mux_1 ));
  server_power_control_next_state_1_3_0__m49_SLICE_393 
    \server_power_control/next_state_1_3_0_.m49/SLICE_393 ( 
    .D1(\server_power_control/current_state[3] ), 
    .C1(\server_power_control/next_state101 ), 
    .B1(\server_power_control/current_state[0] ), 
    .A1(\server_power_control/N_29 ), 
    .D0(\server_power_control/current_state[3] ), 
    .B0(\server_power_control/current_state[0] ), .A0(bmc_gpio51_c), 
    .M0(\server_power_control/current_state[1] ), 
    .OFX0(\server_power_control/i15_mux_2 ));
  server_power_control_next_state_1_3_0__m12_SLICE_394 
    \server_power_control/next_state_1_3_0_.m12/SLICE_394 ( 
    .D1(\server_power_control/next_state101 ), 
    .C1(\server_power_control/psu_done ), 
    .B1(\server_power_control/is_reboot ), 
    .A1(\server_power_control/current_state[0] ), 
    .D0(\server_power_control/cpu_off_done ), 
    .C0(\server_power_control/efuse_done ), 
    .A0(\server_power_control/current_state[0] ), 
    .M0(\server_power_control/current_state[1] ), 
    .OFX0(\server_power_control/N_13 ));
  server_power_control_next_state_1_3_0__m34_SLICE_395 
    \server_power_control/next_state_1_3_0_.m34/SLICE_395 ( 
    .C1(\server_power_control/is_pwr_force_off ), 
    .B1(\server_power_control/wait_time_out ), .A1(a_gpio3_c), 
    .D0(\server_power_control/is_normal_reboot ), 
    .C0(\server_power_control/is_pwr_force_off ), 
    .B0(\server_power_control/is_pwr_on_off ), 
    .M0(\server_power_control/current_state[0] ), 
    .OFX0(\server_power_control/N_35 ));
  server_power_control_next_state_1_3_0__m21_SLICE_396 
    \server_power_control/next_state_1_3_0_.m21/SLICE_396 ( 
    .D1(\server_power_control/wait_time_out ), 
    .C1(\server_power_control/is_pwr_force_off ), .A1(a_gpio3_c), 
    .C0(\server_power_control/is_normal_reboot ), 
    .A0(\server_power_control/is_pwr_on_off ), 
    .M0(\server_power_control/current_state[0] ), 
    .OFX0(\server_power_control/N_22 ));
  server_power_control_data_out_r_20_13_i_m2_5__SLICE_397 
    \server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397 ( 
    .C1(\e2prom_data_rd[5] ), .B1(\cpld_register_addr[0] ), 
    .A1(ddr1_event_b_c), .D0(pg_vtt_b0_c), .C0(\cpld_register_addr[3] ), 
    .B0(riser1_slot_id2_c), .M0(\cpld_register_addr[4] ), 
    .OFX0(\server_power_control/N_442 ));
  server_power_control_data_out_r_20_11_i_m2_5__SLICE_398 
    \server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398 ( 
    .D1(\cpld_register_addr[4] ), .C1(\e2prom_byte_addr[5] ), .B1(pg_vtt_a0_c), 
    .D0(\cpld_register_addr[4] ), .C0(\power_control[5] ), 
    .B0(\e2prom_dev_addr[5] ), .M0(\cpld_register_addr[0] ), 
    .OFX0(\server_power_control/N_443 ));
  server_power_control_data_out_r_20_14_i_m2_5__SLICE_399 
    \server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399 ( 
    .C1(\reset_control_a[5] ), .B1(\cpld_register_addr[2] ), 
    .A1(\riser_reset[5] ), .D0(\cpld_register_addr[1] ), .B0(psu0_pwrok_c), 
    .A0(pg_ddr_phy_a_c), .M0(\cpld_register_addr[3] ), 
    .OFX0(\server_power_control/N_441 ));
  i2c0_slave_inst0_current_state_ns_i_0_m3_3__SLICE_400 
    \i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400 ( 
    .D1(\i2c0_slave_inst0/start_next_bit ), .C1(\i2c0_slave_inst0/N_406 ), 
    .D0(\i2c0_slave_inst0/before_state[2] ), 
    .C0(\i2c0_slave_inst0/before_state[1] ), 
    .B0(\i2c0_slave_inst0/before_state[0] ), 
    .A0(\i2c0_slave_inst0/start_next_bit ), 
    .M0(\i2c0_slave_inst0/current_state[3] ), .OFX0(\i2c0_slave_inst0/N_413 ));
  i2c0_slave_inst0_current_state_ns_i_m5_0_m3_6__SLICE_401 
    \i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401 ( 
    .D1(\i2c0_slave_inst0/start_next_bit ), .C1(\i2c0_slave_inst0/bit_cnt[1] ), 
    .B1(\i2c0_slave_inst0/bit_cnt[2] ), .A1(\i2c0_slave_inst0/bit_cnt[0] ), 
    .D0(\i2c0_slave_inst0/start_next_bit ), 
    .C0(\i2c0_slave_inst0/current_state[4] ), .A0(\i2c0_slave_inst0/opcode ), 
    .M0(\i2c0_slave_inst0/current_state[6] ), .OFX0(\i2c0_slave_inst0/N_127 ));
  uart_sol_inst_sys_uart_rxd3_6_3_i_m2_SLICE_402 
    \uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402 ( .C1(uart1_tx_b_c), 
    .B1(uart1_tx_a_c), .A1(bmc_gpio24_c), .C0(bmc_gpio24_c), .B0(uart0_tx_b_c), 
    .A0(uart0_tx_a_c), .M0(bmc_gpio25_c), .OFX0(sys_uart_rxd3_6_3_i_m2));
  data_out_r_20_17_6__SLICE_403 \data_out_r_20_17[6]/SLICE_403 ( 
    .D1(\test_register[6] ), .C1(\cpld_register_addr[3] ), 
    .B1(data_out_r_20_sn_N_36_i_0), .A1(\reset_control_b[6] ), 
    .D0(\riser_reset[6] ), .C0(\cpld_register_addr[3] ), 
    .B0(\reset_control_a[6] ), .A0(\cpld_register_addr[2] ), 
    .M0(data_out_r_20_sn_N_20), .OFX0(N_142));
  data_out_r_20_11_3__SLICE_404 \data_out_r_20_11[3]/SLICE_404 ( 
    .C1(\e2prom_byte_addr[3] ), .B1(\cpld_register_addr[4] ), 
    .A1(pg_vddq_a0_c), .D0(\power_control[3] ), .C0(\e2prom_dev_addr[3] ), 
    .B0(\cpld_register_addr[4] ), .M1(\cpld_register_addr[1] ), 
    .M0(\cpld_register_addr[0] ), .FXB(N_92), .FXA(N_105), .OFX0(N_92), 
    .OFX1(N_130));
  data_out_r_20_11_6__SLICE_405 \data_out_r_20_11[6]/SLICE_405 ( 
    .D1(pg_pcie_phy_a_c), .C1(\e2prom_byte_addr[6] ), 
    .B1(\cpld_register_addr[4] ), .C0(\power_control[6] ), 
    .B0(\cpld_register_addr[4] ), .A0(\e2prom_dev_addr[6] ), 
    .M1(\cpld_register_addr[1] ), .M0(\cpld_register_addr[0] ), .FXB(N_95), 
    .FXA(N_108), .OFX0(N_95), .OFX1(N_133));
  data_out_r_20_13_3__SLICE_406 \data_out_r_20_13[3]/SLICE_406 ( 
    .D1(ddr3_event_a_c), .C1(\cpld_register_addr[0] ), 
    .B1(\e2prom_data_rd[3] ), .D0(\cpld_register_addr[3] ), .C0(pg_vddq_b0_c), 
    .A0(riser1_slot16b_prsnt_c), .M0(\cpld_register_addr[4] ), .OFX0(N_105));
  data_out_r_20_13_6__SLICE_407 \data_out_r_20_13[6]/SLICE_407 ( 
    .D1(ddr2_event_b_c), .C1(\e2prom_data_rd[6] ), 
    .B1(\cpld_register_addr[0] ), .D0(\cpld_register_addr[3] ), 
    .B0(riser1_slot_id1_c), .A0(pg_pcie_phy_b_c), .M0(\cpld_register_addr[4] ), 
    .OFX0(N_108));
  data_out_r_20_14_3__SLICE_408 \data_out_r_20_14[3]/SLICE_408 ( 
    .D1(\riser_reset[3] ), .C1(\reset_control_a[3] ), 
    .B1(\cpld_register_addr[2] ), .C0(pg_ddr_phy_b_c), .B0(psu0_alert_c), 
    .A0(\cpld_register_addr[1] ), .M1(data_out_r_20_sn_N_22), 
    .M0(\cpld_register_addr[3] ), .FXB(N_139), .FXA(N_130), .OFX0(N_113), 
    .OFX1(N_156));
  server_power_control_power_signal_detect_inst_SLICE_409 
    \server_power_control/power_signal_detect_inst/SLICE_409 ( 
    .D1(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .C1(\server_power_control/power_signal_detect_inst/N_6 ), 
    .B1(\server_power_control/power_signal_detect_inst/pwr_btn_pressed ), 
    .A1(\server_power_control/power_signal_detect_inst/pos_edge ), 
    .D0(\server_power_control/power_signal_detect_inst/pwr_btn_pressed ), 
    .C0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .B0(\server_power_control/power_signal_detect_inst/N_7 ), 
    .A0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .F0(\server_power_control/power_signal_detect_inst/N_9 ), 
    .F1(\server_power_control/power_signal_detect_inst/N_7 ));
  server_power_control_power_signal_detect_inst_SLICE_410 
    \server_power_control/power_signal_detect_inst/SLICE_410 ( .D1(int_1ms_en), 
    .C1(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B1(\server_power_control/power_signal_detect_inst/next_state52 ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .D0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .C0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/is_pwr_on_off_2_sqmuxa ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_next_state64_5_i ), 
    .F1(\server_power_control/power_signal_detect_inst/is_pwr_on_off_2_sqmuxa ));
  i2c0_slave_inst0_SLICE_411 \i2c0_slave_inst0/SLICE_411 ( 
    .D1(\i2c0_slave_inst0/start_next_bit ), 
    .C1(\i2c0_slave_inst0/current_state[4] ), .B1(\i2c0_slave_inst0/N_404 ), 
    .A1(\i2c0_slave_inst0/start_next_bit_1d ), 
    .D0(\i2c0_slave_inst0/start_next_bit ), 
    .C0(\i2c0_slave_inst0/start_next_bit_1d ), 
    .B0(\i2c0_slave_inst0/current_state[5] ), .A0(\i2c0_slave_inst0/N_406 ), 
    .M1(\i2c0_slave_inst0/rcv_bit[6] ), .M0(\i2c0_slave_inst0/rcv_bit[5] ), 
    .CE(\i2c0_slave_inst0/slave_addr_out_0_sqmuxa ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/N_404 ), .Q0(\i2c0_slave_inst0/next_state16_4_i ), 
    .F1(\i2c0_slave_inst0/un1_sda_out_reg_2_sqmuxa_i ), 
    .Q1(\i2c0_slave_inst0/next_state16_5 ));
  SLICE_412 SLICE_412( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt_5_i_a2_1_1[1] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/un31_NE ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/N_215_1 ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/N_486 ), .M1(\bmc_write_data[7] ), 
    .M0(\bmc_write_data[6] ), .CE(e2prom_byte_addr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt_5_i_a2_1_1[1] ), 
    .Q0(\e2prom_byte_addr[6] ), .F1(\eeprom_i2c_inst/e2prom_i2c/N_476_i_1 ), 
    .Q1(\e2prom_byte_addr[7] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_413 \eeprom_i2c_inst/e2prom_i2c/SLICE_413 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[9] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[7] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/next_state_1[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/N_188 ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un31_0 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[0] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_414 \eeprom_i2c_inst/e2prom_i2c/SLICE_414 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_15_1_1 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/un1_start_next_bit_1d ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/next_state21 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_15_1 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[1] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/un1_scl_in_clean7 ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_15 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_15_1 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_415 \eeprom_i2c_inst/e2prom_i2c/SLICE_415 
    ( .C1(\eeprom_i2c_inst/e2prom_i2c/start_stretch_en ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/start_stretch_det ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/e2prom_scl_out_en ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_45 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_401 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_scl_out_en20_4_i_0 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_45 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_416 \eeprom_i2c_inst/e2prom_i2c/SLICE_416 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa_1_2 ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_187 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa_1_3 ), 
    .F0(un1_sda_out_0_sqmuxa_1), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa_1_3 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_417 \eeprom_i2c_inst/e2prom_i2c/SLICE_417 
    ( .D1(int_1ms_en), .C1(\eeprom_i2c_inst/i2c_busy ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_RNIP7CE1[2] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_850 ), .B0(\eeprom_i2c_inst/i2c_busy ), 
    .A0(\eeprom_i2c_inst/i2c_start ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_timeout_cnt_en17_i_0 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_850 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_418 \eeprom_i2c_inst/e2prom_i2c/SLICE_418 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/N_497 ), .C1(\e2prom_dev_addr[1] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_a2_0_0 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_496 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_518 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/rd_datace[6] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_0 ), 
    .Q0(\eeprom_i2c_inst/rd_data[6] ), .F1(\eeprom_i2c_inst/e2prom_i2c/N_518 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_419 \eeprom_i2c_inst/e2prom_i2c/SLICE_419 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[9] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/scl_rising ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/scl_falling ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[7] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/sda_out_2_sqmuxa_1 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa_1_2 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/sda_out_2_sqmuxa_1 ));
  SLICE_420 SLICE_420( .D1(\eeprom_i2c_inst/e2prom_i2c/N_490 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_486 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), .M1(\bmc_write_data[1] ), 
    .M0(\bmc_write_data[0] ), .CE(e2prom_data_wr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_490 ), .Q0(\e2prom_data_wr[0] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_475_i_1 ), .Q1(\e2prom_data_wr[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_421 \eeprom_i2c_inst/e2prom_i2c/SLICE_421 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[3] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/un1_scl_in_clean7_1 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[4] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[3] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[2] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[5] ), 
    .M0(\eeprom_i2c_inst/i2c_start ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/un1_timeout_cnt_en17_i_0 ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_scl_in_clean7_1 ), 
    .Q0(\eeprom_i2c_inst/i2c_busy ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un1_scl_in_clean7 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_422 \eeprom_i2c_inst/e2prom_i2c/SLICE_422 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[4] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/un1_sda_in_clean8_1 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[3] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[5] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[3] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[2] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_sda_in_clean8_1 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un1_sda_in_clean8_0 ));
  usb_reset_ctrl_inst_SLICE_423 \usb_reset_ctrl_inst/SLICE_423 ( 
    .D1(\bmc_reset_ctrl_inst.sig_r1 ), .C1(\bmc_reset_ctrl_inst.sig_r0 ), 
    .B1(cpua_sys_reset_c), .A1(\usb_reset_ctrl_inst/current_state[1] ), 
    .D0(\usb_reset_ctrl_inst/current_state[2] ), 
    .C0(\usb_reset_ctrl_inst/next_state_1_i_0_0_m2[0] ), .B0(cpua_sys_reset_c), 
    .A0(\usb_reset_ctrl_inst/current_state[0] ), 
    .F0(\usb_reset_ctrl_inst/next_state_1_i_0_0_0[0] ), 
    .F1(\usb_reset_ctrl_inst/next_state_1_i_0_0_m2[0] ));
  SLICE_424 SLICE_424( .D1(\server_power_control/N_443 ), 
    .C1(data_out_r_20_sn_N_22), .B1(\server_power_control/N_442 ), 
    .A1(\cpld_register_addr[1] ), 
    .D0(\usb_reset_ctrl_inst/data_out_r_20_sn_m26_i_1 ), 
    .C0(\cpld_register_addr[3] ), 
    .B0(\usb_reset_ctrl_inst/data_out_r_20_sn_N_48 ), 
    .A0(\cpld_register_addr[1] ), .F0(data_out_r_20_sn_N_22), 
    .F1(\server_power_control/data_out_r_20_0_a3_0[5] ));
  SLICE_425 SLICE_425( 
    .D1(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .C1(int_100ms_en), 
    .B1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .A1(\server_power_control/cpu_pwr_control/N_598 ), .D0(int_1ms_en), 
    .C0(\server_power_control/cpu_pwr_control/N_602 ), 
    .B0(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .A0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .M1(\bmc_write_data[5] ), .M0(\bmc_write_data[4] ), 
    .CE(riser_reset_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/seq_cnte ), 
    .Q0(\riser_reset[4] ), .F1(\server_power_control/cpu_pwr_control/N_602 ), 
    .Q1(\riser_reset[5] ));
  SLICE_426 SLICE_426( 
    .D1(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .C1(\server_power_control/cpu_pwr_control/N_16_2 ), 
    .B1(\server_power_control/cpu_pwr_control/N_606_6 ), 
    .A1(\server_power_control/cpu_pwr_control/un1_next_state40_5_i_a2_0_1 ), 
    .D0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .C0(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .B0(\server_power_control/cpu_pwr_control/un1_next_state40_5_i_0_0 ), 
    .A0(\server_power_control/cpu_pwr_control/N_603 ), 
    .M1(\bmc_write_data[1] ), .M0(\bmc_write_data[0] ), 
    .CE(riser_reset_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/un1_next_state40_5_i_0 ), 
    .Q0(\riser_reset[0] ), 
    .F1(\server_power_control/cpu_pwr_control/un1_next_state40_5_i_0_0 ), 
    .Q1(\riser_reset[1] ));
  SLICE_427 SLICE_427( .D1(cpua_sys_reset_c), 
    .C1(\server_power_control/cpub_pwrok_7 ), 
    .B1(\server_power_control/cpub_pwrok_8 ), 
    .A1(\server_power_control/cpua_pwrok ), .D0(cpua_sys_reset_c), 
    .C0(\server_power_control/cpu_pwr_control/cpua_pwrok_5 ), 
    .B0(\server_power_control/cpu_pwr_control/cpua_pwrok_6 ), 
    .A0(\server_power_control/cpu_pwr_control/cpua_pwrok_7 ), 
    .M1(\i2c0_slave_inst0/rcv_bit[7] ), .M0(\i2c0_slave_inst0/rcv_bit[6] ), 
    .CE(\i2c0_slave_inst0/wr_data_0_sqmuxa ), .CLK(clock_c), 
    .F0(\server_power_control/cpua_pwrok ), .Q0(\bmc_write_data[6] ), 
    .F1(\server_power_control/N_16 ), .Q1(\bmc_write_data[7] ));
  server_power_control_SLICE_428 \server_power_control/SLICE_428 ( 
    .D1(\server_power_control/reboot_cnt_2_sqmuxa_1 ), .C1(a_gpio5_c), 
    .B1(\server_power_control/is_normal_reboot ), 
    .A1(\server_power_control/next_state115 ), 
    .D0(\server_power_control/next_state115 ), 
    .C0(\server_power_control/next_state105 ), 
    .B0(\server_power_control/next_state111 ), 
    .A0(\server_power_control/reboot_cnt_2_sqmuxa ), 
    .F0(\server_power_control/un1_next_state105_8_i ), 
    .F1(\server_power_control/reboot_cnt_2_sqmuxa ));
  server_power_control_SLICE_429 \server_power_control/SLICE_429 ( 
    .D1(ncp0_gok_c), .C1(\server_power_control/efuse_done13 ), 
    .B1(\server_power_control/current_state[1] ), .A1(bp_ncp_gok_c), 
    .D0(\server_power_control/psu_on_off26 ), .C0(\server_power_control/N_82 ), 
    .B0(\server_power_control/current_state[1] ), 
    .A0(\server_power_control/current_state[3] ), 
    .F0(\server_power_control/N_103_i ), .F1(\server_power_control/N_82 ));
  server_power_control_SLICE_430 \server_power_control/SLICE_430 ( 
    .D1(data_out_r_20_sn_N_22), 
    .C1(\server_power_control/data_out_r_20_0_0[5] ), 
    .B1(\server_power_control/data_out_r_20_0_a3_1_0[5] ), 
    .A1(data_out_r_20_sn_N_25), .D0(data_out_r_20_sn_N_44_mux), 
    .C0(\server_power_control/data_out_r_20_0_a3_0[5] ), 
    .B0(pg_pcie_sw_0v8_a_c), .A0(data_out_r_20_sn_N_25), 
    .M1(\server_power_control/cpu_pwr_control/next_state[1] ), 
    .M0(\server_power_control/cpu_pwr_control/next_state[0] ), .CLK(clock_c), 
    .F0(\server_power_control/data_out_r_20_0_0[5] ), 
    .Q0(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .F1(\server_power_control/data_out_r_20_0_1[5] ), 
    .Q1(\server_power_control/cpu_pwr_control/current_state[1] ));
  server_power_control_SLICE_431 \server_power_control/SLICE_431 ( 
    .D1(int_1ms_en), .B1(\server_power_control/psu_dly11 ), 
    .A1(\server_power_control/cpu_off_done_0_sqmuxa_1_1 ), .D0(int_1ms_en), 
    .C0(\server_power_control/psu_on_off26 ), 
    .B0(\server_power_control/cpu_off_done_0_sqmuxa_1 ), 
    .A0(\server_power_control/next_state113 ), 
    .F0(\server_power_control/un1_next_state105_10_2 ), 
    .F1(\server_power_control/cpu_off_done_0_sqmuxa_1 ));
  server_power_control_SLICE_432 \server_power_control/SLICE_432 ( 
    .D1(\server_power_control/current_state[0] ), 
    .C1(\server_power_control/current_state[3] ), 
    .B1(\server_power_control/current_state[2] ), 
    .A1(\server_power_control/current_state[1] ), .D0(int_1ms_en), 
    .C0(\server_power_control/next_state105 ), 
    .B0(\server_power_control/current_state[2] ), 
    .A0(\server_power_control/un1_psu_on_off44 ), 
    .F0(\server_power_control/efuse_dlylde_0 ), 
    .F1(\server_power_control/next_state105 ));
  i2c0_slave_inst0_SLICE_433 \i2c0_slave_inst0/SLICE_433 ( 
    .D1(\i2c0_slave_inst0/N_68 ), 
    .C1(\i2c0_slave_inst0/un1_stretch_en_i_a2[0] ), 
    .B1(\i2c0_slave_inst0/current_state[4] ), 
    .A1(\i2c0_slave_inst0/next_state_i_a8_1[0] ), 
    .D0(\i2c0_slave_inst0/current_state[4] ), .C0(\i2c0_slave_inst0/opcode ), 
    .B0(\i2c0_slave_inst0/start_en ), .A0(\i2c0_slave_inst0/current_state[2] ), 
    .F0(\i2c0_slave_inst0/next_state_i_a8_1[0] ), 
    .F1(\i2c0_slave_inst0/N_170 ));
  i2c0_slave_inst0_SLICE_434 \i2c0_slave_inst0/SLICE_434 ( 
    .D1(\i2c0_slave_inst0/N_173 ), 
    .C1(\i2c0_slave_inst0/un1_stretch_en_i_a2[0] ), 
    .B1(\i2c0_slave_inst0/next_state_i_a8_3_1[0] ), 
    .A1(\i2c0_slave_inst0/N_171 ), 
    .D0(\i2c0_slave_inst0/un1_stretch_en_i_a2[0] ), 
    .C0(\i2c0_slave_inst0/start_next_bit ), 
    .B0(\i2c0_slave_inst0/next_state_i_2[0] ), .A0(\i2c0_slave_inst0/N_170 ), 
    .M1(\i2c0_slave_inst0/start_next_bit ), 
    .M0(\i2c0_slave_inst0/sda_in_dly[4] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/un1_stretch_en_2_0 ), 
    .Q0(\i2c0_slave_inst0/sda_in_dly[5] ), 
    .F1(\i2c0_slave_inst0/next_state_i_2[0] ), 
    .Q1(\i2c0_slave_inst0/start_next_bit_1d ));
  i2c0_slave_inst0_SLICE_435 \i2c0_slave_inst0/SLICE_435 ( 
    .C1(\i2c0_slave_inst0/sda_out_reg_13_iv_2 ), 
    .B1(\i2c0_slave_inst0/sda_out_reg_13_iv_5_1 ), 
    .A1(\i2c0_slave_inst0/current_state[5] ), 
    .D0(\i2c0_slave_inst0/rd_data_i_m[4] ), .C0(\data_out_r[6] ), 
    .B0(\i2c0_slave_inst0/un1_bit_cnt_3 ), 
    .A0(\i2c0_slave_inst0/current_state[5] ), 
    .M0(\i2c0_slave_inst0/sda_in_clean ), 
    .CE(\i2c0_slave_inst0/rcv_bit_RNO[6] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/sda_out_reg_13_iv_2 ), 
    .Q0(\i2c0_slave_inst0/rcv_bit[6] ), 
    .F1(\i2c0_slave_inst0/sda_out_reg_13_iv_5 ));
  i2c0_slave_inst0_SLICE_436 \i2c0_slave_inst0/SLICE_436 ( 
    .C1(\i2c0_slave_inst0/current_state[5] ), .B1(\data_out_r[1] ), 
    .A1(\i2c0_slave_inst0/rcv_bit18 ), .D0(\i2c0_slave_inst0/un1_bit_cnt_4 ), 
    .C0(\i2c0_slave_inst0/current_state[5] ), 
    .B0(\i2c0_slave_inst0/rd_data_i_m[1] ), .A0(\data_out_r[5] ), 
    .M0(\i2c0_slave_inst0/scl_in_dly[1] ), 
    .CE(\i2c0_slave_inst0/un1_scl_in_clean8 ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/sda_out_reg_13_iv_3 ), 
    .Q0(\i2c0_slave_inst0/scl_in_clean ), 
    .F1(\i2c0_slave_inst0/rd_data_i_m[1] ));
  i2c0_slave_inst0_SLICE_437 \i2c0_slave_inst0/SLICE_437 ( 
    .D1(\i2c0_slave_inst0/scl_in_dly[1] ), 
    .C1(\i2c0_slave_inst0/un1_scl_in_clean8_1 ), 
    .B1(\i2c0_slave_inst0/scl_in_dly[3] ), 
    .A1(\i2c0_slave_inst0/scl_in_dly[4] ), 
    .C0(\i2c0_slave_inst0/scl_in_dly[2] ), 
    .B0(\i2c0_slave_inst0/scl_in_dly[3] ), 
    .A0(\i2c0_slave_inst0/scl_in_dly[5] ), 
    .M1(\i2c0_slave_inst0/sda_in_clean ), 
    .M0(\i2c0_slave_inst0/scl_in_dly[4] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/un1_scl_in_clean8_1 ), 
    .Q0(\i2c0_slave_inst0/scl_in_dly[5] ), 
    .F1(\i2c0_slave_inst0/un1_scl_in_clean8 ), 
    .Q1(\i2c0_slave_inst0/sda_in_clean_dly[0] ));
  i2c0_slave_inst0_SLICE_438 \i2c0_slave_inst0/SLICE_438 ( 
    .D1(\i2c0_slave_inst0/sda_in_dly[3] ), 
    .C1(\i2c0_slave_inst0/un1_sda_in_clean8_1 ), 
    .B1(\i2c0_slave_inst0/sda_in_dly[1] ), 
    .A1(\i2c0_slave_inst0/sda_in_dly[4] ), 
    .D0(\i2c0_slave_inst0/sda_in_dly[3] ), 
    .C0(\i2c0_slave_inst0/sda_in_dly[2] ), 
    .A0(\i2c0_slave_inst0/sda_in_dly[5] ), 
    .M1(\i2c0_slave_inst0/sda_in_dly[1] ), 
    .M0(\i2c0_slave_inst0.sda_in_dly[0] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/un1_sda_in_clean8_1 ), 
    .Q0(\i2c0_slave_inst0/sda_in_dly[1] ), 
    .F1(\i2c0_slave_inst0/un1_sda_in_clean8 ), 
    .Q1(\i2c0_slave_inst0/sda_in_dly[2] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_439 \eeprom_i2c_inst/e2prom_i2c/SLICE_439 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[0] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[1] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_7 ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/rd_datace[2] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[5] ), 
    .Q0(\eeprom_i2c_inst/rd_data[2] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_7 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_440 \eeprom_i2c_inst/e2prom_i2c/SLICE_440 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/next_state21 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[1] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[0] ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[0] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[0] ), 
    .Q0(\eeprom_i2c_inst/rd_data[0] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/next_state21 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_441 \eeprom_i2c_inst/e2prom_i2c/SLICE_441 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/g0_0_6 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[6] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[7] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/g0_0_5 ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_486 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/scl_cnt_en ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[5] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/state_cnte ), 
    .Q0(\eeprom_i2c_inst/rd_data[5] ), .F1(\eeprom_i2c_inst/e2prom_i2c/N_486 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_442 \eeprom_i2c_inst/e2prom_i2c/SLICE_442 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[6] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4_1[1] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[7] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/un31_0 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/un31_2 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[1] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/next_state[1] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un31_NE_1 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_443 \eeprom_i2c_inst/e2prom_i2c/SLICE_443 
    ( .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_187 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/un1_scl_out_0_sqmuxa_2 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_220 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/scl_falling ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/scl_rising ), 
    .M1(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[2] ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[1] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst.e2prom_i2c.un1_scl_out_0_sqmuxa_i ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[2] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_220 ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[3] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_444 \eeprom_i2c_inst/e2prom_i2c/SLICE_444 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/next_state_a4_0_0[3] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/N_188 ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_250 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/next_state_0[3] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/next_state_1_0[3] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/next_state_0[3] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_445 \eeprom_i2c_inst/e2prom_i2c/SLICE_445 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/rcv_ack ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/before_state[3] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/before_state[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_248 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_258 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[2] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/N_184 ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un31_2 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_258 ));
  SLICE_446 SLICE_446( .D1(\eeprom_i2c_inst/e2prom_i2c/before_state[2] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/N_261 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_258 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/before_state[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_234_1 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/opcode ), .M1(\bmc_write_data[5] ), 
    .M0(\bmc_write_data[4] ), .CE(e2prom_dev_addr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_236 ), .Q0(\e2prom_dev_addr[4] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_234_1 ), .Q1(\e2prom_dev_addr[5] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_447 \eeprom_i2c_inst/e2prom_i2c/SLICE_447 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_184 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_255 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/next_state_a2_1[3] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_252 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_255 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_448 \eeprom_i2c_inst/e2prom_i2c/SLICE_448 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/un1_start_next_bit_1_i_o2_0 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/before_state[0] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_184 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/next_state_a2_1[3] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/next_state21 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/N_255 ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_250 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/next_state_a2_1[3] ));
  eeprom_i2c_inst_SLICE_449 \eeprom_i2c_inst/SLICE_449 ( 
    .D1(\eeprom_i2c_inst/e2prom_i2c/before_state[0] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/before_state[2] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/un1_start_next_bit_1_i_o2_0 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/before_state[1] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_188 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .M1(\eeprom_i2c_inst/rd_data[1] ), .M0(\eeprom_i2c_inst/rd_data[0] ), 
    .CE(\eeprom_i2c_inst/rd_data_vld ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_240 ), .Q0(\e2prom_data_rd[0] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_188 ), .Q1(\e2prom_data_rd[1] ));
  eeprom_i2c_inst_SLICE_450 \eeprom_i2c_inst/SLICE_450 ( 
    .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[6] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/N_198 ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/next_state_3[1] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/next_state21 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/next_state_1[1] ), 
    .M1(\eeprom_i2c_inst/rd_data[5] ), .M0(\eeprom_i2c_inst/rd_data[4] ), 
    .CE(\eeprom_i2c_inst/rd_data_vld ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/next_state[1] ), .Q0(\e2prom_data_rd[4] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/next_state_1[1] ), 
    .Q1(\e2prom_data_rd[5] ));
  SLICE_451 SLICE_451( .D1(\eeprom_i2c_inst/e2prom_i2c/N_258 ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/N_231_1 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/opcode ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/before_state[2] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/before_state[1] ), 
    .M1(\bmc_write_data[3] ), .M0(\bmc_write_data[2] ), 
    .CE(e2prom_dev_addr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_231 ), .Q0(\e2prom_dev_addr[2] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_231_1 ), .Q1(\e2prom_dev_addr[3] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_452 \eeprom_i2c_inst/e2prom_i2c/SLICE_452 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[1] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[7] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/scl_rising ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_1874_tz ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/scl_falling ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/N_220 ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[1] ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/un1_sda_in_clean8_0 ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst.e2prom_i2c.N_103 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_1874_tz ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_453 \eeprom_i2c_inst/e2prom_i2c/SLICE_453 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[4] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[2] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_en_1_sqmuxa_1_i_0_0_a2_1 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt[3] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_RNIP7CE1[2] ), 
    .B0(\eeprom_i2c_inst/i2c_busy ), .A0(\eeprom_i2c_inst/i2c_start ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/N_45_i ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/un1_scl_out_en20_1_i_0 ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_129_i ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/scl_cnt_en ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/timeout_cnt_RNIP7CE1[2] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_454 \eeprom_i2c_inst/e2prom_i2c/SLICE_454 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/before_state[2] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_186 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_258 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/before_state[1] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/next_state_3[1] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_186 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_455 \eeprom_i2c_inst/e2prom_i2c/SLICE_455 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/scl_falling ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/scl_rising ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out30 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[7] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/un1_scl_out_0_sqmuxa_0 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .M1(\eeprom_i2c_inst.e2prom_i2c.sda_in_dly[0] ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[4] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_scl_out_0_sqmuxa_2 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[5] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out30 ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_456 \eeprom_i2c_inst/e2prom_i2c/SLICE_456 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[2] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[1] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_23 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/e2prom_scl_out_en ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[3] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_401 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_23 ));
  eeprom_i2c_inst_SLICE_457 \eeprom_i2c_inst/SLICE_457 ( 
    .D1(\eeprom_i2c_inst/e2prom_i2c/before_state[2] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/opcode ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/N_187 ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_245 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/next_state21 ), 
    .M1(\eeprom_i2c_inst/rd_data[7] ), .M0(\eeprom_i2c_inst/rd_data[6] ), 
    .CE(\eeprom_i2c_inst/rd_data_vld ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/next_state_1[0] ), 
    .Q0(\e2prom_data_rd[6] ), .F1(\eeprom_i2c_inst/e2prom_i2c/N_245 ), 
    .Q1(\e2prom_data_rd[7] ));
  SLICE_458 SLICE_458( .D1(\e2prom_byte_addr[0] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .A1(\e2prom_data_wr[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/opcode ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/N_39 ), .M1(\bmc_write_data[3] ), 
    .M0(\bmc_write_data[2] ), .CE(e2prom_data_wr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/bit_mux[0] ), .Q0(\e2prom_data_wr[2] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_39 ), .Q1(\e2prom_data_wr[3] ));
  SLICE_459 SLICE_459( .D1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[3] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[8] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[5] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[9] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/before_state_en_6[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[7] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .M1(\bmc_write_data[3] ), .M0(\bmc_write_data[2] ), 
    .CE(e2prom_byte_addr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/before_state_en_8[0] ), 
    .Q0(\e2prom_byte_addr[2] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/before_state_en_6[0] ), 
    .Q1(\e2prom_byte_addr[3] ));
  SLICE_460 SLICE_460( .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[1] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[7] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_198 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .M0(\cpld_register_addr[2] ), .CE(start_e2prom_2), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/current_state_ns_i_1[2] ), 
    .Q0(e2prom_is_rw), .F1(\eeprom_i2c_inst/e2prom_i2c/N_198 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_461 \eeprom_i2c_inst/e2prom_i2c/SLICE_461 
    ( .C1(\eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/scl_rising ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[9] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[1] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/sda_out28 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/scl_falling ), 
    .M1(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[3] ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[2] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_scl_out_0_sqmuxa_0 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[3] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/sda_out28 ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/scl_in_dly[4] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_462 \eeprom_i2c_inst/e2prom_i2c/SLICE_462 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/N_187 ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[6] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_187 ), 
    .F1(\eeprom_i2c_inst.e2prom_i2c.sda_out_12_iv_i ));
  SLICE_463 SLICE_463( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/before_state[0] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/un1_start_next_bit_1_i_o2_0 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state_ns_a4_1_0[8] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/opcode ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/before_state[1] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/before_state[2] ), 
    .M1(\bmc_write_data[7] ), .M0(\bmc_write_data[6] ), 
    .CE(e2prom_dev_addr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/current_state_ns_a4_1_0[8] ), 
    .Q0(\e2prom_dev_addr[6] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_15_1_1 ), 
    .Q1(\e2prom_dev_addr[7] ));
  bmc_reset_ctrl_inst_SLICE_464 \bmc_reset_ctrl_inst/SLICE_464 ( 
    .D1(\bmc_reset_ctrl_inst/bmc_prst9_10 ), 
    .C1(\bmc_reset_ctrl_inst/bmc_prst9_8 ), 
    .B1(\bmc_reset_ctrl_inst/bmc_prst9_9 ), 
    .A1(\bmc_reset_ctrl_inst/bmc_prst9_11 ), 
    .D0(\bmc_reset_ctrl_inst.prst_delay_4[2] ), 
    .C0(\bmc_reset_ctrl_inst/bmc_prst9 ), .B0(int_1ms_en), 
    .A0(\bmc_reset_ctrl_inst/current_state[0] ), 
    .F0(\bmc_reset_ctrl_inst/prst_delaye ), 
    .F1(\bmc_reset_ctrl_inst/bmc_prst9 ));
  bmc_reset_ctrl_inst_SLICE_465 \bmc_reset_ctrl_inst/SLICE_465 ( 
    .D1(\bmc_reset_ctrl_inst/bmc_srst5_3 ), 
    .C1(\bmc_reset_ctrl_inst/bmc_srst5_4 ), 
    .B1(\bmc_reset_ctrl_inst/srst_delay[2] ), 
    .A1(\bmc_reset_ctrl_inst/srst_delay[5] ), .D0(int_1ms_en), 
    .C0(\bmc_reset_ctrl_inst/bmc_srst5 ), .F0(\bmc_reset_ctrl_inst/bmc_srst6 ), 
    .F1(\bmc_reset_ctrl_inst/bmc_srst5 ));
  usb_reset_ctrl_inst_SLICE_466 \usb_reset_ctrl_inst/SLICE_466 ( 
    .D1(\usb_reset_ctrl_inst/N_469 ), .C1(\cpld_register_addr[3] ), 
    .B1(\usb_reset_ctrl_inst/reset_control_a_1_sqmuxa_0_a3_0 ), 
    .A1(\cpld_register_addr[4] ), .D0(\cpld_register_addr[1] ), 
    .B0(\cpld_register_addr[2] ), .A0(\cpld_register_addr[0] ), 
    .F0(\usb_reset_ctrl_inst/reset_control_a_1_sqmuxa_0_a3_0 ), 
    .F1(reset_control_a_1_sqmuxa));
  usb_reset_ctrl_inst_SLICE_467 \usb_reset_ctrl_inst/SLICE_467 ( 
    .D1(\usb_reset_ctrl_inst/data_out_r_20_sn_m36_i_2 ), 
    .C1(\usb_reset_ctrl_inst/data_out_r_20_sn_m36_i_0 ), 
    .B1(\usb_reset_ctrl_inst/data_out_r_20_sn_N_52 ), 
    .A1(\usb_reset_ctrl_inst/data_out_r_20_sn_N_43 ), 
    .D0(\cpld_register_addr[0] ), .C0(\cpld_register_addr[1] ), 
    .B0(\cpld_register_addr[2] ), .A0(\cpld_register_addr[5] ), 
    .F0(\usb_reset_ctrl_inst/data_out_r_20_sn_N_43 ), 
    .F1(data_out_r_20_sn_N_25));
  usb_reset_ctrl_inst_SLICE_468 \usb_reset_ctrl_inst/SLICE_468 ( 
    .D1(\usb_reset_ctrl_inst/N_467 ), .C1(\usb_reset_ctrl_inst/N_474 ), 
    .B1(\cpld_register_addr[0] ), .A1(\cpld_register_addr[5] ), 
    .D0(\cpld_register_addr[3] ), .C0(\cpld_register_addr[2] ), 
    .B0(\cpld_register_addr[4] ), .A0(\cpld_register_addr[1] ), 
    .F0(\usb_reset_ctrl_inst/N_474 ), .F1(test_register_1_sqmuxa));
  usb_reset_ctrl_inst_SLICE_469 \usb_reset_ctrl_inst/SLICE_469 ( 
    .D1(wr_data_vld), .C1(\cpld_register_addr[6] ), 
    .B1(\cpld_register_addr[7] ), .A1(\cpld_register_addr[5] ), 
    .D0(\usb_reset_ctrl_inst/N_473 ), .C0(\usb_reset_ctrl_inst/N_469 ), 
    .B0(\cpld_register_addr[0] ), .A0(\cpld_register_addr[4] ), 
    .F0(power_control_0_sqmuxa), .F1(\usb_reset_ctrl_inst/N_469 ));
  usb_reset_ctrl_inst_SLICE_470 \usb_reset_ctrl_inst/SLICE_470 ( 
    .D1(\cpld_register_addr[0] ), .C1(\usb_reset_ctrl_inst/N_469 ), 
    .B1(\cpld_register_addr[4] ), .D0(\cpld_register_addr[3] ), 
    .C0(\usb_reset_ctrl_inst/N_51 ), .B0(\cpld_register_addr[2] ), 
    .A0(\cpld_register_addr[1] ), .F0(e2prom_dev_addr_1_sqmuxa), 
    .F1(\usb_reset_ctrl_inst/N_51 ));
  usb_reset_ctrl_inst_SLICE_471 \usb_reset_ctrl_inst/SLICE_471 ( 
    .D1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_14 ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[14] ), 
    .B1(\usb_reset_ctrl_inst/urst_delay[8] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[10] ), 
    .C0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_1 ), 
    .B0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_17 ), 
    .A0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_3_tz ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0 ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_17 ));
  usb_reset_ctrl_inst_SLICE_472 \usb_reset_ctrl_inst/SLICE_472 ( 
    .D1(\usb_reset_ctrl_inst/current_state[0] ), 
    .C1(\usb_reset_ctrl_inst/current_state[2] ), 
    .B1(\usb_reset_ctrl_inst/current_state[1] ), 
    .A1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3 ), 
    .D0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_6 ), 
    .C0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_0 ), 
    .B0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_1 ), 
    .A0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_14 ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_1 ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_0 ));
  usb_reset_ctrl_inst_SLICE_473 \usb_reset_ctrl_inst/SLICE_473 ( 
    .D1(\usb_reset_ctrl_inst/N_469 ), .C1(\cpld_register_addr[0] ), 
    .B1(\cpld_register_addr[3] ), .A1(\cpld_register_addr[4] ), 
    .C0(\cpld_register_addr[1] ), .B0(\usb_reset_ctrl_inst/N_465_2 ), 
    .A0(\cpld_register_addr[2] ), .F0(reset_control_b_1_sqmuxa), 
    .F1(\usb_reset_ctrl_inst/N_465_2 ));
  usb_reset_ctrl_inst_SLICE_474 \usb_reset_ctrl_inst/SLICE_474 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[6] ), 
    .C1(\usb_reset_ctrl_inst/current_state[2] ), 
    .B1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_1_4_1 ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[7] ), 
    .D0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2 ), 
    .C0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_1_4_2 ), 
    .B0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_0 ), 
    .A0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_6 ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_3_tz ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_1_4_2 ));
  SLICE_475 SLICE_475( .D1(\por/rst_btn_dly[3] ), .C1(\por/rst_btn_dly[4] ), 
    .B1(\por/un1_reset_1 ), .A1(\por/rst_btn_dly[5] ), 
    .D0(\reset_control_b[6] ), .C0(un1_reset), .B0(sg1_pcie0_l0_reset_c), 
    .F0(riser1_reset_c), .F1(un1_reset));
  usb_reset_ctrl_inst_SLICE_476 \usb_reset_ctrl_inst/SLICE_476 ( 
    .D1(\usb_reset_ctrl_inst/current_state[1] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[5] ), 
    .B1(\usb_reset_ctrl_inst/current_state[2] ), 
    .D0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_3 ), 
    .C0(\usb_reset_ctrl_inst/N_145 ), 
    .B0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_4 ), 
    .A0(\usb_reset_ctrl_inst/N_144 ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3 ), 
    .F1(\usb_reset_ctrl_inst/N_145 ));
  usb_reset_ctrl_inst_SLICE_477 \usb_reset_ctrl_inst/SLICE_477 ( 
    .D1(wr_data_vld), .C1(\cpld_register_addr[6] ), 
    .A1(\cpld_register_addr[7] ), .D0(\usb_reset_ctrl_inst/N_474 ), 
    .C0(\cpld_register_addr[0] ), .B0(\cpld_register_addr[5] ), 
    .A0(\usb_reset_ctrl_inst/N_467 ), .F0(test_interrupt_1_sqmuxa), 
    .F1(\usb_reset_ctrl_inst/N_467 ));
  usb_reset_ctrl_inst_SLICE_478 \usb_reset_ctrl_inst/SLICE_478 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[9] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[2] ), 
    .D0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_2 ), 
    .C0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_15 ), 
    .B0(\usb_reset_ctrl_inst/N_145 ), .A0(\usb_reset_ctrl_inst/urst_delay[7] ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2 ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_15 ));
  usb_reset_ctrl_inst_SLICE_479 \usb_reset_ctrl_inst/SLICE_479 ( 
    .D1(\usb_reset_ctrl_inst/current_state[0] ), 
    .A1(\usb_reset_ctrl_inst/current_state[1] ), 
    .D0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_8_1 ), 
    .C0(\usb_reset_ctrl_inst/N_124 ), 
    .B0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_22 ), 
    .A0(\usb_reset_ctrl_inst/N_145 ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_1 ), 
    .F1(\usb_reset_ctrl_inst/N_124 ));
  usb_reset_ctrl_inst_SLICE_480 \usb_reset_ctrl_inst/SLICE_480 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[11] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[12] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[13] ), 
    .D0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_11_2 ), 
    .C0(\usb_reset_ctrl_inst/urst_delay[4] ), .B0(\usb_reset_ctrl_inst/N_144 ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[6] ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_2 ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_11_2 ));
  usb_reset_ctrl_inst_SLICE_481 \usb_reset_ctrl_inst/SLICE_481 ( 
    .C1(\cpld_register_addr[3] ), .B1(\cpld_register_addr[2] ), 
    .A1(\cpld_register_addr[1] ), .D0(\usb_reset_ctrl_inst/N_469 ), 
    .C0(\usb_reset_ctrl_inst/N_473 ), .B0(\cpld_register_addr[4] ), 
    .A0(\cpld_register_addr[0] ), .F0(e2prom_byte_addr_1_sqmuxa), 
    .F1(\usb_reset_ctrl_inst/N_473 ));
  usb_reset_ctrl_inst_SLICE_482 \usb_reset_ctrl_inst/SLICE_482 ( 
    .D1(\cpld_register_addr[5] ), .C1(\cpld_register_addr[2] ), 
    .B1(\cpld_register_addr[0] ), .A1(\cpld_register_addr[1] ), 
    .D0(\cpld_register_addr[3] ), 
    .C0(\usb_reset_ctrl_inst/riser_reset_1_sqmuxa_1 ), 
    .B0(\cpld_register_addr[4] ), .A0(\usb_reset_ctrl_inst/N_467 ), 
    .F0(riser_reset_1_sqmuxa), 
    .F1(\usb_reset_ctrl_inst/riser_reset_1_sqmuxa_1 ));
  usb_reset_ctrl_inst_SLICE_483 \usb_reset_ctrl_inst/SLICE_483 ( 
    .C1(\usb_reset_ctrl_inst/urst_delay[6] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[4] ), 
    .D0(\usb_reset_ctrl_inst/urst_delay[7] ), 
    .C0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_22 ), 
    .B0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_7_3 ), 
    .A0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_7_4 ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_6 ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_22 ));
  usb_reset_ctrl_inst_SLICE_484 \usb_reset_ctrl_inst/SLICE_484 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[13] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[7] ), 
    .B1(\usb_reset_ctrl_inst/urst_delay[8] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[9] ), 
    .D0(\usb_reset_ctrl_inst/urst_delay[14] ), 
    .C0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_3 ), 
    .B0(\usb_reset_ctrl_inst/urst_delay[10] ), 
    .A0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_4 ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_6 ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_4 ));
  SLICE_485 SLICE_485( .B1(\cpld_register_addr[0] ), 
    .A1(\cpld_register_addr[1] ), 
    .D0(\usb_reset_ctrl_inst/data_out_r_20_sn_N_49_1 ), 
    .C0(data_out_r_20_sn_N_36_i_0), .B0(\cpld_register_addr[4] ), 
    .A0(\cpld_register_addr[5] ), 
    .F0(\usb_reset_ctrl_inst/data_out_r_20_sn_m26_i_1 ), 
    .F1(data_out_r_20_sn_N_36_i_0));
  usb_reset_ctrl_inst_SLICE_486 \usb_reset_ctrl_inst/SLICE_486 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[6] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[7] ), 
    .D0(\usb_reset_ctrl_inst/urst_delay[8] ), 
    .C0(\usb_reset_ctrl_inst/N_822_1 ), 
    .B0(\usb_reset_ctrl_inst/urst_delay[3] ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[2] ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_3 ), 
    .F1(\usb_reset_ctrl_inst/N_822_1 ));
  usb_reset_ctrl_inst_SLICE_487 \usb_reset_ctrl_inst/SLICE_487 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[4] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[10] ), 
    .B1(\usb_reset_ctrl_inst/urst_delay[9] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[14] ), 
    .D0(\usb_reset_ctrl_inst/urst_delay[1] ), 
    .C0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_2 ), 
    .B0(\usb_reset_ctrl_inst/urst_delay[15] ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[0] ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_4 ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_2 ));
  usb_reset_ctrl_inst_SLICE_488 \usb_reset_ctrl_inst/SLICE_488 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[6] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[7] ), 
    .B1(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_7[1] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[4] ), 
    .D0(\usb_reset_ctrl_inst/urst_delay[15] ), 
    .C0(\usb_reset_ctrl_inst/urst_delay[3] ), 
    .B0(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_4[1] ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[12] ), 
    .F0(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_7[1] ), 
    .F1(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_9[1] ));
  usb_reset_ctrl_inst_SLICE_489 \usb_reset_ctrl_inst/SLICE_489 ( 
    .B1(\cpld_register_addr[1] ), .A1(\cpld_register_addr[2] ), 
    .D0(\cpld_register_addr[3] ), .C0(\cpld_register_addr[4] ), 
    .B0(\usb_reset_ctrl_inst/data_out_r_20_sn_N_49_1 ), 
    .A0(\cpld_register_addr[5] ), 
    .F0(\usb_reset_ctrl_inst/data_out_r_20_sn_m36_i_2 ), 
    .F1(\usb_reset_ctrl_inst/data_out_r_20_sn_N_49_1 ));
  usb_reset_ctrl_inst_SLICE_490 \usb_reset_ctrl_inst/SLICE_490 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[6] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[7] ), 
    .B1(\usb_reset_ctrl_inst/usb_prst_1_0_35_i_0_a2_0_1 ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[4] ), 
    .D0(\usb_reset_ctrl_inst/current_state[1] ), 
    .C0(\usb_reset_ctrl_inst/N_144 ), .B0(\usb_reset_ctrl_inst/urst_delay[5] ), 
    .A0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_15 ), 
    .F0(\usb_reset_ctrl_inst/usb_prst_1_0_35_i_0_a2_0_1 ), 
    .F1(\usb_reset_ctrl_inst/usb_prst_1_0_35_i_0_a2_0_2 ));
  SLICE_491 SLICE_491( .D1(\cpld_register_addr[5] ), 
    .C1(data_out_r_20_sn_N_16_1), .B1(\cpld_register_addr[2] ), 
    .A1(\cpld_register_addr[1] ), .D0(\cpld_register_addr[4] ), 
    .C0(\cpld_register_addr[7] ), .B0(\cpld_register_addr[6] ), 
    .A0(\cpld_register_addr[3] ), .F0(data_out_r_20_sn_N_16_1), 
    .F1(data_out_r_20_sn_N_44_mux));
  server_power_control_switch_reset_control_SLICE_492 
    \server_power_control/switch_reset_control/SLICE_492 ( 
    .D1(\server_power_control/switch_reset_control/next_state13 ), 
    .B1(\server_power_control/switch_reset_control/current_state[0] ), 
    .D0(\server_power_control/switch_reset_control/current_state[1] ), 
    .C0(\server_power_control/switch_reset_control/current_state[2] ), 
    .B0(int_1ms_en), .A0(\server_power_control/switch_reset_control/N_461 ), 
    .F0(\server_power_control/switch_reset_control/N_434_i ), 
    .F1(\server_power_control/switch_reset_control/N_461 ));
  server_power_control_switch_reset_control_SLICE_493 
    \server_power_control/switch_reset_control/SLICE_493 ( 
    .D1(\server_power_control/switch_reset_control/switch_0v8_cnt[3] ), 
    .C1(\server_power_control/switch_reset_control/switch_0v8_cnt[7] ), 
    .B1(\server_power_control/switch_reset_control/switch_0v8_cnt[1] ), 
    .A1(\server_power_control/switch_reset_control/switch_0v8_cnt[4] ), 
    .D0(\server_power_control/switch_reset_control/switch_0v8_cnt[8] ), 
    .C0(\server_power_control/switch_reset_control/next_state13_5 ), 
    .B0(\server_power_control/switch_reset_control/switch_0v8_cnt[2] ), 
    .A0(\server_power_control/switch_reset_control/next_state13_4 ), 
    .F0(\server_power_control/switch_reset_control/next_state13 ), 
    .F1(\server_power_control/switch_reset_control/next_state13_5 ));
  SLICE_494 SLICE_494( .D1(data_out_r_20_sn_N_44_mux), 
    .C1(\server_power_control/cpu_pwr_control/N_98 ), .B1(pg_3v3_riser_c), 
    .A1(\server_power_control/cpu_pwr_control/data_out_r_20_sn_N_16 ), 
    .D0(\cpld_register_addr[1] ), .C0(test_interrupt), 
    .B0(\cpld_register_addr[0] ), .A0(\cpld_register_addr[5] ), 
    .M1(\bmc_write_data[7] ), .M0(\bmc_write_data[6] ), 
    .CE(power_control_0_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/N_98 ), .Q0(\power_control[6] ), 
    .F1(\server_power_control/cpu_pwr_control/N_146 ), .Q1(\power_control[7] ));
  SLICE_495 SLICE_495( 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_sn_N_16 ), 
    .C1(\server_power_control/cpu_pwr_control/N_101 ), .B1(pg_pcie_sw_0v8_b_c), 
    .A1(data_out_r_20_sn_N_44_mux), .D0(\cpld_register_addr[0] ), 
    .C0(\cpld_register_addr[5] ), .A0(\cpld_register_addr[1] ), 
    .M1(\bmc_write_data[1] ), .M0(\bmc_write_data[0] ), 
    .CE(reset_control_a_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/N_101 ), 
    .Q0(\reset_control_a[0] ), 
    .F1(\server_power_control/cpu_pwr_control/N_150 ), 
    .Q1(\reset_control_a[1] ));
  SLICE_496 SLICE_496( .D1(\test_register[4] ), .C1(\reset_control_b[4] ), 
    .A1(\cpld_register_addr[3] ), .D0(riser0_slot_id0_c), 
    .C0(\server_power_control/cpu_pwr_control/N_77 ), 
    .B0(\cpld_register_addr[0] ), .A0(\cpld_register_addr[1] ), 
    .M1(\bmc_write_data[3] ), .M0(\bmc_write_data[2] ), 
    .CE(reset_control_a_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/N_123 ), 
    .Q0(\reset_control_a[2] ), 
    .F1(\server_power_control/cpu_pwr_control/N_77 ), 
    .Q1(\reset_control_a[3] ));
  SLICE_497 SLICE_497( 
    .D1(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .A1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .D0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .C0(\server_power_control/cpu_pwr_control/N_602 ), .B0(int_1ms_en), 
    .A0(\server_power_control/cpu_pwr_control/N_16_2 ), 
    .M1(\bmc_write_data[3] ), .M0(\bmc_write_data[2] ), 
    .CE(riser_reset_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/un1_next_state42_i_0 ), 
    .Q0(\riser_reset[2] ), .F1(\server_power_control/cpu_pwr_control/N_16_2 ), 
    .Q1(\riser_reset[3] ));
  SLICE_498 SLICE_498( .D1(\server_power_control/cpub_pwrok_8 ), 
    .B1(\server_power_control/cpua_pwrok ), 
    .A1(\server_power_control/cpub_pwrok_7 ), .D0(pg_3v3_riser_c), 
    .C0(bmc_gpio51_c), .B0(\server_power_control/cpu_pwr_control/bmc_pwrgd_4 ), 
    .A0(pg_5v_aux_c), .M1(\i2c0_slave_inst0/rcv_bit[5] ), 
    .M0(\i2c0_slave_inst0/rcv_bit[4] ), 
    .CE(\i2c0_slave_inst0/wr_data_0_sqmuxa ), .CLK(clock_c), .F0(bmc_pwrgd_c), 
    .Q0(\bmc_write_data[4] ), .F1(bmc_gpio51_c), .Q1(\bmc_write_data[5] ));
  SLICE_499 SLICE_499( .D1(\server_power_control/cpu_pwr_control/seq_cnt[4] ), 
    .C1(\server_power_control/cpu_pwr_control/un1_current_state_4_i_o2 ), 
    .B1(\server_power_control/cpu_pwr_control/N_631 ), 
    .A1(\server_power_control/cpu_pwr_control/enable_reg_6_iv_0_5_o2_0_0 ), 
    .C0(\server_power_control/cpu_pwr_control/N_598 ), 
    .B0(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .A0(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .M1(\bmc_write_data[5] ), .M0(\bmc_write_data[4] ), 
    .CE(power_control_0_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/N_601_i ), 
    .Q0(\power_control[4] ), .F1(\server_power_control/cpu_pwr_control/N_598 ), 
    .Q1(\power_control[5] ));
  SLICE_500 SLICE_500( .D1(\server_power_control/cpu_pwr_control/seq_cnt[4] ), 
    .C1(\server_power_control/cpu_pwr_control/seq_cnt[7] ), 
    .B1(\server_power_control/cpu_pwr_control/seq_cnt[0] ), 
    .A1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .D0(\server_power_control/cpu_pwr_control/N_606_6 ), 
    .C0(\server_power_control/cpu_pwr_control/un1_current_state_4_i_a2_1 ), 
    .B0(\server_power_control/cpu_pwr_control/N_16_2 ), 
    .A0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .M1(\bmc_write_data[5] ), .M0(\bmc_write_data[4] ), 
    .CE(reset_control_b_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/un1_current_state_4_i_0 ), 
    .Q0(\reset_control_b[4] ), 
    .F1(\server_power_control/cpu_pwr_control/un1_current_state_4_i_a2_1 ), 
    .Q1(\reset_control_b[5] ));
  SLICE_501 SLICE_501( .C1(\server_power_control/cpu_pwr_control/seq_cnt[5] ), 
    .B1(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .A1(\server_power_control/cpu_pwr_control/seq_cnt[1] ), 
    .D0(\server_power_control/cpu_pwr_control/un1_current_state_4_i_o2 ), 
    .C0(\server_power_control/cpu_pwr_control/un1_current_state_4_i_a2_6_0 ), 
    .B0(\server_power_control/cpu_pwr_control/seq_cnt[3] ), 
    .A0(\server_power_control/cpu_pwr_control/seq_cnt[2] ), 
    .M1(\bmc_write_data[7] ), .M0(\bmc_write_data[6] ), 
    .CE(reset_control_b_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/N_606_6 ), 
    .Q0(\reset_control_b[6] ), 
    .F1(\server_power_control/cpu_pwr_control/un1_current_state_4_i_a2_6_0 ), 
    .Q1(\reset_control_b[7] ));
  SLICE_502 SLICE_502( 
    .D1(\server_power_control/cpu_pwr_control/cpua_pwrok_3 ), 
    .C1(pg_ddr_phy_b_c), .B1(pg_pcie_phy_b_c), .A1(pg_pcie_h_b_c), 
    .D0(pg_vddq_b1_c), .C0(pg_vddc_b_c), 
    .B0(\server_power_control/cpu_pwr_control/cpub_pwrok_6 ), 
    .A0(pg_vddq_b0_c), .M1(\bmc_write_data[1] ), .M0(\bmc_write_data[0] ), 
    .CE(power_control_0_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpub_pwrok_8 ), .Q0(\power_control[0] ), 
    .F1(\server_power_control/cpu_pwr_control/cpub_pwrok_6 ), 
    .Q1(\power_control[1] ));
  SLICE_503 SLICE_503( .D1(pg_vdd_3v3_c), .A1(pg_vdd_1v8_c), 
    .D0(pg_pcie_h_a_c), 
    .C0(\server_power_control/cpu_pwr_control/cpua_pwrok_3 ), 
    .B0(pg_pcie_phy_a_c), .A0(pg_ddr_phy_a_c), .M1(\por/rst_btn_dly[2] ), 
    .M0(\por/rst_btn_dly[1] ), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/cpua_pwrok_6 ), 
    .Q0(\por/rst_btn_dly[2] ), 
    .F1(\server_power_control/cpu_pwr_control/cpua_pwrok_3 ), 
    .Q1(\por/rst_btn_dly[3] ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_504 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_504 ( 
    .D1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/next_state24_0_a2_4 )
    , 
    .C1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/next_state24_0_a2_3 )
    , 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[7] ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[0] ), 
    .D0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec ), 
    .C0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/N_31_7 ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec_pre ), 
    .A0(int_1ms_en), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_timee ), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/N_31_7 ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_505 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_505 ( 
    .D1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[2] ), 
    .C1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5_3 ), 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5_4 ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[4] ), 
    .D0(int_1ms_en), 
    .C0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5 ), 
    .A0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst_pre ), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnte ), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5 ));
  server_power_control_power_signal_detect_inst_SLICE_506 
    \server_power_control/power_signal_detect_inst/SLICE_506 ( 
    .D1(\server_power_control/power_signal_detect_inst/un1_force_15slto12_0 ), 
    .C1(\server_power_control/power_signal_detect_inst/m4_0 ), 
    .B1(\server_power_control/power_signal_detect_inst/un1_force_15slt12 ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[13] ), 
    .D0(fm_pwr_btn_c), 
    .C0(\server_power_control/power_signal_detect_inst/debounce_cnt[15] ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[14] ), 
    .F0(\server_power_control/power_signal_detect_inst/m4_0 ), 
    .F1(\server_power_control/power_signal_detect_inst/N_5 ));
  server_power_control_power_signal_detect_inst_SLICE_507 
    \server_power_control/power_signal_detect_inst/SLICE_507 ( 
    .C1(\server_power_control/power_signal_detect_inst/debounce_cnt[9] ), 
    .B1(\server_power_control/power_signal_detect_inst/debounce_cnt[8] ), 
    .D0(\server_power_control/power_signal_detect_inst/debounce_cnt[14] ), 
    .C0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_2 ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt[7] ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[15] ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_nomral_300mslto15_1 ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_2 ));
  server_power_control_power_signal_detect_inst_SLICE_508 
    \server_power_control/power_signal_detect_inst/SLICE_508 ( 
    .D1(fm_pwr_btn_c), .A1(bmc_gpio48_c), 
    .D0(\server_power_control/power_signal_detect_inst/pwr_btn_pressed ), 
    .C0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .B0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .A0(\server_power_control/power_signal_detect_inst/un1_force_15s_1 ), 
    .F0(\server_power_control/power_signal_detect_inst/N_34_mux ), 
    .F1(\server_power_control/power_signal_detect_inst/pwr_btn_pressed ));
  server_power_control_power_signal_detect_inst_SLICE_509 
    \server_power_control/power_signal_detect_inst/SLICE_509 ( 
    .D1(\server_power_control/power_signal_detect_inst/debounce_cnt[5] ), 
    .C1(\server_power_control/power_signal_detect_inst/N_655 ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[6] ), 
    .D0(\server_power_control/power_signal_detect_inst/N_5 ), 
    .C0(\server_power_control/power_signal_detect_inst/N_644 ), 
    .B0(\server_power_control/power_signal_detect_inst/un1_debounce_cntlto15_2 ), 
    .A0(\server_power_control/power_signal_detect_inst/N_4 ), 
    .F0(\server_power_control/power_signal_detect_inst/N_6 ), 
    .F1(\server_power_control/power_signal_detect_inst/N_644 ));
  server_power_control_power_signal_detect_inst_SLICE_510 
    \server_power_control/power_signal_detect_inst/SLICE_510 ( 
    .D1(bmc_gpio48_c), 
    .C1(\server_power_control/power_signal_detect_inst/un1_low_time_cnt ), 
    .B1(fm_pwr_btn_c), 
    .A1(\server_power_control/power_signal_detect_inst/un1_force_15s_1 ), 
    .D0(\server_power_control/power_signal_detect_inst/un1_force_15s_1lto12_0 ), 
    .C0(\server_power_control/power_signal_detect_inst/un1_force_15s_1lt12 ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt[13] ), 
    .A0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_5 ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_force_15s_1 ), 
    .F1(\server_power_control/power_signal_detect_inst/N_21 ));
  server_power_control_power_signal_detect_inst_SLICE_511 
    \server_power_control/power_signal_detect_inst/SLICE_511 ( 
    .D1(\server_power_control/power_signal_detect_inst/debounce_cnt[14] ), 
    .C1(\server_power_control/power_signal_detect_inst/debounce_cnt[15] ), 
    .B1(fm_pwr_btn_c), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[13] ), 
    .D0(\server_power_control/power_signal_detect_inst/un1_force_15slto15_1_0 ), 
    .C0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_5 ), 
    .B0(\server_power_control/power_signal_detect_inst/un1_force_15slto12_0 ), 
    .A0(\server_power_control/power_signal_detect_inst/un1_force_15slt12 ), 
    .F0(\server_power_control/power_signal_detect_inst/N_4 ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_force_15slto15_1_0 ));
  server_power_control_power_signal_detect_inst_SLICE_512 
    \server_power_control/power_signal_detect_inst/SLICE_512 ( 
    .C1(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .A1(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .D0(\server_power_control/power_signal_detect_inst/next_state69_1 ), 
    .C0(\server_power_control/power_signal_detect_inst/debounce_cnt ), 
    .B0(\server_power_control/power_signal_detect_inst/is_pwr_force_off_2_sqmuxa_0 )
    , .A0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_current_state_6_i ), 
    .F1(\server_power_control/power_signal_detect_inst/next_state69_1 ));
  server_power_control_power_signal_detect_inst_SLICE_513 
    \server_power_control/power_signal_detect_inst/SLICE_513 ( 
    .D1(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_7 ), 
    .C1(\server_power_control/power_signal_detect_inst/N_644 ), 
    .B1(\server_power_control/power_signal_detect_inst/N_652 ), 
    .A1(\server_power_control/power_signal_detect_inst/un1_nomral_300mslto15_1 ), 
    .D0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms ), 
    .A0(fm_pwr_btn_c), 
    .F0(\server_power_control/power_signal_detect_inst/N_33_mux ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_nomral_300ms ));
  server_power_control_power_signal_detect_inst_SLICE_514 
    \server_power_control/power_signal_detect_inst/SLICE_514 ( 
    .D1(\server_power_control/power_signal_detect_inst/is_pwr_force_off12 ), 
    .A1(int_1ms_en), 
    .D0(\server_power_control/power_signal_detect_inst/un1_current_state_4_0 ), 
    .C0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .F0(\server_power_control/power_signal_detect_inst/force_sig_cnte ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_current_state_4_0 ));
  server_power_control_power_signal_detect_inst_SLICE_515 
    \server_power_control/power_signal_detect_inst/SLICE_515 ( 
    .D1(\server_power_control/power_signal_detect_inst/next_state52 ), 
    .B1(int_1ms_en), 
    .D0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .C0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .A0(\server_power_control/power_signal_detect_inst/un1_next_state64_3_0 ), 
    .F0(\server_power_control/power_signal_detect_inst/normal_sig_cnte ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_next_state64_3_0 ));
  server_power_control_power_signal_detect_inst_SLICE_516 
    \server_power_control/power_signal_detect_inst/SLICE_516 ( 
    .D1(\server_power_control/power_signal_detect_inst/debounce_cnt[9] ), 
    .C1(\server_power_control/power_signal_detect_inst/debounce_cnt[8] ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[10] ), 
    .D0(\server_power_control/power_signal_detect_inst/debounce_cnt[4] ), 
    .C0(\server_power_control/power_signal_detect_inst/un1_force_15slto7_i_a3_1 ), 
    .B0(\server_power_control/power_signal_detect_inst/N_658 ), 
    .A0(\server_power_control/power_signal_detect_inst/un1_force_15slto10_1 ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_force_15slt12 ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_force_15slto10_1 ));
  server_power_control_power_signal_detect_inst_SLICE_517 
    \server_power_control/power_signal_detect_inst/SLICE_517 ( 
    .D1(\server_power_control/power_signal_detect_inst/low_time_cnt[3] ), 
    .C1(\server_power_control/power_signal_detect_inst/low_time_cnt[2] ), 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt[4] ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[5] ), 
    .D0(\server_power_control/power_signal_detect_inst/un1_low_time_cntlto15_2 ), 
    .C0(\server_power_control/power_signal_detect_inst/N_643 ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[6] ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_low_time_cnt ), 
    .F1(\server_power_control/power_signal_detect_inst/N_643 ));
  server_power_control_power_signal_detect_inst_SLICE_518 
    \server_power_control/power_signal_detect_inst/SLICE_518 ( 
    .C1(\server_power_control/power_signal_detect_inst/low_time_cnt[10] ), 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt[9] ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[8] ), 
    .D0(\server_power_control/power_signal_detect_inst/N_657 ), 
    .C0(\server_power_control/power_signal_detect_inst/un1_force_15s_1lto10_1 ), 
    .B0(\server_power_control/power_signal_detect_inst/un1_force_15s_1lto7_i_a3_1 )
    , .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[4] ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_force_15s_1lt12 ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_force_15s_1lto10_1 ));
  server_power_control_power_signal_detect_inst_SLICE_519 
    \server_power_control/power_signal_detect_inst/SLICE_519 ( 
    .D1(fm_pwr_btn_c), .B1(int_1ms_en), 
    .D0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .C0(\server_power_control/power_signal_detect_inst/debounce_cnt_0_sqmuxa_0 ), 
    .B0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .A0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .M1(\server_power_control/power_signal_detect_inst/next_state[1] ), 
    .M0(\server_power_control/power_signal_detect_inst/next_state[0] ), 
    .CLK(clock_c), 
    .F0(\server_power_control/power_signal_detect_inst/debounce_cnte ), 
    .Q0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .F1(\server_power_control/power_signal_detect_inst/debounce_cnt_0_sqmuxa_0 ), 
    .Q1(\server_power_control/power_signal_detect_inst/low_time_cnt ));
  server_power_control_power_signal_detect_inst_SLICE_520 
    \server_power_control/power_signal_detect_inst/SLICE_520 ( 
    .C1(bmc_gpio48_c), .B1(int_1ms_en), .A1(fm_pwr_btn_c), 
    .D0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .C0(\server_power_control/power_signal_detect_inst/low_time_cnt ), 
    .B0(\server_power_control/power_signal_detect_inst/un1_next_state67_1_0 ), 
    .A0(\server_power_control/power_signal_detect_inst/current_state[0] ), 
    .F0(\server_power_control/power_signal_detect_inst/low_time_cnte ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_next_state67_1_0 ));
  server_power_control_power_signal_detect_inst_SLICE_521 
    \server_power_control/power_signal_detect_inst/SLICE_521 ( 
    .D1(\server_power_control/power_signal_detect_inst/low_time_cnt[1] ), 
    .C1(\server_power_control/power_signal_detect_inst/low_time_cnt[0] ), 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt[4] ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[3] ), 
    .D0(\server_power_control/power_signal_detect_inst/N_643 ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt[6] ), 
    .A0(\server_power_control/power_signal_detect_inst/N_654 ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lt15 ), 
    .F1(\server_power_control/power_signal_detect_inst/N_654 ));
  server_power_control_power_signal_detect_inst_SLICE_522 
    \server_power_control/power_signal_detect_inst/SLICE_522 ( 
    .D1(\server_power_control/power_signal_detect_inst/debounce_cnt[14] ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[15] ), 
    .D0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_2 ), 
    .C0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_5 ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt[7] ), 
    .A0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_7 ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_debounce_cntlto15_2 ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_5 ));
  server_power_control_power_signal_detect_inst_SLICE_523 
    \server_power_control/power_signal_detect_inst/SLICE_523 ( 
    .D1(\server_power_control/power_signal_detect_inst/low_time_cnt[14] ), 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt[15] ), 
    .D0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_7 ), 
    .C0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_5 ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt[7] ), 
    .A0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_2 ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_low_time_cntlto15_2 ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_5 ));
  server_power_control_power_signal_detect_inst_SLICE_524 
    \server_power_control/power_signal_detect_inst/SLICE_524 ( 
    .D1(\server_power_control/power_signal_detect_inst/low_time_cnt[9] ), 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt[8] ), 
    .D0(\server_power_control/power_signal_detect_inst/low_time_cnt[7] ), 
    .C0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_2 ), 
    .B0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_5 ), 
    .A0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_7 ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lto15_2 )
    , 
    .F1(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_2 ));
  server_power_control_power_signal_detect_inst_SLICE_525 
    \server_power_control/power_signal_detect_inst/SLICE_525 ( 
    .D1(\server_power_control/power_signal_detect_inst/force_sig_cnt[1] ), 
    .C1(\server_power_control/power_signal_detect_inst/force_sig_cnt[3] ), 
    .B1(\server_power_control/power_signal_detect_inst/force_sig_cnt[0] ), 
    .A1(\server_power_control/power_signal_detect_inst/force_sig_cnt[2] ), 
    .D0(\server_power_control/power_signal_detect_inst/is_pwr_force_off12 ), 
    .C0(int_1ms_en), 
    .M0(\server_power_control/power_signal_detect_inst/next_state[2] ), 
    .CLK(clock_c), 
    .F0(\server_power_control/power_signal_detect_inst/is_pwr_force_off_2_sqmuxa_0 )
    , .Q0(\server_power_control/power_signal_detect_inst/current_state[2] ), 
    .F1(\server_power_control/power_signal_detect_inst/is_pwr_force_off12 ));
  SLICE_526 SLICE_526( .D1(\server_power_control/is_normal_reboot ), 
    .C1(\server_power_control/next_state101 ), .B1(a_gpio5_c), 
    .A1(\server_power_control/next_state115 ), 
    .D0(\server_power_control/current_state[3] ), 
    .C0(\server_power_control/current_state[1] ), 
    .B0(\server_power_control/current_state[2] ), 
    .A0(\server_power_control/current_state[0] ), .M1(\bmc_write_data[7] ), 
    .M0(\bmc_write_data[6] ), .CE(riser_reset_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/next_state115 ), .Q0(\riser_reset[6] ), 
    .F1(\server_power_control/efuse_done_0_sqmuxa_2 ), .Q1(\riser_reset[7] ));
  server_power_control_SLICE_527 \server_power_control/SLICE_527 ( 
    .D1(\server_power_control/efuse_done_0_sqmuxa_1 ), 
    .C1(\server_power_control/next_state105 ), 
    .B1(\server_power_control/efuse_done13 ), 
    .A1(\server_power_control/next_state108 ), 
    .D0(\server_power_control/current_state[0] ), 
    .C0(\server_power_control/current_state[3] ), 
    .B0(\server_power_control/current_state[1] ), 
    .A0(\server_power_control/current_state[2] ), 
    .M0(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .CE(\server_power_control/cpu_pwr_control/un1_next_state40_2_i_0_a2 ), 
    .CLK(clock_c), .F0(\server_power_control/next_state108 ), 
    .Q0(\server_power_control/cpu_pwr_control/pwr_all_on ), 
    .F1(\server_power_control/un1_efuse_dly_0_sqmuxa_2_1 ));
  server_power_control_SLICE_528 \server_power_control/SLICE_528 ( 
    .D1(\server_power_control/current_state[0] ), 
    .C1(\server_power_control/current_state[2] ), 
    .B1(\server_power_control/current_state[1] ), .D0(int_1ms_en), 
    .C0(\server_power_control/un1_current_state_2 ), 
    .B0(\server_power_control/psu_dly11 ), 
    .A0(\server_power_control/next_state105 ), 
    .F0(\server_power_control/psu_dlye ), 
    .F1(\server_power_control/un1_current_state_2 ));
  server_power_control_SLICE_529 \server_power_control/SLICE_529 ( 
    .D1(a_gpio3_c), .C1(\server_power_control/N_35 ), 
    .B1(\server_power_control/N_22 ), .A1(a_gpio5_c), 
    .D0(\server_power_control/current_state[1] ), 
    .C0(\server_power_control/N_56_mux ), .B0(\server_power_control/N_16 ), 
    .A0(\server_power_control/current_state[0] ), 
    .F0(\server_power_control/N_38 ), .F1(\server_power_control/N_56_mux ));
  server_power_control_SLICE_530 \server_power_control/SLICE_530 ( 
    .D1(\server_power_control/current_state[0] ), 
    .C1(\server_power_control/current_state[3] ), 
    .B1(\server_power_control/current_state[1] ), 
    .A1(\server_power_control/current_state[2] ), 
    .D0(\server_power_control/un1_next_state105_10_2 ), 
    .C0(\server_power_control/un1_next_state105_11_3 ), 
    .A0(\server_power_control/wait_time_out_0_sqmuxa_1 ), 
    .F0(\server_power_control.un1_next_state105_11_i ), 
    .F1(\server_power_control/un1_next_state105_11_3 ));
  server_power_control_SLICE_531 \server_power_control/SLICE_531 ( 
    .D1(\server_power_control/next_state112 ), .B1(int_1ms_en), 
    .D0(\server_power_control/efuse_done_0_sqmuxa_1 ), 
    .C0(\server_power_control/next_state105 ), 
    .B0(\server_power_control/un1_next_state105_10_2 ), 
    .A0(\server_power_control/cpu_off_done_1_sqmuxa ), 
    .F0(\server_power_control/un1_next_state105_10 ), 
    .F1(\server_power_control/cpu_off_done_1_sqmuxa ));
  server_power_control_SLICE_532 \server_power_control/SLICE_532 ( 
    .D1(int_1ms_en), .C1(\server_power_control/next_state101 ), 
    .D0(\server_power_control/reboot_cnt_2_sqmuxa_1 ), 
    .C0(\server_power_control/next_state105 ), 
    .B0(\server_power_control/N_125_1 ), 
    .A0(\server_power_control/next_state115 ), 
    .F0(\server_power_control/reboot_cnte ), 
    .F1(\server_power_control/reboot_cnt_2_sqmuxa_1 ));
  server_power_control_SLICE_533 \server_power_control/SLICE_533 ( 
    .D1(\server_power_control/current_state[0] ), 
    .C1(\server_power_control/current_state[3] ), 
    .B1(\server_power_control/current_state[2] ), 
    .A1(\server_power_control/current_state[1] ), 
    .D0(\server_power_control/efuse_dly_0_sqmuxa ), 
    .C0(\server_power_control/next_state113 ), 
    .B0(\server_power_control/psu_on_off26 ), 
    .A0(\server_power_control/efuse_dlylde_0 ), 
    .M0(\server_power_control/next_state[3] ), .CLK(clock_c), 
    .F0(\server_power_control/efuse_dlye ), 
    .Q0(\server_power_control/current_state[3] ), 
    .F1(\server_power_control/next_state113 ));
  server_power_control_SLICE_534 \server_power_control/SLICE_534 ( 
    .D1(\server_power_control/psu_on_off26_5 ), 
    .C1(\server_power_control/efuse_dly[8] ), 
    .B1(\server_power_control/efuse_dly[1] ), 
    .A1(\server_power_control/psu_on_off26_4 ), 
    .D0(\server_power_control/next_state113 ), 
    .C0(\server_power_control/efuse_done_0_sqmuxa_2 ), 
    .B0(\server_power_control/un1_efuse_dly_0_sqmuxa_2_1 ), 
    .A0(\server_power_control/psu_on_off26 ), 
    .F0(\server_power_control/un1_efuse_dly_0_sqmuxa_2 ), 
    .F1(\server_power_control/psu_on_off26 ));
  server_power_control_SLICE_535 \server_power_control/SLICE_535 ( 
    .D1(\server_power_control/next_state105 ), 
    .C1(\server_power_control/wait_time_out_0_sqmuxa ), 
    .D0(\server_power_control/wait_time_out_0_sqmuxa_1 ), 
    .C0(\server_power_control/un1_wait_time_out_0_sqmuxa_1_1 ), 
    .B0(\server_power_control/next_state111 ), .A0(int_100ms_en), 
    .F0(\server_power_control/un1_wait_time_out_0_sqmuxa_1 ), 
    .F1(\server_power_control/un1_wait_time_out_0_sqmuxa_1_1 ));
  server_power_control_SLICE_536 \server_power_control/SLICE_536 ( 
    .D1(\server_power_control/psu_dly11_4 ), 
    .C1(\server_power_control/psu_dly11_5 ), 
    .B1(\server_power_control/psu_dly[7] ), 
    .A1(\server_power_control/psu_dly[6] ), 
    .D0(\server_power_control/current_state[1] ), 
    .C0(\server_power_control/psu_dly11 ), .F0(\server_power_control/N_87_i ), 
    .F1(\server_power_control/psu_dly11 ));
  server_power_control_SLICE_537 \server_power_control/SLICE_537 ( 
    .D1(\server_power_control/efuse_done13_4 ), 
    .C1(\server_power_control/efuse_dly[7] ), 
    .B1(\server_power_control/efuse_dly[2] ), 
    .A1(\server_power_control/efuse_done13_5 ), .D0(bp_ncp_gok_c), 
    .C0(\server_power_control/efuse_done13 ), .B0(ncp0_gok_c), 
    .A0(\server_power_control/next_state108 ), 
    .M1(\server_power_control/next_state[2] ), 
    .M0(\server_power_control/next_state[1] ), .CLK(clock_c), 
    .F0(\server_power_control/efuse_dly_0_sqmuxa ), 
    .Q0(\server_power_control/current_state[1] ), 
    .F1(\server_power_control/efuse_done13 ), 
    .Q1(\server_power_control/current_state[2] ));
  server_power_control_SLICE_538 \server_power_control/SLICE_538 ( 
    .D1(\server_power_control/current_state[0] ), 
    .C1(\server_power_control/current_state[1] ), 
    .B1(\server_power_control/current_state[3] ), 
    .A1(\server_power_control/current_state[2] ), 
    .D0(\server_power_control/psu_on_off17 ), 
    .C0(\server_power_control/next_state112 ), .A0(int_1ms_en), 
    .F0(\server_power_control/wait_time_out_0_sqmuxa_1 ), 
    .F1(\server_power_control/next_state112 ));
  server_power_control_SLICE_539 \server_power_control/SLICE_539 ( 
    .D1(\server_power_control/next_state101_8 ), 
    .C1(\server_power_control/next_state101_9 ), 
    .B1(\server_power_control/next_state101_11 ), 
    .A1(\server_power_control/next_state101_10 ), .D0(a_gpio5_c), 
    .C0(\server_power_control/next_state101 ), 
    .A0(\server_power_control/is_normal_reboot ), 
    .F0(\server_power_control/N_125_1 ), 
    .F1(\server_power_control/next_state101 ));
  server_power_control_SLICE_540 \server_power_control/SLICE_540 ( 
    .D1(\server_power_control/cpu_dly[1] ), 
    .C1(\server_power_control/psu_on_off17_3 ), 
    .B1(\server_power_control/psu_on_off17_4 ), 
    .A1(\server_power_control/cpu_dly[4] ), 
    .D0(\server_power_control/psu_on_off17 ), 
    .B0(\server_power_control/next_state112 ), 
    .F0(\server_power_control/efuse_done_0_sqmuxa_1 ), 
    .F1(\server_power_control/psu_on_off17 ));
  server_power_control_SLICE_541 \server_power_control/SLICE_541 ( 
    .D1(\server_power_control/efuse_done_0_sqmuxa_2 ), 
    .C1(\server_power_control/un1_is_reboot_0_sqmuxa_1 ), 
    .B1(\server_power_control/next_state105 ), 
    .A1(\server_power_control/next_state110_1 ), 
    .D0(\server_power_control/current_state[0] ), .C0(a_gpio5_c), 
    .B0(\server_power_control/current_state[2] ), 
    .A0(\server_power_control/is_normal_reboot ), 
    .F0(\server_power_control/un1_is_reboot_0_sqmuxa_1 ), 
    .F1(\server_power_control/un1_is_reboot_0_sqmuxa ));
  server_power_control_SLICE_542 \server_power_control/SLICE_542 ( 
    .C1(\server_power_control/wait_time_out_cnt[12] ), 
    .A1(\server_power_control/wait_time_out_cnt[3] ), 
    .D0(\server_power_control/g0_13 ), .C0(\server_power_control/g0_5 ), 
    .B0(\server_power_control/wait_time_out_cnt[13] ), 
    .A0(\server_power_control/wait_time_out_cnt[14] ), 
    .F0(\server_power_control/g0_16 ), .F1(\server_power_control/g0_5 ));
  i2c0_slave_inst0_SLICE_543 \i2c0_slave_inst0/SLICE_543 ( 
    .D1(\i2c0_slave_inst0/bit_cnt[1] ), .B1(\i2c0_slave_inst0/bit_cnt[2] ), 
    .A1(\i2c0_slave_inst0/bit_cnt[0] ), 
    .D0(\i2c0_slave_inst0/scl_in_clean_dly[0] ), .C0(\i2c0_slave_inst0/N_406 ), 
    .B0(\i2c0_slave_inst0/current_state[1] ), 
    .A0(\i2c0_slave_inst0/scl_in_clean_dly[1] ), 
    .M0(\i2c0_slave_inst0/sda_in_clean ), 
    .CE(\i2c0_slave_inst0/opcode_0_sqmuxa ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/opcode_0_sqmuxa ), .Q0(\i2c0_slave_inst0/opcode ), 
    .F1(\i2c0_slave_inst0/N_406 ));
  i2c0_slave_inst0_SLICE_544 \i2c0_slave_inst0/SLICE_544 ( 
    .C1(\i2c0_slave_inst0/bit_cnt[0] ), .B1(\i2c0_slave_inst0/bit_cnt[1] ), 
    .A1(\i2c0_slave_inst0/bit_cnt[2] ), 
    .D0(\i2c0_slave_inst0/scl_in_clean_dly[1] ), 
    .C0(\i2c0_slave_inst0/rcv_bit18 ), 
    .B0(\i2c0_slave_inst0/scl_in_clean_dly[0] ), 
    .M0(\i2c0_slave_inst0/sda_in_clean ), 
    .CE(\i2c0_slave_inst0/rcv_bit_RNO[0] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/rcv_bit_RNO[1] ), .Q0(\i2c0_slave_inst0/rcv_bit[0] ), 
    .F1(\i2c0_slave_inst0/rcv_bit18 ));
  i2c0_slave_inst0_SLICE_545 \i2c0_slave_inst0/SLICE_545 ( 
    .D1(\i2c0_slave_inst0/scl_in_clean_dly[0] ), 
    .B1(\i2c0_slave_inst0/scl_in_clean_dly[1] ), 
    .D0(\i2c0_slave_inst0/bit_cnt[0] ), .C0(\i2c0_slave_inst0/bit_cnt[1] ), 
    .B0(\i2c0_slave_inst0/bit_cnt[2] ), .A0(\i2c0_slave_inst0/rcv_bit22 ), 
    .M0(\i2c0_slave_inst0/sda_in_clean ), 
    .CE(\i2c0_slave_inst0/rcv_bit_RNO[1] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/rcv_bit_RNO[2] ), .Q0(\i2c0_slave_inst0/rcv_bit[1] ), 
    .F1(\i2c0_slave_inst0/rcv_bit22 ));
  SLICE_546 SLICE_546( .D1(\i2c0_slave_inst0/current_state[4] ), 
    .C1(\i2c0_slave_inst0/N_142 ), .B1(\i2c0_slave_inst0/current_state[6] ), 
    .A1(\i2c0_slave_inst0/next_state_i_a8_2_0[0] ), 
    .D0(\i2c0_slave_inst0/bit_cnt[1] ), .C0(\i2c0_slave_inst0/start_next_bit ), 
    .B0(\i2c0_slave_inst0/bit_cnt[0] ), .A0(\i2c0_slave_inst0/bit_cnt[2] ), 
    .M0(e2prom_is_rw), .CE(\eeprom_i2c_inst/i2c_start_4 ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/N_142 ), .Q0(\eeprom_i2c_inst/i2c_rw ), 
    .F1(\i2c0_slave_inst0/N_173 ));
  SLICE_547 SLICE_547( .D1(\i2c0_slave_inst0/start_en ), 
    .B1(\i2c0_slave_inst0/start_next_bit ), .D0(\i2c0_slave_inst0/N_111 ), 
    .C0(\i2c0_slave_inst0/N_171 ), .B0(\i2c0_slave_inst0/current_state[1] ), 
    .A0(\i2c0_slave_inst0/time_out_en ), .M0(\eeprom_i2c_inst/i2c_busy ), 
    .CE(\eeprom_i2c_inst/un1_i2c_start23_i_0 ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/current_state_ns_i_0[1] ), 
    .Q0(\eeprom_i2c_inst/i2c_wait ), .F1(\i2c0_slave_inst0/N_111 ));
  i2c0_slave_inst0_SLICE_548 \i2c0_slave_inst0/SLICE_548 ( 
    .C1(\i2c0_slave_inst0/current_state[6] ), 
    .B1(\i2c0_slave_inst0/current_state[2] ), 
    .A1(\i2c0_slave_inst0/current_state[3] ), .D0(\i2c0_slave_inst0/N_404 ), 
    .C0(\i2c0_slave_inst0/N_108 ), .B0(\i2c0_slave_inst0/current_state[1] ), 
    .A0(\i2c0_slave_inst0/is_slave_send_2_sqmuxa_1 ), 
    .F0(\i2c0_slave_inst0.un1_is_slave_send32_i ), 
    .F1(\i2c0_slave_inst0/N_108 ));
  i2c0_slave_inst0_SLICE_549 \i2c0_slave_inst0/SLICE_549 ( 
    .D1(\i2c0_slave_inst0/start_next_bit ), 
    .B1(\i2c0_slave_inst0/start_next_bit_1d ), .D0(\i2c0_slave_inst0/N_159 ), 
    .C0(\i2c0_slave_inst0/un1_start_next_bit ), 
    .B0(\i2c0_slave_inst0/current_state[4] ), 
    .A0(\i2c0_slave_inst0/is_slave_send_1_sqmuxa_0 ), 
    .F0(\i2c0_slave_inst0/is_slave_send_2_sqmuxa_1 ), 
    .F1(\i2c0_slave_inst0/un1_start_next_bit ));
  i2c0_slave_inst0_SLICE_550 \i2c0_slave_inst0/SLICE_550 ( 
    .D1(\i2c0_slave_inst0/current_state[5] ), .C1(\i2c0_slave_inst0/start_en ), 
    .B1(\i2c0_slave_inst0/current_state[4] ), .A1(\i2c0_slave_inst0/opcode ), 
    .D0(\i2c0_slave_inst0/next_state_i_0_1[1] ), .C0(\i2c0_slave_inst0/N_142 ), 
    .B0(\i2c0_slave_inst0/next_state_i_0_a3_0_0[1] ), 
    .A0(\i2c0_slave_inst0/N_108 ), .F0(\i2c0_slave_inst0/un1_stretch_en_2_1 ), 
    .F1(\i2c0_slave_inst0/next_state_i_0_a3_0_0[1] ));
  i2c0_slave_inst0_SLICE_551 \i2c0_slave_inst0/SLICE_551 ( 
    .D1(\i2c0_slave_inst0/sda_in_clean_dly[0] ), .C1(\i2c0_slave_inst0/N_179 ), 
    .B1(\i2c0_slave_inst0/scl_in_clean ), .A1(\i2c0_slave_inst0/sda_in_clean ), 
    .D0(\i2c0_slave_inst0/next_state_i_0[2] ), 
    .C0(\i2c0_slave_inst0/next_state_i_1[2] ), .B0(\i2c0_slave_inst0/N_166 ), 
    .A0(\i2c0_slave_inst0/next_state_i_3[2] ), .F0(\i2c0_slave_inst0/N_159 ), 
    .F1(\i2c0_slave_inst0/next_state_i_1[2] ));
  i2c0_slave_inst0_SLICE_552 \i2c0_slave_inst0/SLICE_552 ( 
    .D1(\i2c0_slave_inst0/next_state_i_0_0[1] ), .C1(\i2c0_slave_inst0/N_406 ), 
    .B1(\i2c0_slave_inst0/next_state_i_0_a3_0[1] ), 
    .A1(\i2c0_slave_inst0/N_74 ), 
    .D0(\i2c0_slave_inst0/next_state_i_0_a3_0_0[1] ), 
    .C0(\i2c0_slave_inst0/N_142 ), .B0(\i2c0_slave_inst0/next_state_i_0_1[1] ), 
    .A0(\i2c0_slave_inst0/start_next_bit_1d ), 
    .F0(\i2c0_slave_inst0/is_slave_send_1_sqmuxa_0 ), 
    .F1(\i2c0_slave_inst0/next_state_i_0_1[1] ));
  i2c0_slave_inst0_SLICE_553 \i2c0_slave_inst0/SLICE_553 ( 
    .D1(\i2c0_slave_inst0/delay_cnt[6] ), .C1(\i2c0_slave_inst0/delay_cnt[7] ), 
    .B1(\i2c0_slave_inst0/delay_cnt[5] ), .A1(\i2c0_slave_inst0/delay_cnt[4] ), 
    .D0(\i2c0_slave_inst0/un1_delay_cnt_3_4 ), 
    .C0(\i2c0_slave_inst0/un1_delay_cnt15_1 ), 
    .B0(\i2c0_slave_inst0/un1_delay_cnt_3_5 ), 
    .A0(\i2c0_slave_inst0/delay_cnt_en ), 
    .M1(\i2c0_slave_inst0/scl_in_dly[1] ), 
    .M0(\i2c0_slave_inst0/scl_in_dly[0] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/N_54 ), .Q0(\i2c0_slave_inst0/scl_in_dly[1] ), 
    .F1(\i2c0_slave_inst0/un1_delay_cnt_3_5 ), 
    .Q1(\i2c0_slave_inst0/scl_in_dly[2] ));
  i2c0_slave_inst0_SLICE_554 \i2c0_slave_inst0/SLICE_554 ( 
    .D1(\i2c0_slave_inst0/delay_cnt[3] ), .C1(\i2c0_slave_inst0/delay_cnt[0] ), 
    .B1(\i2c0_slave_inst0/delay_cnt[1] ), .A1(\i2c0_slave_inst0/delay_cnt[2] ), 
    .D0(\i2c0_slave_inst0/un1_delay_cnt_3_5 ), 
    .C0(\i2c0_slave_inst0/un1_delay_cnt15_1 ), 
    .B0(\i2c0_slave_inst0/un1_delay_cnt_3_4 ), 
    .A0(\i2c0_slave_inst0/delay_cnt_en ), 
    .M1(\i2c0_slave_inst0/scl_in_dly[3] ), 
    .M0(\i2c0_slave_inst0/scl_in_dly[2] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/delay_cnte ), .Q0(\i2c0_slave_inst0/scl_in_dly[3] ), 
    .F1(\i2c0_slave_inst0/un1_delay_cnt_3_4 ), 
    .Q1(\i2c0_slave_inst0/scl_in_dly[4] ));
  i2c0_slave_inst0_SLICE_555 \i2c0_slave_inst0/SLICE_555 ( 
    .C1(\i2c0_slave_inst0/sda_in_clean_dly[0] ), 
    .B1(\i2c0_slave_inst0/scl_in_clean ), .A1(\i2c0_slave_inst0/sda_in_clean ), 
    .D0(\i2c0_slave_inst0/timeout_cnt[1] ), .C0(\i2c0_slave_inst0/N_416 ), 
    .B0(\i2c0_slave_inst0/timeout_cnt_en ), .A0(\i2c0_slave_inst0/N_234_1 ), 
    .M0(\i2c0_slave_inst0/rcv_bit[7] ), 
    .CE(\i2c0_slave_inst0/slave_addr_out_0_sqmuxa ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/N_236_i ), .Q0(\i2c0_slave_inst0/next_state16_6_i ), 
    .F1(\i2c0_slave_inst0/N_416 ));
  i2c0_slave_inst0_SLICE_556 \i2c0_slave_inst0/SLICE_556 ( 
    .D1(\i2c0_slave_inst0/bit_cnt[0] ), .C1(\i2c0_slave_inst0/bit_cnt[2] ), 
    .B1(\i2c0_slave_inst0/current_state[3] ), 
    .A1(\i2c0_slave_inst0/bit_cnt[1] ), 
    .D0(\i2c0_slave_inst0/current_state[5] ), 
    .C0(\i2c0_slave_inst0/N_49_i_0_i ), .B0(\i2c0_slave_inst0/word_addr14 ), 
    .A0(\i2c0_slave_inst0/N_406 ), .F0(\i2c0_slave_inst0/N_18 ), 
    .F1(\i2c0_slave_inst0/N_49_i_0_i ));
  i2c0_slave_inst0_SLICE_557 \i2c0_slave_inst0/SLICE_557 ( 
    .D1(\i2c0_slave_inst0/timeout_cnt[4] ), 
    .C1(\i2c0_slave_inst0/timeout_cnt[0] ), 
    .B1(\i2c0_slave_inst0/timeout_cnt[3] ), 
    .A1(\i2c0_slave_inst0/timeout_cnt[2] ), 
    .D0(\i2c0_slave_inst0/un1_timeout_cnt_en17_i_a3_0_1 ), 
    .C0(\i2c0_slave_inst0/start ), 
    .B0(\i2c0_slave_inst0/un1_timeout_cnt_en17_i_a3_0_2 ), 
    .A0(\i2c0_slave_inst0/N_428 ), .F0(\i2c0_slave_inst0/N_52 ), 
    .F1(\i2c0_slave_inst0/un1_timeout_cnt_en17_i_a3_0_2 ));
  i2c0_slave_inst0_SLICE_558 \i2c0_slave_inst0/SLICE_558 ( 
    .C1(\i2c0_slave_inst0/start_next_bit ), .B1(\i2c0_slave_inst0/rcv_ack ), 
    .A1(\i2c0_slave_inst0/current_state[2] ), .D0(\i2c0_slave_inst0/N_419 ), 
    .C0(\i2c0_slave_inst0/N_111 ), .B0(\i2c0_slave_inst0/N_121 ), 
    .A0(\i2c0_slave_inst0/current_state[0] ), 
    .F0(\i2c0_slave_inst0/current_state_ns_0_0_1[0] ), 
    .F1(\i2c0_slave_inst0/N_419 ));
  i2c0_slave_inst0_SLICE_559 \i2c0_slave_inst0/SLICE_559 ( 
    .D1(\i2c0_slave_inst0/N_114 ), .C1(\i2c0_slave_inst0/current_state[1] ), 
    .B1(\i2c0_slave_inst0/current_state[3] ), .A1(\i2c0_slave_inst0/N_111 ), 
    .D0(\i2c0_slave_inst0/start_next_bit ), 
    .C0(\i2c0_slave_inst0/current_state_ns_i_0[4] ), 
    .B0(\i2c0_slave_inst0/N_406 ), .A0(\i2c0_slave_inst0/current_state[4] ), 
    .F0(\i2c0_slave_inst0/current_state_ns_i_1[4] ), 
    .F1(\i2c0_slave_inst0/current_state_ns_i_0[4] ));
  i2c0_slave_inst0_SLICE_560 \i2c0_slave_inst0/SLICE_560 ( 
    .D1(\i2c0_slave_inst0/next_state16_1_i ), 
    .C1(\i2c0_slave_inst0/next_state16_2_i ), 
    .B1(\i2c0_slave_inst0/next_state16_0_i ), 
    .A1(\i2c0_slave_inst0/next_state16_NE_4 ), 
    .D0(\i2c0_slave_inst0/current_state[1] ), .C0(\i2c0_slave_inst0/N_181 ), 
    .B0(\i2c0_slave_inst0/next_state16_NE ), 
    .F0(\i2c0_slave_inst0/next_state_i_3[2] ), 
    .F1(\i2c0_slave_inst0/next_state16_NE ));
  i2c0_slave_inst0_SLICE_561 \i2c0_slave_inst0/SLICE_561 ( 
    .D1(\i2c0_slave_inst0/scl_in_clean ), 
    .C1(\i2c0_slave_inst0/sda_in_clean_dly[0] ), 
    .B1(\i2c0_slave_inst0/sda_in_clean ), 
    .A1(\i2c0_slave_inst0/current_state[0] ), 
    .D0(\i2c0_slave_inst0/time_out_en ), .C0(\i2c0_slave_inst0/N_171 ), 
    .F0(\i2c0_slave_inst0/N_121 ), .F1(\i2c0_slave_inst0/N_171 ));
  i2c0_slave_inst0_SLICE_562 \i2c0_slave_inst0/SLICE_562 ( 
    .C1(\i2c0_slave_inst0/before_state[0] ), 
    .B1(\i2c0_slave_inst0/before_state[1] ), 
    .A1(\i2c0_slave_inst0/before_state[2] ), 
    .D0(\i2c0_slave_inst0/current_state[4] ), 
    .C0(\i2c0_slave_inst0/start_next_bit ), .B0(\i2c0_slave_inst0/N_68 ), 
    .A0(\i2c0_slave_inst0/opcode ), .F0(\i2c0_slave_inst0/N_181 ), 
    .F1(\i2c0_slave_inst0/N_68 ));
  i2c0_slave_inst0_SLICE_563 \i2c0_slave_inst0/SLICE_563 ( 
    .D1(\i2c0_slave_inst0/bit_cnt[0] ), .B1(\i2c0_slave_inst0/bit_cnt[2] ), 
    .A1(\i2c0_slave_inst0/bit_cnt[1] ), .D0(\data_out_r[4] ), 
    .C0(\i2c0_slave_inst0/un1_bit_cnt_5 ), 
    .B0(\i2c0_slave_inst0/current_state[5] ), 
    .M0(\i2c0_slave_inst0/sda_in_clean ), 
    .CE(\i2c0_slave_inst0/rcv_bit_RNO[7] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/rd_data_i_m[4] ), .Q0(\i2c0_slave_inst0/rcv_bit[7] ), 
    .F1(\i2c0_slave_inst0/un1_bit_cnt_5 ));
  i2c0_slave_inst0_SLICE_564 \i2c0_slave_inst0/SLICE_564 ( 
    .D1(\i2c0_slave_inst0/bit_cnt[0] ), .C1(\i2c0_slave_inst0/bit_cnt[2] ), 
    .A1(\i2c0_slave_inst0/bit_cnt[1] ), .D0(\data_out_r[2] ), 
    .C0(\i2c0_slave_inst0/current_state[5] ), 
    .B0(\i2c0_slave_inst0/un1_bit_cnt_7 ), 
    .M0(\i2c0_slave_inst0/sda_in_clean ), 
    .CE(\i2c0_slave_inst0/rcv_bit_RNO[5] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/rd_data_i_m[2] ), .Q0(\i2c0_slave_inst0/rcv_bit[5] ), 
    .F1(\i2c0_slave_inst0/un1_bit_cnt_7 ));
  i2c0_slave_inst0_SLICE_565 \i2c0_slave_inst0/SLICE_565 ( 
    .C1(\i2c0_slave_inst0/current_state[4] ), .A1(\i2c0_slave_inst0/opcode ), 
    .D0(\i2c0_slave_inst0/current_state[2] ), .C0(\i2c0_slave_inst0/start_en ), 
    .B0(\i2c0_slave_inst0/N_432 ), .A0(\i2c0_slave_inst0/current_state[5] ), 
    .F0(\i2c0_slave_inst0/N_137 ), .F1(\i2c0_slave_inst0/N_432 ));
  i2c0_slave_inst0_SLICE_566 \i2c0_slave_inst0/SLICE_566 ( 
    .D1(\i2c0_slave_inst0/current_state[6] ), 
    .C1(\i2c0_slave_inst0/start_next_bit ), 
    .B1(\i2c0_slave_inst0/current_state[3] ), 
    .A1(\i2c0_slave_inst0/current_state[2] ), 
    .D0(\i2c0_slave_inst0/sda_in_clean_dly[0] ), .C0(\i2c0_slave_inst0/N_100 ), 
    .B0(\i2c0_slave_inst0/scl_in_clean ), .A0(\i2c0_slave_inst0/sda_in_clean ), 
    .F0(\i2c0_slave_inst0/next_state_i_0_0[1] ), .F1(\i2c0_slave_inst0/N_100 ));
  i2c0_slave_inst0_SLICE_567 \i2c0_slave_inst0/SLICE_567 ( 
    .D1(\data_out_r[7] ), .C1(\i2c0_slave_inst0/un1_bit_cnt_2 ), 
    .B1(\i2c0_slave_inst0/un1_bit_cnt_6 ), .A1(\data_out_r[3] ), 
    .D0(\i2c0_slave_inst0/bit_cnt[0] ), .B0(\i2c0_slave_inst0/bit_cnt[2] ), 
    .A0(\i2c0_slave_inst0/bit_cnt[1] ), .M0(\i2c0_slave_inst0/start ), 
    .CE(\i2c0_slave_inst0/N_52 ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/un1_bit_cnt_2 ), 
    .Q0(\i2c0_slave_inst0/timeout_cnt_en ), 
    .F1(\i2c0_slave_inst0/sda_out_reg_13_iv_5_1 ));
  timer_inst_SLICE_568 \timer_inst/SLICE_568 ( 
    .C1(\timer_inst/int_100ms_cnt[15] ), .B1(\timer_inst/int_100ms_cnt[16] ), 
    .D0(\timer_inst/int_100ms_cnt11_15 ), .C0(\timer_inst/int_100ms_cnt11_7 ), 
    .B0(\timer_inst/int_100ms_cnt[2] ), .A0(\timer_inst/int_100ms_cnt[1] ), 
    .F0(\timer_inst/int_100ms_cnt11_18 ), .F1(\timer_inst/int_100ms_cnt11_7 ));
  SLICE_569 SLICE_569( .D1(\por/rst_btn_dly[3] ), .C1(\por/rst_btn_dly[4] ), 
    .B1(\por/rst_btn_dly[5] ), .A1(\por/un1_reset_1 ), 
    .D0(\por/rst_btn_dly[2] ), .C0(\por/rst_btn_dly[1] ), 
    .M1(\i2c0_slave_inst0/rcv_bit[1] ), .M0(\i2c0_slave_inst0/rcv_bit[0] ), 
    .CE(\i2c0_slave_inst0/wr_data_0_sqmuxa ), .CLK(clock_c), 
    .F0(\por/un1_reset_1 ), .Q0(\bmc_write_data[0] ), .F1(reset_i), 
    .Q1(\bmc_write_data[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_570 \eeprom_i2c_inst/e2prom_i2c/SLICE_570 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_7 ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_7 ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[1] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[1] ), 
    .Q0(\eeprom_i2c_inst/rd_data[1] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/rd_datace[7] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_571 \eeprom_i2c_inst/e2prom_i2c/SLICE_571 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/e2prom_scl_out_en ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/N_45 ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/e2prom_scl_out_en ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/N_45 ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .M1(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[4] ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[3] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_scl_out_en20_1_i_0 ), 
    .Q0(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[4] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/det_delay_cnte ), 
    .Q1(\eeprom_i2c_inst/e2prom_i2c/sda_in_dly[5] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_572 \eeprom_i2c_inst/e2prom_i2c/SLICE_572 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_7 ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_7 ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/rd_datace[3] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/rd_datace[2] ), 
    .Q0(\eeprom_i2c_inst/rd_data[3] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/rd_datace[6] ));
  SLICE_573 SLICE_573( .D1(\server_power_control/current_state[0] ), 
    .C1(\server_power_control/current_state[3] ), 
    .B1(\server_power_control/current_state[1] ), 
    .A1(\server_power_control/current_state[2] ), 
    .D0(\server_power_control/current_state[0] ), 
    .C0(\server_power_control/current_state[3] ), 
    .B0(\server_power_control/current_state[1] ), 
    .A0(\server_power_control/current_state[2] ), 
    .M1(\i2c0_slave_inst0/rcv_bit[3] ), .M0(\i2c0_slave_inst0/rcv_bit[2] ), 
    .CE(\i2c0_slave_inst0/wr_data_0_sqmuxa ), .CLK(clock_c), 
    .F0(\server_power_control/cpu_off_done_0_sqmuxa_1_1 ), 
    .Q0(\bmc_write_data[2] ), .F1(\server_power_control/g0_14 ), 
    .Q1(\bmc_write_data[3] ));
  i2c0_slave_inst0_SLICE_574 \i2c0_slave_inst0/SLICE_574 ( 
    .D1(\i2c0_slave_inst0/rcv_bit22 ), .C1(\i2c0_slave_inst0/bit_cnt[0] ), 
    .B1(\i2c0_slave_inst0/bit_cnt[1] ), .A1(\i2c0_slave_inst0/bit_cnt[2] ), 
    .D0(\i2c0_slave_inst0/rcv_bit22 ), .C0(\i2c0_slave_inst0/bit_cnt[0] ), 
    .B0(\i2c0_slave_inst0/bit_cnt[1] ), .A0(\i2c0_slave_inst0/bit_cnt[2] ), 
    .M0(\i2c0_slave_inst0/sda_in_clean ), 
    .CE(\i2c0_slave_inst0/rcv_bit_RNO[2] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/rcv_bit_RNO[3] ), .Q0(\i2c0_slave_inst0/rcv_bit[2] ), 
    .F1(\i2c0_slave_inst0/rcv_bit_RNO[7] ));
  i2c0_slave_inst0_SLICE_575 \i2c0_slave_inst0/SLICE_575 ( 
    .D1(\i2c0_slave_inst0/bit_cnt[2] ), .C1(\i2c0_slave_inst0/rcv_bit22 ), 
    .B1(\i2c0_slave_inst0/bit_cnt[0] ), .A1(\i2c0_slave_inst0/bit_cnt[1] ), 
    .D0(\i2c0_slave_inst0/bit_cnt[2] ), .C0(\i2c0_slave_inst0/rcv_bit22 ), 
    .B0(\i2c0_slave_inst0/bit_cnt[0] ), .A0(\i2c0_slave_inst0/bit_cnt[1] ), 
    .M0(\i2c0_slave_inst0/sda_in_clean ), 
    .CE(\i2c0_slave_inst0/rcv_bit_RNO[3] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/rcv_bit_RNO[4] ), .Q0(\i2c0_slave_inst0/rcv_bit[3] ), 
    .F1(\i2c0_slave_inst0/rcv_bit_RNO[6] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_576 \eeprom_i2c_inst/e2prom_i2c/SLICE_576 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/un1_current_state_7 ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[4] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/rd_datace[3] ), 
    .Q0(\eeprom_i2c_inst/rd_data[4] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_sn_N_6 ));
  usb_reset_ctrl_inst_SLICE_577 \usb_reset_ctrl_inst/SLICE_577 ( 
    .D1(\usb_reset_ctrl_inst/current_state[1] ), 
    .C1(\usb_reset_ctrl_inst/current_state[2] ), 
    .B1(\usb_reset_ctrl_inst/current_state[0] ), .A1(int_1ms_en), 
    .D0(\usb_reset_ctrl_inst/current_state[1] ), 
    .C0(\usb_reset_ctrl_inst/current_state[2] ), 
    .B0(\usb_reset_ctrl_inst/current_state[0] ), 
    .F0(\usb_reset_ctrl_inst/current_state_RNI5EMP[0] ), 
    .F1(\usb_reset_ctrl_inst/urst_delaye ));
  usb_reset_ctrl_inst_SLICE_578 \usb_reset_ctrl_inst/SLICE_578 ( 
    .D1(\cpld_register_addr[4] ), .C1(\cpld_register_addr[3] ), 
    .B1(\cpld_register_addr[2] ), .A1(\cpld_register_addr[1] ), 
    .D0(\cpld_register_addr[3] ), .C0(\usb_reset_ctrl_inst/N_51 ), 
    .B0(\cpld_register_addr[2] ), .A0(\cpld_register_addr[1] ), 
    .F0(e2prom_data_wr_1_sqmuxa), 
    .F1(\usb_reset_ctrl_inst/data_out_r_20_sn_N_52 ));
  usb_reset_ctrl_inst_SLICE_579 \usb_reset_ctrl_inst/SLICE_579 ( 
    .D1(\usb_reset_ctrl_inst/current_state[1] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[13] ), 
    .B1(\usb_reset_ctrl_inst/urst_delay[11] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[12] ), 
    .D0(\usb_reset_ctrl_inst/urst_delay[13] ), 
    .B0(\usb_reset_ctrl_inst/urst_delay[11] ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[12] ), 
    .F0(\usb_reset_ctrl_inst/N_144 ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_1_4_1 ));
  SLICE_580 SLICE_580( .D1(data_out_r_20_sn_N_16_1), 
    .C1(\cpld_register_addr[0] ), .B1(\cpld_register_addr[2] ), 
    .A1(\cpld_register_addr[1] ), .D0(\cpld_register_addr[4] ), 
    .C0(\cpld_register_addr[0] ), .B0(\cpld_register_addr[2] ), 
    .A0(\cpld_register_addr[1] ), 
    .F0(\usb_reset_ctrl_inst/data_out_r_20_sn_N_48 ), 
    .F1(\server_power_control/cpu_pwr_control/data_out_r_20_sn_N_16 ));
  server_power_control_switch_reset_control_SLICE_581 
    \server_power_control/switch_reset_control/SLICE_581 ( 
    .D1(\server_power_control/switch_reset_control/current_state[1] ), 
    .C1(\server_power_control/switch_reset_control/current_state[2] ), 
    .B1(int_1ms_en), 
    .A1(\server_power_control/switch_reset_control/current_state[0] ), 
    .D0(\server_power_control/switch_reset_control/current_state[1] ), 
    .C0(\server_power_control/switch_reset_control/current_state[2] ), 
    .B0(\server_power_control/switch_reset_control/current_state[0] ), 
    .F0(\server_power_control/switch_reset_control/un1_next_state43_0 ), 
    .F1(\server_power_control/switch_reset_control/switch_rst_cnte ));
  SLICE_582 SLICE_582( 
    .D1(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .C1(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .B1(\server_power_control/cpu_pwr_control/N_598 ), 
    .A1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .D0(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .C0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .A0(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .M1(\bmc_write_data[3] ), .M0(\bmc_write_data[2] ), 
    .CE(power_control_0_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/current_state_RNI16S31[1] ), 
    .Q0(\power_control[2] ), 
    .F1(\server_power_control/cpu_pwr_control/un1_next_state40_2_i_0_a2 ), 
    .Q1(\power_control[3] ));
  SLICE_583 SLICE_583( .D1(\server_power_control/cpu_pwr_on_off ), 
    .C1(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .B1(\server_power_control/cpu_pwr_control/pwr_all_on ), 
    .A1(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .C0(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .B0(\server_power_control/cpu_pwr_on_off ), 
    .A0(\server_power_control/cpu_pwr_control/current_state[0] ), 
    .M1(\bmc_write_data[5] ), .M0(\bmc_write_data[4] ), 
    .CE(reset_control_a_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/N_18 ), 
    .Q0(\reset_control_a[4] ), 
    .F1(\server_power_control/cpu_pwr_control/next_state_1_0_1[0] ), 
    .Q1(\reset_control_a[5] ));
  server_power_control_power_signal_detect_inst_SLICE_584 
    \server_power_control/power_signal_detect_inst/SLICE_584 ( 
    .D1(\server_power_control/power_signal_detect_inst/debounce_cnt[0] ), 
    .C1(\server_power_control/power_signal_detect_inst/debounce_cnt[3] ), 
    .B1(\server_power_control/power_signal_detect_inst/debounce_cnt[4] ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[1] ), 
    .D0(\server_power_control/power_signal_detect_inst/debounce_cnt[0] ), 
    .C0(\server_power_control/power_signal_detect_inst/debounce_cnt[3] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt[2] ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[1] ), 
    .F0(\server_power_control/power_signal_detect_inst/N_658 ), 
    .F1(\server_power_control/power_signal_detect_inst/N_652 ));
  server_power_control_SLICE_585 \server_power_control/SLICE_585 ( 
    .D1(\server_power_control/current_state[0] ), 
    .C1(\server_power_control/current_state[3] ), 
    .B1(\server_power_control/current_state[1] ), 
    .A1(\server_power_control/current_state[2] ), 
    .C0(\server_power_control/current_state[3] ), 
    .B0(\server_power_control/current_state[1] ), 
    .A0(\server_power_control/current_state[2] ), 
    .M0(\server_power_control/current_state[2] ), 
    .CE(\server_power_control.un1_next_state105_11_i ), .CLK(clock_c), 
    .F0(\server_power_control.N_40_i ), 
    .Q0(\server_power_control/cpu_pwr_on_off ), 
    .F1(\server_power_control/next_state111 ));
  i2c0_slave_inst0_SLICE_586 \i2c0_slave_inst0/SLICE_586 ( 
    .D1(\i2c0_slave_inst0/bit_cnt[1] ), .C1(\i2c0_slave_inst0/bit_cnt[2] ), 
    .A1(\i2c0_slave_inst0/bit_cnt[0] ), .D0(\i2c0_slave_inst0/bit_cnt[1] ), 
    .C0(\i2c0_slave_inst0/bit_cnt[2] ), .B0(\i2c0_slave_inst0/rcv_bit22 ), 
    .A0(\i2c0_slave_inst0/bit_cnt[0] ), .M0(\i2c0_slave_inst0/sda_in_clean ), 
    .CE(\i2c0_slave_inst0/rcv_bit_RNO[4] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/rcv_bit_RNO[5] ), .Q0(\i2c0_slave_inst0/rcv_bit[4] ), 
    .F1(\i2c0_slave_inst0/un1_bit_cnt_6 ));
  i2c0_slave_inst0_SLICE_587 \i2c0_slave_inst0/SLICE_587 ( 
    .D1(\i2c0_slave_inst0/current_state[5] ), 
    .C1(\i2c0_slave_inst0/current_state[3] ), 
    .B1(\i2c0_slave_inst0/current_state[1] ), 
    .D0(\i2c0_slave_inst0/current_state[5] ), 
    .C0(\i2c0_slave_inst0/current_state[3] ), 
    .B0(\i2c0_slave_inst0/current_state[1] ), .A0(\i2c0_slave_inst0/N_142 ), 
    .F0(\i2c0_slave_inst0/N_166 ), 
    .F1(\i2c0_slave_inst0/un1_stretch_en_i_a2[0] ));
  i2c0_slave_inst0_SLICE_588 \i2c0_slave_inst0/SLICE_588 ( 
    .D1(\i2c0_slave_inst0/current_state[4] ), 
    .C1(\i2c0_slave_inst0/current_state[6] ), 
    .B1(\i2c0_slave_inst0/start_next_bit ), .A1(\i2c0_slave_inst0/start_en ), 
    .D0(\i2c0_slave_inst0/start_en ), .C0(\i2c0_slave_inst0/current_state[6] ), 
    .B0(\i2c0_slave_inst0/current_state[4] ), .A0(\i2c0_slave_inst0/opcode ), 
    .F0(\i2c0_slave_inst0/N_74 ), .F1(\i2c0_slave_inst0/N_179 ));
  i2c0_slave_inst0_SLICE_589 \i2c0_slave_inst0/SLICE_589 ( 
    .D1(\i2c0_slave_inst0/timeout_cnt_en ), 
    .C1(\i2c0_slave_inst0/sda_in_clean_dly[0] ), 
    .B1(\i2c0_slave_inst0/scl_in_clean ), .A1(\i2c0_slave_inst0/sda_in_clean ), 
    .D0(\i2c0_slave_inst0/time_out_en ), 
    .C0(\i2c0_slave_inst0/sda_in_clean_dly[0] ), 
    .B0(\i2c0_slave_inst0/scl_in_clean ), .A0(\i2c0_slave_inst0/sda_in_clean ), 
    .F0(\i2c0_slave_inst0/N_114 ), .F1(\i2c0_slave_inst0/N_428 ));
  i2c0_slave_inst0_SLICE_590 \i2c0_slave_inst0/SLICE_590 ( 
    .D1(\i2c0_slave_inst0/bit_cnt[0] ), .B1(\i2c0_slave_inst0/bit_cnt[2] ), 
    .A1(\i2c0_slave_inst0/bit_cnt[1] ), .D0(\i2c0_slave_inst0/bit_cnt[0] ), 
    .B0(\i2c0_slave_inst0/bit_cnt[2] ), .A0(\i2c0_slave_inst0/bit_cnt[1] ), 
    .M0(\i2c0_slave_inst0/scl_in_clean_dly[0] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/un1_bit_cnt_4 ), 
    .Q0(\i2c0_slave_inst0/scl_in_clean_dly[1] ), 
    .F1(\i2c0_slave_inst0/un1_bit_cnt_3 ), 
    .Q1(\i2c0_slave_inst0/scl_in_dly[0] ));
  i2c0_slave_inst0_SLICE_591 \i2c0_slave_inst0/SLICE_591 ( 
    .D1(\i2c0_slave_inst0/current_state[0] ), 
    .B1(\i2c0_slave_inst0/current_state[4] ), 
    .A1(\i2c0_slave_inst0/current_state[6] ), 
    .D0(\i2c0_slave_inst0/current_state[0] ), .C0(\i2c0_slave_inst0/rcv_ack ), 
    .B0(\i2c0_slave_inst0/current_state[4] ), 
    .A0(\i2c0_slave_inst0/current_state[6] ), 
    .F0(\i2c0_slave_inst0/next_state_i_a8_3_1[0] ), 
    .F1(\i2c0_slave_inst0/current_state_ns_i_a5_0[1] ));
  uart_sol_inst_SLICE_592 \uart_sol_inst/SLICE_592 ( .D1(bmc_gpio24_c), 
    .B1(bmc_gpio25_c), .A1(un1_reset), .D0(bmc_gpio24_c), .B0(bmc_gpio25_c), 
    .A0(un1_reset), .F0(un1_reset_i), .F1(un1_reset_3_i));
  uart_sol_inst_SLICE_593 \uart_sol_inst/SLICE_593 ( .D1(un1_reset), 
    .C1(bmc_gpio24_c), .A1(bmc_gpio25_c), .D0(un1_reset), .C0(bmc_gpio24_c), 
    .A0(bmc_gpio25_c), .F0(un1_reset_2_i), .F1(un1_reset_1_i));
  SLICE_594 SLICE_594( .C1(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/next_state21 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/time_out_en ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), .M1(\bmc_write_data[1] ), 
    .M0(\bmc_write_data[0] ), .CE(e2prom_dev_addr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_276 ), .Q0(\e2prom_dev_addr[0] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_261 ), .Q1(\e2prom_dev_addr[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_595 \eeprom_i2c_inst/e2prom_i2c/SLICE_595 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[7] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[6] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/next_state21 ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/current_state[6] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_248 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[2] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_596 \eeprom_i2c_inst/e2prom_i2c/SLICE_596 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/before_state[1] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/opcode ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/before_state[1] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/before_state[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/opcode ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_184 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/next_state_a4_0_0[3] ));
  SLICE_597 SLICE_597( .D1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[8] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[1] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[2] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[0] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[6] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[1] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[2] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[4] ), .M1(\bmc_write_data[1] ), 
    .M0(\bmc_write_data[0] ), .CE(e2prom_byte_addr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/before_state_en_7[0] ), 
    .Q0(\e2prom_byte_addr[0] ), .F1(\eeprom_i2c_inst/e2prom_i2c/g0_0_6 ), 
    .Q1(\e2prom_byte_addr[1] ));
  SLICE_598 SLICE_598( .D1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ), .M1(\bmc_write_data[5] ), 
    .M0(\bmc_write_data[4] ), .CE(e2prom_byte_addr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/bit_cnt_5_i_a2_0_0[2] ), 
    .Q0(\e2prom_byte_addr[4] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_a2_0_0 ), 
    .Q1(\e2prom_byte_addr[5] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_599 \eeprom_i2c_inst/e2prom_i2c/SLICE_599 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[9] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/state_cnt[5] ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[9] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[8] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[1] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/state_cnt[5] ), 
    .M0(\eeprom_i2c_inst/e2prom_i2c/sda_in_clean ), 
    .CE(\eeprom_i2c_inst/e2prom_i2c/rd_datace[7] ), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/g0_1_4 ), 
    .Q0(\eeprom_i2c_inst/rd_data[7] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/g0_2_1 ));
  bmc_reset_ctrl_inst_SLICE_600 \bmc_reset_ctrl_inst/SLICE_600 ( 
    .D1(\bmc_reset_ctrl_inst/current_state[0] ), 
    .C1(\bmc_reset_ctrl_inst.prst_delay_4[2] ), 
    .D0(\bmc_reset_ctrl_inst/current_state[0] ), 
    .B0(\bmc_reset_ctrl_inst.prst_delay_4[2] ), 
    .A0(\bmc_reset_ctrl_inst/bmc_prst9 ), 
    .F0(\bmc_reset_ctrl_inst.un1_bmc_prst17_i_0 ), 
    .F1(\bmc_reset_ctrl_inst/un1_next_state24_0_0 ));
  usb_reset_ctrl_inst_SLICE_601 \usb_reset_ctrl_inst/SLICE_601 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[10] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[0] ), 
    .B1(\usb_reset_ctrl_inst/urst_delay[14] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[1] ), 
    .D0(\usb_reset_ctrl_inst/urst_delay[15] ), 
    .C0(\usb_reset_ctrl_inst/urst_delay[0] ), 
    .B0(\usb_reset_ctrl_inst/urst_delay[3] ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[1] ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_14 ), 
    .F1(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_5[1] ));
  usb_reset_ctrl_inst_SLICE_602 \usb_reset_ctrl_inst/SLICE_602 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[13] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[12] ), 
    .B1(\usb_reset_ctrl_inst/urst_delay[9] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[2] ), 
    .D0(\usb_reset_ctrl_inst/urst_delay[5] ), 
    .C0(\usb_reset_ctrl_inst/urst_delay[4] ), 
    .B0(\usb_reset_ctrl_inst/urst_delay[9] ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[2] ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_0 ), 
    .F1(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_7_3 ));
  usb_reset_ctrl_inst_SLICE_603 \usb_reset_ctrl_inst/SLICE_603 ( 
    .C1(\usb_reset_ctrl_inst/current_state[0] ), 
    .B1(\usb_reset_ctrl_inst/current_state[2] ), 
    .D0(\bmc_reset_ctrl_inst.sig_r1 ), 
    .C0(\usb_reset_ctrl_inst/current_state[0] ), 
    .B0(\usb_reset_ctrl_inst/current_state[2] ), 
    .A0(\bmc_reset_ctrl_inst.sig_r0 ), 
    .F0(\usb_reset_ctrl_inst/next_state_1_0_0_i_o2[1] ), 
    .F1(\usb_reset_ctrl_inst/N_806_i ));
  SLICE_604 SLICE_604( .D1(\cpld_register_addr[5] ), 
    .C1(\cpld_register_addr[0] ), .A1(\cpld_register_addr[1] ), 
    .D0(\cpld_register_addr[3] ), .C0(\cpld_register_addr[0] ), 
    .A0(\cpld_register_addr[1] ), .F0(data_out_r_20_sn_N_20), 
    .F1(\server_power_control/cpu_pwr_control/N_99 ));
  SLICE_605 SLICE_605( .C1(un1_reset), .B1(\reset_control_b[3] ), 
    .A1(sg0_pcie1_l0_reset_c), .D0(\reset_control_b[6] ), .C0(un1_reset), 
    .A0(sg0_pcie1_l0_reset_c), .M1(\bmc_write_data[1] ), 
    .M0(\bmc_write_data[0] ), .CE(reset_control_b_1_sqmuxa), .CLK(clock_c), 
    .F0(riser0_reset_c), .Q0(\reset_control_b[0] ), .F1(pcie_nvme0_rst_c), 
    .Q1(\reset_control_b[1] ));
  SLICE_606 SLICE_606( .D1(sg0_pcie1_l0_reset_c), .C1(un1_reset), 
    .B1(\reset_control_b[4] ), .D0(sg0_pcie1_l0_reset_c), 
    .C0(\reset_control_b[2] ), .B0(un1_reset), .M1(\bmc_write_data[7] ), 
    .M0(\bmc_write_data[6] ), .CE(reset_control_a_1_sqmuxa), .CLK(clock_c), 
    .F0(pcie_sata_rst_c), .Q0(\reset_control_a[6] ), .F1(pcie_nvme1_rst_c), 
    .Q1(\reset_control_a[7] ));
  server_power_control_power_signal_detect_inst_SLICE_607 
    \server_power_control/power_signal_detect_inst/SLICE_607 ( 
    .D1(\server_power_control/power_signal_detect_inst/debounce_cnt[12] ), 
    .C1(\server_power_control/power_signal_detect_inst/debounce_cnt[11] ), 
    .D0(\server_power_control/power_signal_detect_inst/debounce_cnt[12] ), 
    .C0(\server_power_control/power_signal_detect_inst/debounce_cnt[11] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt[10] ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[13] ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_7 ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_force_15slto12_0 ));
  server_power_control_power_signal_detect_inst_SLICE_608 
    \server_power_control/power_signal_detect_inst/SLICE_608 ( 
    .C1(\server_power_control/power_signal_detect_inst/low_time_cnt[12] ), 
    .B1(\server_power_control/power_signal_detect_inst/low_time_cnt[11] ), 
    .D0(\server_power_control/power_signal_detect_inst/low_time_cnt[13] ), 
    .C0(\server_power_control/power_signal_detect_inst/low_time_cnt[12] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt[11] ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[10] ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_nomral_300ms_1_7 ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_force_15s_1lto12_0 ));
  server_power_control_SLICE_609 \server_power_control/SLICE_609 ( 
    .C1(\server_power_control/efuse_dly[0] ), 
    .B1(\server_power_control/efuse_dly[4] ), 
    .A1(\server_power_control/efuse_dly[5] ), 
    .D0(\server_power_control/efuse_dly[6] ), 
    .C0(\server_power_control/efuse_dly[0] ), 
    .B0(\server_power_control/efuse_dly[1] ), 
    .A0(\server_power_control/efuse_dly[4] ), 
    .F0(\server_power_control/efuse_done13_5 ), 
    .F1(\server_power_control/psu_on_off26_4 ));
  i2c0_slave_inst0_SLICE_610 \i2c0_slave_inst0/SLICE_610 ( 
    .D1(\i2c0_slave_inst0/scl_in_clean_dly[1] ), 
    .B1(\i2c0_slave_inst0/scl_in_clean_dly[0] ), .A1(\i2c0_slave_inst0/N_406 ), 
    .D0(\i2c0_slave_inst0/scl_in_clean_dly[1] ), 
    .C0(\i2c0_slave_inst0/current_state[2] ), 
    .A0(\i2c0_slave_inst0/scl_in_clean_dly[0] ), 
    .F0(\i2c0_slave_inst0/rcv_ack_0_sqmuxa ), 
    .F1(\i2c0_slave_inst0/rcv_bit_RNO[0] ));
  i2c0_slave_inst0_SLICE_611 \i2c0_slave_inst0/SLICE_611 ( .D1(int_1ms_en), 
    .C1(\i2c0_slave_inst0/timeout_cnt[1] ), 
    .B1(\i2c0_slave_inst0/timeout_cnt_en ), .D0(int_1ms_en), 
    .C0(\i2c0_slave_inst0/timeout_cnt_en ), .B0(\i2c0_slave_inst0/N_416 ), 
    .M1(\i2c0_slave_inst0/sda_in_dly[3] ), 
    .M0(\i2c0_slave_inst0/sda_in_dly[2] ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/timeout_cnte ), 
    .Q0(\i2c0_slave_inst0/sda_in_dly[3] ), 
    .F1(\i2c0_slave_inst0/un1_timeout_cnt_en17_i_a3_0_1 ), 
    .Q1(\i2c0_slave_inst0/sda_in_dly[4] ));
  i2c0_slave_inst0_SLICE_612 \i2c0_slave_inst0/SLICE_612 ( 
    .D1(\i2c0_slave_inst0/start_next_bit ), .C1(\i2c0_slave_inst0/rcv_ack ), 
    .B1(\i2c0_slave_inst0/current_state[4] ), 
    .A1(\i2c0_slave_inst0/current_state[5] ), 
    .D0(\i2c0_slave_inst0/current_state[5] ), 
    .B0(\i2c0_slave_inst0/current_state[4] ), 
    .A0(\i2c0_slave_inst0/start_next_bit_1d ), 
    .M1(\i2c0_slave_inst0/rcv_bit[4] ), .M0(\i2c0_slave_inst0/rcv_bit[3] ), 
    .CE(\i2c0_slave_inst0/slave_addr_out_0_sqmuxa ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0.un1_is_slave_send_0_sqmuxa_i ), 
    .Q0(\i2c0_slave_inst0/next_state16_2_i ), 
    .F1(\i2c0_slave_inst0/current_state_ns_i_0[5] ), 
    .Q1(\i2c0_slave_inst0/next_state16_3 ));
  i2c0_slave_inst0_SLICE_613 \i2c0_slave_inst0/SLICE_613 ( 
    .B1(\i2c0_slave_inst0/current_state[0] ), 
    .A1(\i2c0_slave_inst0/current_state[2] ), 
    .D0(\i2c0_slave_inst0/start_next_bit ), .C0(\i2c0_slave_inst0/rcv_ack ), 
    .B0(\i2c0_slave_inst0/current_state[0] ), 
    .A0(\i2c0_slave_inst0/current_state[2] ), 
    .F0(\i2c0_slave_inst0/next_state_i_0[2] ), 
    .F1(\i2c0_slave_inst0/next_state_i_a8_2_0[0] ));
  i2c0_slave_inst0_SLICE_614 \i2c0_slave_inst0/SLICE_614 ( 
    .C1(\i2c0_slave_inst0/start_next_bit ), 
    .B1(\i2c0_slave_inst0/current_state[3] ), 
    .C0(\i2c0_slave_inst0/start_next_bit ), 
    .B0(\i2c0_slave_inst0/current_state[3] ), 
    .A0(\i2c0_slave_inst0/current_state[6] ), 
    .F0(\i2c0_slave_inst0/current_state_ns_i_a5_0[4] ), 
    .F1(\i2c0_slave_inst0/next_state_i_0_a3_0[1] ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_615 \eeprom_i2c_inst/e2prom_i2c/SLICE_615 
    ( .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[2] ), 
    .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/current_state[10] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/current_state[9] ), 
    .A0(\eeprom_i2c_inst/e2prom_i2c/current_state[8] ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4[3] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/un26_i_a4_1[1] ));
  SLICE_616 SLICE_616( .C1(\e2prom_byte_addr[7] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .A1(\e2prom_data_wr[7] ), .D0(\e2prom_byte_addr[2] ), 
    .C0(\e2prom_data_wr[2] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .M1(\bmc_write_data[5] ), .M0(\bmc_write_data[4] ), 
    .CE(e2prom_data_wr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_497 ), .Q0(\e2prom_data_wr[4] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_63 ), .Q1(\e2prom_data_wr[5] ));
  SLICE_617 SLICE_617( .D1(\e2prom_byte_addr[1] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .A1(\e2prom_data_wr[1] ), .C0(\e2prom_data_wr[3] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/current_state[4] ), 
    .A0(\e2prom_byte_addr[3] ), .M1(\bmc_write_data[7] ), 
    .M0(\bmc_write_data[6] ), .CE(e2prom_data_wr_1_sqmuxa), .CLK(clock_c), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/N_496 ), .Q0(\e2prom_data_wr[6] ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/N_498 ), .Q1(\e2prom_data_wr[7] ));
  eeprom_i2c_inst_SLICE_618 \eeprom_i2c_inst/SLICE_618 ( 
    .D1(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/N_486 ), 
    .D0(\eeprom_i2c_inst/e2prom_i2c/current_state[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/start_next_bit ), 
    .A0(\eeprom_i2c_inst/i2c_start ), .M1(\eeprom_i2c_inst/rd_data[3] ), 
    .M0(\eeprom_i2c_inst/rd_data[2] ), .CE(\eeprom_i2c_inst/rd_data_vld ), 
    .CLK(clock_c), .F0(\eeprom_i2c_inst/e2prom_i2c/N_199 ), 
    .Q0(\e2prom_data_rd[2] ), .F1(\eeprom_i2c_inst/e2prom_i2c/state_cnt ), 
    .Q1(\e2prom_data_rd[3] ));
  usb_reset_ctrl_inst_SLICE_619 \usb_reset_ctrl_inst/SLICE_619 ( 
    .D1(\usb_reset_ctrl_inst/urst_delay[13] ), 
    .C1(\usb_reset_ctrl_inst/urst_delay[8] ), 
    .B1(\usb_reset_ctrl_inst/current_state[0] ), 
    .A1(\usb_reset_ctrl_inst/urst_delay[5] ), 
    .D0(\usb_reset_ctrl_inst/urst_delay[5] ), 
    .B0(\usb_reset_ctrl_inst/urst_delay[6] ), 
    .A0(\usb_reset_ctrl_inst/urst_delay[4] ), 
    .F0(\usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_8_1 ), 
    .F1(\usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_4[1] ));
  SLICE_620 SLICE_620( .D1(\cpld_register_addr[3] ), .C1(\reset_control_b[5] ), 
    .B1(data_out_r_20_sn_N_36_i_0), .A1(\test_register[5] ), 
    .D0(\cpld_register_addr[3] ), .C0(\cpld_register_addr[6] ), 
    .B0(\cpld_register_addr[4] ), .A0(\cpld_register_addr[7] ), 
    .F0(\usb_reset_ctrl_inst/data_out_r_20_sn_m36_i_0 ), 
    .F1(\server_power_control/data_out_r_20_0_a3_1_0[5] ));
  SLICE_621 SLICE_621( .D1(\server_power_control/cpu_pwr_control/seq_cnt[4] ), 
    .C1(\server_power_control/cpu_pwr_control/seq_cnt[0] ), 
    .B1(\server_power_control/cpu_pwr_control/seq_cnt[7] ), 
    .A1(\server_power_control/cpu_pwr_control/current_state[1] ), 
    .D0(\server_power_control/cpu_pwr_control/seq_cnt[2] ), 
    .C0(\server_power_control/cpu_pwr_control/seq_cnt[0] ), 
    .B0(\server_power_control/cpu_pwr_control/seq_cnt[1] ), 
    .A0(\server_power_control/cpu_pwr_control/seq_cnt[3] ), 
    .M1(\bmc_write_data[3] ), .M0(\bmc_write_data[2] ), 
    .CE(reset_control_b_1_sqmuxa), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/N_631 ), 
    .Q0(\reset_control_b[2] ), 
    .F1(\server_power_control/cpu_pwr_control/un1_next_state40_5_i_a2_0_1 ), 
    .Q1(\reset_control_b[3] ));
  server_power_control_SLICE_622 \server_power_control/SLICE_622 ( 
    .D1(\server_power_control/current_state[0] ), 
    .B1(\server_power_control/efuse_done ), 
    .D0(\server_power_control/current_state[0] ), 
    .C0(\server_power_control/N_16 ), .F0(\server_power_control/N_17 ), 
    .F1(\server_power_control/N_8 ));
  server_power_control_SLICE_623 \server_power_control/SLICE_623 ( 
    .C1(\server_power_control/next_state105 ), 
    .B1(\server_power_control/wait_time_out_0_sqmuxa ), 
    .D0(\server_power_control/un1_current_state_2 ), .C0(int_1ms_en), 
    .B0(\server_power_control/next_state105 ), 
    .A0(\server_power_control/efuse_done_0_sqmuxa_2 ), 
    .F0(\server_power_control/un1_psu_done_1_sqmuxa_1_2 ), 
    .F1(\server_power_control/wait_time_out_cnt ));
  server_power_control_SLICE_624 \server_power_control/SLICE_624 ( 
    .D1(\server_power_control/psu_done ), 
    .A1(\server_power_control/is_reboot ), 
    .D0(\server_power_control/current_state[1] ), 
    .C0(\server_power_control/current_state[0] ), 
    .B0(\server_power_control/is_pwr_on_off ), 
    .A0(\server_power_control/psu_done ), .F0(\server_power_control/i11_mux ), 
    .F1(\server_power_control/N_29 ));
  server_power_control_SLICE_625 \server_power_control/SLICE_625 ( 
    .D1(\server_power_control/efuse_dly[3] ), 
    .C1(\server_power_control/efuse_dly[6] ), 
    .B1(\server_power_control/efuse_dly[2] ), 
    .A1(\server_power_control/efuse_dly[7] ), 
    .D0(\server_power_control/efuse_dly[3] ), 
    .C0(\server_power_control/efuse_dly[8] ), 
    .A0(\server_power_control/efuse_dly[5] ), 
    .F0(\server_power_control/efuse_done13_4 ), 
    .F1(\server_power_control/psu_on_off26_5 ));
  i2c0_slave_inst0_SLICE_626 \i2c0_slave_inst0/SLICE_626 ( 
    .D1(\i2c0_slave_inst0/before_state[0] ), 
    .C1(\i2c0_slave_inst0/current_state[4] ), 
    .B1(\i2c0_slave_inst0/before_state[2] ), 
    .A1(\i2c0_slave_inst0/before_state[1] ), 
    .D0(\i2c0_slave_inst0/current_state[4] ), .C0(\i2c0_slave_inst0/start_en ), 
    .B0(\i2c0_slave_inst0/opcode ), .A0(\i2c0_slave_inst0/current_state[3] ), 
    .F0(\i2c0_slave_inst0/N_421 ), .F1(\i2c0_slave_inst0/word_addr14 ));
  i2c0_slave_inst0_SLICE_627 \i2c0_slave_inst0/SLICE_627 ( 
    .D1(\i2c0_slave_inst0/start_next_bit ), .A1(\i2c0_slave_inst0/bit_cnt[0] ), 
    .D0(\i2c0_slave_inst0/start_next_bit ), .C0(\i2c0_slave_inst0/rcv_bit18 ), 
    .A0(\i2c0_slave_inst0/current_state[1] ), 
    .M1(\i2c0_slave_inst0/rcv_bit[2] ), .M0(\i2c0_slave_inst0/rcv_bit[1] ), 
    .CE(\i2c0_slave_inst0/slave_addr_out_0_sqmuxa ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/slave_addr_out_0_sqmuxa ), 
    .Q0(\i2c0_slave_inst0/next_state16_0_i ), .F1(\i2c0_slave_inst0/CO0 ), 
    .Q1(\i2c0_slave_inst0/next_state16_1_i ));
  i2c0_slave_inst0_SLICE_628 \i2c0_slave_inst0/SLICE_628 ( 
    .D1(\i2c0_slave_inst0/start_next_bit ), 
    .C1(\i2c0_slave_inst0/current_state[5] ), 
    .B1(\i2c0_slave_inst0/current_state[2] ), 
    .D0(\i2c0_slave_inst0/start_next_bit_1d ), .C0(\data_out_r[0] ), 
    .B0(\i2c0_slave_inst0/current_state[5] ), .A0(\i2c0_slave_inst0/N_406 ), 
    .M0(\i2c0_slave_inst0/sda_in_dly[1] ), 
    .CE(\i2c0_slave_inst0/un1_sda_in_clean8 ), .CLK(clock_c), 
    .F0(\i2c0_slave_inst0/rd_data_i_m[0] ), 
    .Q0(\i2c0_slave_inst0/sda_in_clean ), .F1(\i2c0_slave_inst0/N_70 ));
  timer_inst_SLICE_629 \timer_inst/SLICE_629 ( 
    .D1(\timer_inst/int_100ms_cnt[17] ), .C1(\timer_inst/int_100ms_cnt[10] ), 
    .B1(\timer_inst/int_100ms_cnt[18] ), .A1(\timer_inst/int_100ms_cnt[13] ), 
    .D0(\timer_inst/int_100ms_cnt[7] ), .C0(\timer_inst/int_100ms_cnt[3] ), 
    .B0(\timer_inst/int_100ms_cnt[8] ), .A0(\timer_inst/int_100ms_cnt[4] ), 
    .F0(\timer_inst/int_100ms_cnt11_13 ), .F1(\timer_inst/int_100ms_cnt11_12 ));
  timer_inst_SLICE_630 \timer_inst/SLICE_630 ( 
    .D1(\timer_inst/int_1ms_cnt[9] ), .C1(\timer_inst/int_1ms_cnt[12] ), 
    .B1(\timer_inst/int_1ms_cnt[10] ), .A1(\timer_inst/int_1ms_cnt[11] ), 
    .D0(\timer_inst/int_1ms_cnt[6] ), .C0(\timer_inst/int_1ms_cnt[3] ), 
    .B0(\timer_inst/int_1ms_cnt[4] ), .A0(\timer_inst/int_1ms_cnt[14] ), 
    .F0(\timer_inst/int_1ms_cnt11_10 ), .F1(\timer_inst/int_1ms_cnt11_9 ));
  server_power_control_SLICE_631 \server_power_control/SLICE_631 ( 
    .D1(\server_power_control/wait_time_out_cnt[5] ), 
    .C1(\server_power_control/wait_time_out_cnt[0] ), 
    .B1(\server_power_control/wait_time_out_cnt[2] ), 
    .A1(\server_power_control/wait_time_out_cnt[1] ), 
    .D0(\server_power_control/wait_time_out_cnt[6] ), 
    .C0(\server_power_control/wait_time_out_cnt[4] ), 
    .B0(\server_power_control/wait_time_out_cnt[15] ), 
    .A0(\server_power_control/wait_time_out_cnt[9] ), 
    .F0(\server_power_control/g0_11 ), .F1(\server_power_control/g0_10 ));
  server_power_control_SLICE_632 \server_power_control/SLICE_632 ( 
    .D1(\server_power_control/cpu_dly[7] ), 
    .C1(\server_power_control/cpu_dly[3] ), 
    .B1(\server_power_control/cpu_dly[2] ), 
    .A1(\server_power_control/cpu_dly[6] ), 
    .C0(\server_power_control/cpu_dly[5] ), 
    .A0(\server_power_control/cpu_dly[0] ), 
    .F0(\server_power_control/psu_on_off17_3 ), 
    .F1(\server_power_control/psu_on_off17_4 ));
  server_power_control_SLICE_633 \server_power_control/SLICE_633 ( 
    .D1(\server_power_control/psu_dly[2] ), 
    .C1(\server_power_control/psu_dly[0] ), 
    .A1(\server_power_control/psu_dly[3] ), 
    .D0(\server_power_control/psu_dly[5] ), 
    .C0(\server_power_control/psu_dly[8] ), 
    .B0(\server_power_control/psu_dly[1] ), 
    .A0(\server_power_control/psu_dly[4] ), 
    .F0(\server_power_control/psu_dly11_5 ), 
    .F1(\server_power_control/psu_dly11_4 ));
  server_power_control_SLICE_634 \server_power_control/SLICE_634 ( 
    .D1(\server_power_control/reboot_cnt[12] ), 
    .C1(\server_power_control/reboot_cnt[15] ), 
    .B1(\server_power_control/reboot_cnt[14] ), 
    .A1(\server_power_control/reboot_cnt[13] ), 
    .D0(\server_power_control/reboot_cnt[10] ), 
    .C0(\server_power_control/reboot_cnt[8] ), 
    .B0(\server_power_control/reboot_cnt[9] ), 
    .A0(\server_power_control/reboot_cnt[11] ), 
    .F0(\server_power_control/next_state101_11 ), 
    .F1(\server_power_control/next_state101_10 ));
  server_power_control_SLICE_635 \server_power_control/SLICE_635 ( 
    .D1(\server_power_control/reboot_cnt[7] ), 
    .C1(\server_power_control/reboot_cnt[4] ), 
    .B1(\server_power_control/reboot_cnt[1] ), 
    .A1(\server_power_control/reboot_cnt[3] ), 
    .D0(\server_power_control/reboot_cnt[5] ), 
    .C0(\server_power_control/reboot_cnt[0] ), 
    .B0(\server_power_control/reboot_cnt[2] ), 
    .A0(\server_power_control/reboot_cnt[6] ), 
    .F0(\server_power_control/next_state101_9 ), 
    .F1(\server_power_control/next_state101_8 ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_636 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_636 ( 
    .D1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst ), 
    .C1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5 ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst_pre ), 
    .C0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[0] ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[1] ), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5_3 ), 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt ));
  server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_637 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/SLICE_637 ( 
    .C1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec ), 
    .B1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/N_31_7 ), 
    .A1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/sec_pre ), 
    .C0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[6] ), 
    .B0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[5] ), 
    .F0(\server_power_control/power_signal_detect_inst/rst_btn_dbn/next_state24_0_a2_3 )
    , 
    .F1(\server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time ));
  SLICE_638 SLICE_638( .D1(pg_vddq_a1_c), .B1(pg_vddq_a0_c), .A1(pg_vddc_a_c), 
    .D0(pg_vtt_a1_c), .C0(pg_vpp_a0_c), .B0(pg_vtt_a0_c), .A0(pg_vpp_a1_c), 
    .M1(\por/rst_btn_dly[4] ), .M0(\por/rst_btn_dly[3] ), .CLK(clock_c), 
    .F0(\server_power_control/cpu_pwr_control/cpua_pwrok_7 ), 
    .Q0(\por/rst_btn_dly[4] ), 
    .F1(\server_power_control/cpu_pwr_control/cpua_pwrok_5 ), 
    .Q1(\por/rst_btn_dly[5] ));
  bmc_reset_ctrl_inst_SLICE_639 \bmc_reset_ctrl_inst/SLICE_639 ( 
    .D1(\bmc_reset_ctrl_inst/bmc_prst9 ), 
    .A1(\bmc_reset_ctrl_inst.prst_delay_4[2] ), 
    .D0(\bmc_reset_ctrl_inst/prst_delay[11] ), 
    .C0(\bmc_reset_ctrl_inst/prst_delay[8] ), 
    .B0(\bmc_reset_ctrl_inst/prst_delay[9] ), 
    .A0(\bmc_reset_ctrl_inst/prst_delay[10] ), 
    .F0(\bmc_reset_ctrl_inst/bmc_prst9_11 ), 
    .F1(\bmc_reset_ctrl_inst/prst_delay ));
  bmc_reset_ctrl_inst_SLICE_640 \bmc_reset_ctrl_inst/SLICE_640 ( 
    .D1(\bmc_reset_ctrl_inst/prst_delay[5] ), 
    .C1(\bmc_reset_ctrl_inst/prst_delay[0] ), 
    .B1(\bmc_reset_ctrl_inst/prst_delay[2] ), 
    .A1(\bmc_reset_ctrl_inst/prst_delay[6] ), 
    .D0(\bmc_reset_ctrl_inst/prst_delay[12] ), 
    .C0(\bmc_reset_ctrl_inst/prst_delay[14] ), 
    .B0(\bmc_reset_ctrl_inst/prst_delay[15] ), 
    .A0(\bmc_reset_ctrl_inst/prst_delay[13] ), 
    .F0(\bmc_reset_ctrl_inst/bmc_prst9_10 ), 
    .F1(\bmc_reset_ctrl_inst/bmc_prst9_9 ));
  eeprom_i2c_inst_e2prom_i2c_SLICE_641 \eeprom_i2c_inst/e2prom_i2c/SLICE_641 
    ( .C1(\eeprom_i2c_inst/e2prom_i2c/current_state[3] ), 
    .B1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[1] ), 
    .A1(\eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[0] ), 
    .C0(\eeprom_i2c_inst/e2prom_i2c/before_state[3] ), 
    .B0(\eeprom_i2c_inst/e2prom_i2c/rcv_ack ), 
    .F0(\eeprom_i2c_inst/e2prom_i2c/un1_start_next_bit_1_i_o2_0 ), 
    .F1(\eeprom_i2c_inst/e2prom_i2c/rcv_ack_0_sqmuxa ));
  server_power_control_power_signal_detect_inst_SLICE_642 
    \server_power_control/power_signal_detect_inst/SLICE_642 ( 
    .D1(\server_power_control/power_signal_detect_inst/low_time_cnt[6] ), 
    .C1(\server_power_control/power_signal_detect_inst/low_time_cnt[7] ), 
    .A1(\server_power_control/power_signal_detect_inst/low_time_cnt[5] ), 
    .D0(\server_power_control/power_signal_detect_inst/low_time_cnt[0] ), 
    .C0(\server_power_control/power_signal_detect_inst/low_time_cnt[3] ), 
    .B0(\server_power_control/power_signal_detect_inst/low_time_cnt[2] ), 
    .A0(\server_power_control/power_signal_detect_inst/low_time_cnt[1] ), 
    .F0(\server_power_control/power_signal_detect_inst/N_657 ), 
    .F1(\server_power_control/power_signal_detect_inst/un1_force_15s_1lto7_i_a3_1 )
    );
  server_power_control_SLICE_643 \server_power_control/SLICE_643 ( 
    .B1(\cpld_register_addr[5] ), .A1(\cpld_register_addr[1] ), 
    .D0(data_out_r_20_sn_N_22), .B0(data_out_r_20_sn_N_25), 
    .M1(\server_power_control/next_state[0] ), 
    .M0(\server_power_control/cpu_pwr_control/next_state[2] ), .CLK(clock_c), 
    .F0(\server_power_control/N_78_2 ), 
    .Q0(\server_power_control/cpu_pwr_control/current_state[2] ), 
    .F1(\server_power_control/cpu_pwr_control/data_out_r_20_sn_N_14 ), 
    .Q1(\server_power_control/current_state[0] ));
  server_power_control_power_signal_detect_inst_SLICE_644 
    \server_power_control/power_signal_detect_inst/SLICE_644 ( 
    .D1(\server_power_control/power_signal_detect_inst/debounce_cnt[3] ), 
    .C1(\server_power_control/power_signal_detect_inst/debounce_cnt[2] ), 
    .A1(\server_power_control/power_signal_detect_inst/debounce_cnt[4] ), 
    .D0(\server_power_control/power_signal_detect_inst/debounce_cnt[6] ), 
    .B0(\server_power_control/power_signal_detect_inst/debounce_cnt[5] ), 
    .A0(\server_power_control/power_signal_detect_inst/debounce_cnt[7] ), 
    .F0(\server_power_control/power_signal_detect_inst/un1_force_15slto7_i_a3_1 ), 
    .F1(\server_power_control/power_signal_detect_inst/N_655 ));
  bmc_sda bmc_sda_I( .PADDI(bmc_sda_in), 
    .IOLTO(\i2c0_slave_inst0.is_slave_send_i ), .PADDO(bmc_sda_out), 
    .bmc_sda(bmc_sda));
  bmc_sda_MGIOL bmc_sda_MGIOL( .IOLTO(\i2c0_slave_inst0.is_slave_send_i ), 
    .DI(bmc_sda_in), .TS(\i2c0_slave_inst0.un1_is_slave_send_0_sqmuxa_i ), 
    .CE(\i2c0_slave_inst0.un1_is_slave_send32_i ), .CLK(clock_c), 
    .IN(\i2c0_slave_inst0.sda_in_dly[0] ));
  sys_uart_rxd3 sys_uart_rxd3_I( .PADDT(reset_i), 
    .PADDO(sys_uart_rxd3_6_3_i_m2), .sys_uart_rxd3(sys_uart_rxd3));
  bmc_srst bmc_srst_I( .PADDO(bmc_srst_c), .bmc_srst(bmc_srst));
  clock clock_I( .PADDI(clock_c), .clock(clock));
  cpld_led_test cpld_led_test_I( .PADDO(cpld_led_test_c), 
    .cpld_led_test(cpld_led_test));
  cpld_heart cpld_heart_I( .PADDO(a_gpio2_c), .cpld_heart(cpld_heart));
  vga_6505_in2 vga_6505_in2_I( .PADDO(GND), .vga_6505_in2(vga_6505_in2));
  vga_6505_in1 vga_6505_in1_I( .PADDO(GND), .vga_6505_in1(vga_6505_in1));
  a_gpio5 a_gpio5_I( .PADDI(a_gpio5_c), .a_gpio5(a_gpio5));
  a_gpio3 a_gpio3_I( .PADDI(a_gpio3_c), .a_gpio3(a_gpio3));
  a_gpio2 a_gpio2_I( .PADDO(a_gpio2_c), .a_gpio2(a_gpio2));
  bmc_gpio54 bmc_gpio54_I( .PADDO(fm_pwr_btn_c), .bmc_gpio54(bmc_gpio54));
  bmc_gpio53 bmc_gpio53_I( .PADDO(cpld_extrst_c), .bmc_gpio53(bmc_gpio53));
  bmc_gpio51 bmc_gpio51_I( .PADDO(bmc_gpio51_c), .bmc_gpio51(bmc_gpio51));
  bmc_gpio49 bmc_gpio49_I( .PADDI(bmc_gpio49_c), .bmc_gpio49(bmc_gpio49));
  bmc_gpio48 bmc_gpio48_I( .PADDI(bmc_gpio48_c), .bmc_gpio48(bmc_gpio48));
  bmc_gpio25 bmc_gpio25_I( .PADDI(bmc_gpio25_c), .bmc_gpio25(bmc_gpio25));
  bmc_gpio24 bmc_gpio24_I( .PADDI(bmc_gpio24_c), .bmc_gpio24(bmc_gpio24));
  uart1_rx_b uart1_rx_b_I( .PADDT(un1_reset_i), .PADDO(sys_uart_txd3_c), 
    .uart1_rx_b(uart1_rx_b));
  uart1_tx_b uart1_tx_b_I( .PADDI(uart1_tx_b_c), .uart1_tx_b(uart1_tx_b));
  uart0_rx_b uart0_rx_b_I( .PADDT(un1_reset_2_i), .PADDO(sys_uart_txd3_c), 
    .uart0_rx_b(uart0_rx_b));
  uart0_tx_b uart0_tx_b_I( .PADDI(uart0_tx_b_c), .uart0_tx_b(uart0_tx_b));
  uart1_rx_a uart1_rx_a_I( .PADDT(un1_reset_1_i), .PADDO(sys_uart_txd3_c), 
    .uart1_rx_a(uart1_rx_a));
  uart1_tx_a uart1_tx_a_I( .PADDI(uart1_tx_a_c), .uart1_tx_a(uart1_tx_a));
  uart0_rx_a uart0_rx_a_I( .PADDT(un1_reset_3_i), .PADDO(sys_uart_txd3_c), 
    .uart0_rx_a(uart0_rx_a));
  uart0_tx_a uart0_tx_a_I( .PADDI(uart0_tx_a_c), .uart0_tx_a(uart0_tx_a));
  sys_uart_txd3 sys_uart_txd3_I( .PADDI(sys_uart_txd3_c), 
    .sys_uart_txd3(sys_uart_txd3));
  pwr_button_b pwr_button_b_I( .PADDO(VCC), .pwr_button_b(pwr_button_b));
  pwr_button_a pwr_button_a_I( .PADDO(VCC), .pwr_button_a(pwr_button_a));
  e2prom_sda e2prom_sda_I( .PADDI(e2prom_sda_in), .IOLDO(e2prom_sda_out), 
    .PADDT(\eeprom_i2c_inst.e2prom_i2c.sda_out_en_i ), .e2prom_sda(e2prom_sda));
  e2prom_sda_MGIOL e2prom_sda_MGIOL( .IOLDO(e2prom_sda_out), 
    .DI(e2prom_sda_in), .OPOS(\eeprom_i2c_inst.e2prom_i2c.sda_out_12_iv_i ), 
    .CE(un1_sda_out_0_sqmuxa_1), .CLK(clock_c), 
    .IN(\eeprom_i2c_inst.e2prom_i2c.sda_in_dly[0] ));
  e2prom_scl e2prom_scl_I( .PADDI(e2prom_scl_in), .IOLDO(e2prom_scl_out), 
    .PADDT(\eeprom_i2c_inst/e2prom_i2c/e2prom_scl_out_en ), 
    .e2prom_scl(e2prom_scl));
  e2prom_scl_MGIOL e2prom_scl_MGIOL( .IOLDO(e2prom_scl_out), 
    .DI(e2prom_scl_in), .OPOS(\eeprom_i2c_inst.e2prom_i2c.N_103 ), 
    .CE(\eeprom_i2c_inst.e2prom_i2c.un1_scl_out_0_sqmuxa_i ), .CLK(clock_c), 
    .IN(\eeprom_i2c_inst.e2prom_i2c.scl_in_dly[0] ));
  bmc_scl bmc_scl_I( .PADDO(GND), .bmc_scl(bmc_scl));
  ddr3_event_b ddr3_event_b_I( .PADDI(ddr3_event_b_c), 
    .ddr3_event_b(ddr3_event_b));
  ddr2_event_b ddr2_event_b_I( .PADDI(ddr2_event_b_c), 
    .ddr2_event_b(ddr2_event_b));
  ddr1_event_b ddr1_event_b_I( .PADDI(ddr1_event_b_c), 
    .ddr1_event_b(ddr1_event_b));
  ddr0_event_b ddr0_event_b_I( .PADDI(ddr0_event_b_c), 
    .ddr0_event_b(ddr0_event_b));
  ddr3_event_a ddr3_event_a_I( .PADDI(ddr3_event_a_c), 
    .ddr3_event_a(ddr3_event_a));
  ddr2_event_a ddr2_event_a_I( .PADDI(ddr2_event_a_c), 
    .ddr2_event_a(ddr2_event_a));
  ddr1_event_a ddr1_event_a_I( .PADDI(ddr1_event_a_c), 
    .ddr1_event_a(ddr1_event_a));
  ddr0_event_a ddr0_event_a_I( .PADDI(ddr0_event_a_c), 
    .ddr0_event_a(ddr0_event_a));
  en_bp_5v en_bp_5v_I( .PADDO(en_bp_5v_c), .en_bp_5v(en_bp_5v));
  en_3v3_riser en_3v3_riser_I( .PADDO(en_bp_5v_c), .en_3v3_riser(en_3v3_riser));
  riser2_reset riser2_reset_I( .PADDO(riser2_reset_c), 
    .riser2_reset(riser2_reset));
  riser1_reset riser1_reset_I( .PADDO(riser1_reset_c), 
    .riser1_reset(riser1_reset));
  riser0_reset riser0_reset_I( .PADDO(riser0_reset_c), 
    .riser0_reset(riser0_reset));
  riser2_slot16b_prsnt riser2_slot16b_prsnt_I( .PADDI(riser2_slot16b_prsnt_c), 
    .riser2_slot16b_prsnt(riser2_slot16b_prsnt));
  riser2_slot_id1 riser2_slot_id1_I( .PADDI(riser2_slot_id1_c), 
    .riser2_slot_id1(riser2_slot_id1));
  riser2_slot_id0 riser2_slot_id0_I( .PADDI(riser2_slot_id0_c), 
    .riser2_slot_id0(riser2_slot_id0));
  riser1_slot16b_prsnt riser1_slot16b_prsnt_I( .PADDI(riser1_slot16b_prsnt_c), 
    .riser1_slot16b_prsnt(riser1_slot16b_prsnt));
  riser1_slot16a_prsnt riser1_slot16a_prsnt_I( .PADDI(riser1_slot16a_prsnt_c), 
    .riser1_slot16a_prsnt(riser1_slot16a_prsnt));
  riser1_slot_id2 riser1_slot_id2_I( .PADDI(riser1_slot_id2_c), 
    .riser1_slot_id2(riser1_slot_id2));
  riser1_slot_id1 riser1_slot_id1_I( .PADDI(riser1_slot_id1_c), 
    .riser1_slot_id1(riser1_slot_id1));
  riser1_slot_id0 riser1_slot_id0_I( .PADDI(riser1_slot_id0_c), 
    .riser1_slot_id0(riser1_slot_id0));
  riser0_slot16b_prsnt riser0_slot16b_prsnt_I( .PADDI(riser0_slot16b_prsnt_c), 
    .riser0_slot16b_prsnt(riser0_slot16b_prsnt));
  riser0_slot16a_prsnt riser0_slot16a_prsnt_I( .PADDI(riser0_slot16a_prsnt_c), 
    .riser0_slot16a_prsnt(riser0_slot16a_prsnt));
  riser0_slot_id2 riser0_slot_id2_I( .PADDI(riser0_slot_id2_c), 
    .riser0_slot_id2(riser0_slot_id2));
  riser0_slot_id1 riser0_slot_id1_I( .PADDI(riser0_slot_id1_c), 
    .riser0_slot_id1(riser0_slot_id1));
  riser0_slot_id0 riser0_slot_id0_I( .PADDI(riser0_slot_id0_c), 
    .riser0_slot_id0(riser0_slot_id0));
  usb2_ponrst usb2_ponrst_I( .PADDO(usb1_ponrst_c), .usb2_ponrst(usb2_ponrst));
  usb1_ponrst usb1_ponrst_I( .PADDO(usb1_ponrst_c), .usb1_ponrst(usb1_ponrst));
  pcie_sata_rst pcie_sata_rst_I( .PADDO(pcie_sata_rst_c), 
    .pcie_sata_rst(pcie_sata_rst));
  pcie_usb1_rst pcie_usb1_rst_I( .PADDO(pcie_usb0_rst_c), 
    .pcie_usb1_rst(pcie_usb1_rst));
  pcie_usb0_rst pcie_usb0_rst_I( .PADDO(pcie_usb0_rst_c), 
    .pcie_usb0_rst(pcie_usb0_rst));
  pcie_nvme1_rst pcie_nvme1_rst_I( .PADDO(pcie_nvme1_rst_c), 
    .pcie_nvme1_rst(pcie_nvme1_rst));
  pcie_nvme0_rst pcie_nvme0_rst_I( .PADDO(pcie_nvme0_rst_c), 
    .pcie_nvme0_rst(pcie_nvme0_rst));
  pcie_swb_prst pcie_swb_prst_I( .PADDO(sg1_pcie0_l0_reset_c), 
    .pcie_swb_prst(pcie_swb_prst));
  pcie_swa_prst pcie_swa_prst_I( .PADDO(sg0_pcie1_l0_reset_c), 
    .pcie_swa_prst(pcie_swa_prst));
  pcie_swb_sys_rst pcie_swb_sys_rst_I( .PADDO(pcie_swa_sys_rst_c), 
    .pcie_swb_sys_rst(pcie_swb_sys_rst));
  pcie_swa_sys_rst pcie_swa_sys_rst_I( .PADDO(pcie_swa_sys_rst_c), 
    .pcie_swa_sys_rst(pcie_swa_sys_rst));
  sg1_pcie0_l0_reset sg1_pcie0_l0_reset_I( .PADDI(sg1_pcie0_l0_reset_c), 
    .sg1_pcie0_l0_reset(sg1_pcie0_l0_reset));
  sg0_pcie1_l0_reset sg0_pcie1_l0_reset_I( .PADDI(sg0_pcie1_l0_reset_c), 
    .sg0_pcie1_l0_reset(sg0_pcie1_l0_reset));
  sg0_pcie1_l0_reset_MGIOL sg0_pcie1_l0_reset_MGIOL( .DI(sg0_pcie1_l0_reset_c), 
    .LSR(reset_i), .CLK(clock_c), .IN(\bmc_reset_ctrl_inst.sig_r0 ));
  cpub_sys_reset cpub_sys_reset_I( .PADDO(cpua_sys_reset_c), 
    .cpub_sys_reset(cpub_sys_reset));
  cpua_sys_reset cpua_sys_reset_I( .PADDO(cpua_sys_reset_c), 
    .cpua_sys_reset(cpua_sys_reset));
  pg_pcie_sw_0v8_b pg_pcie_sw_0v8_b_I( .PADDI(pg_pcie_sw_0v8_b_c), 
    .pg_pcie_sw_0v8_b(pg_pcie_sw_0v8_b));
  pg_pcie_sw_0v8_a pg_pcie_sw_0v8_a_I( .PADDI(pg_pcie_sw_0v8_a_c), 
    .pg_pcie_sw_0v8_a(pg_pcie_sw_0v8_a));
  en_pcie_sw_0v8_b en_pcie_sw_0v8_b_I( .PADDO(pg_vdd_1v8_c), 
    .en_pcie_sw_0v8_b(en_pcie_sw_0v8_b));
  en_pcie_sw_0v8_a en_pcie_sw_0v8_a_I( .PADDO(pg_vdd_1v8_c), 
    .en_pcie_sw_0v8_a(en_pcie_sw_0v8_a));
  psu_ps_on_cpld psu_ps_on_cpld_I( .IOLDO(psu_ps_on_cpld_c), 
    .psu_ps_on_cpld(psu_ps_on_cpld));
  psu_ps_on_cpld_MGIOL psu_ps_on_cpld_MGIOL( .IOLDO(psu_ps_on_cpld_c), 
    .OPOS(\server_power_control.N_40_i ), 
    .CE(\server_power_control.un1_next_state105_11_i ), .CLK(clock_c));
  psu1_prsnt psu1_prsnt_I( .PADDI(psu1_prsnt_c), .psu1_prsnt(psu1_prsnt));
  psu0_prsnt psu0_prsnt_I( .PADDI(psu0_prsnt_c), .psu0_prsnt(psu0_prsnt));
  psu1_alert psu1_alert_I( .PADDI(psu1_alert_c), .psu1_alert(psu1_alert));
  psu0_alert psu0_alert_I( .PADDI(psu0_alert_c), .psu0_alert(psu0_alert));
  psu1_pwrok psu1_pwrok_I( .PADDI(psu1_pwrok_c), .psu1_pwrok(psu1_pwrok));
  psu0_pwrok psu0_pwrok_I( .PADDI(psu0_pwrok_c), .psu0_pwrok(psu0_pwrok));
  bp_ncp_gok bp_ncp_gok_I( .PADDI(bp_ncp_gok_c), .bp_ncp_gok(bp_ncp_gok));
  bp_ncp_d_oc bp_ncp_d_oc_I( .PADDI(bp_ncp_d_oc_c), .bp_ncp_d_oc(bp_ncp_d_oc));
  en_12v_bp en_12v_bp_I( .PADDO(en_bp_5v_c), .en_12v_bp(en_12v_bp));
  ncp0_gok ncp0_gok_I( .PADDI(ncp0_gok_c), .ncp0_gok(ncp0_gok));
  ncp0_d_oc ncp0_d_oc_I( .PADDI(ncp0_d_oc_c), .ncp0_d_oc(ncp0_d_oc));
  en_vdd_12v en_vdd_12v_I( .PADDO(en_bp_5v_c), .en_vdd_12v(en_vdd_12v));
  pg_3v3_riser pg_3v3_riser_I( .PADDI(pg_3v3_riser_c), 
    .pg_3v3_riser(pg_3v3_riser));
  pg_bp_5v pg_bp_5v_I( .PADDI(pg_bp_5v_c), .pg_bp_5v(pg_bp_5v));
  pg_5v_aux pg_5v_aux_I( .PADDI(pg_5v_aux_c), .pg_5v_aux(pg_5v_aux));
  pg_vdd_5v pg_vdd_5v_I( .PADDI(pg_vdd_5v_c), .pg_vdd_5v(pg_vdd_5v));
  pg_vdd_3v3 pg_vdd_3v3_I( .PADDI(pg_vdd_3v3_c), .pg_vdd_3v3(pg_vdd_3v3));
  pg_vdd_1v8 pg_vdd_1v8_I( .PADDI(pg_vdd_1v8_c), .pg_vdd_1v8(pg_vdd_1v8));
  pg_pcie_h_b pg_pcie_h_b_I( .PADDI(pg_pcie_h_b_c), .pg_pcie_h_b(pg_pcie_h_b));
  pg_ddr_phy_b pg_ddr_phy_b_I( .PADDI(pg_ddr_phy_b_c), 
    .pg_ddr_phy_b(pg_ddr_phy_b));
  pg_vtt_b1 pg_vtt_b1_I( .PADDI(pg_vtt_b1_c), .pg_vtt_b1(pg_vtt_b1));
  pg_vtt_b0 pg_vtt_b0_I( .PADDI(pg_vtt_b0_c), .pg_vtt_b0(pg_vtt_b0));
  pg_vpp_b1 pg_vpp_b1_I( .PADDI(pg_vpp_b1_c), .pg_vpp_b1(pg_vpp_b1));
  pg_vpp_b0 pg_vpp_b0_I( .PADDI(pg_vpp_b0_c), .pg_vpp_b0(pg_vpp_b0));
  pg_vddq_b1 pg_vddq_b1_I( .PADDI(pg_vddq_b1_c), .pg_vddq_b1(pg_vddq_b1));
  pg_vddq_b0 pg_vddq_b0_I( .PADDI(pg_vddq_b0_c), .pg_vddq_b0(pg_vddq_b0));
  pg_pcie_phy_b pg_pcie_phy_b_I( .PADDI(pg_pcie_phy_b_c), 
    .pg_pcie_phy_b(pg_pcie_phy_b));
  pg_vddc_b pg_vddc_b_I( .PADDI(pg_vddc_b_c), .pg_vddc_b(pg_vddc_b));
  pg_pcie_h_a pg_pcie_h_a_I( .PADDI(pg_pcie_h_a_c), .pg_pcie_h_a(pg_pcie_h_a));
  pg_ddr_phy_a pg_ddr_phy_a_I( .PADDI(pg_ddr_phy_a_c), 
    .pg_ddr_phy_a(pg_ddr_phy_a));
  pg_vtt_a1 pg_vtt_a1_I( .PADDI(pg_vtt_a1_c), .pg_vtt_a1(pg_vtt_a1));
  pg_vtt_a0 pg_vtt_a0_I( .PADDI(pg_vtt_a0_c), .pg_vtt_a0(pg_vtt_a0));
  pg_vpp_a1 pg_vpp_a1_I( .PADDI(pg_vpp_a1_c), .pg_vpp_a1(pg_vpp_a1));
  pg_vpp_a0 pg_vpp_a0_I( .PADDI(pg_vpp_a0_c), .pg_vpp_a0(pg_vpp_a0));
  pg_vddq_a1 pg_vddq_a1_I( .PADDI(pg_vddq_a1_c), .pg_vddq_a1(pg_vddq_a1));
  pg_vddq_a0 pg_vddq_a0_I( .PADDI(pg_vddq_a0_c), .pg_vddq_a0(pg_vddq_a0));
  pg_pcie_phy_a pg_pcie_phy_a_I( .PADDI(pg_pcie_phy_a_c), 
    .pg_pcie_phy_a(pg_pcie_phy_a));
  pg_vddc_a pg_vddc_a_I( .PADDI(pg_vddc_a_c), .pg_vddc_a(pg_vddc_a));
  en_vdd_5v en_vdd_5v_I( .PADDO(en_vdd_5v_c), .en_vdd_5v(en_vdd_5v));
  en_vdd_3v3 en_vdd_3v3_I( .PADDO(en_vdd_3v3_c), .en_vdd_3v3(en_vdd_3v3));
  en_vdd_1v8 en_vdd_1v8_I( .PADDO(en_vdd_1v8_c), .en_vdd_1v8(en_vdd_1v8));
  en_vqps18_b en_vqps18_b_I( .PADDO(en_vqps18_a_c), .en_vqps18_b(en_vqps18_b));
  en_pcie_h_b en_pcie_h_b_I( .PADDO(en_pcie_h_a_c), .en_pcie_h_b(en_pcie_h_b));
  en_ddr_phy_b en_ddr_phy_b_I( .PADDO(en_pcie_h_a_c), 
    .en_ddr_phy_b(en_ddr_phy_b));
  en_vtt_b1 en_vtt_b1_I( .PADDO(en_vtt_a0_c), .en_vtt_b1(en_vtt_b1));
  en_vtt_b0 en_vtt_b0_I( .PADDO(en_vtt_a0_c), .en_vtt_b0(en_vtt_b0));
  en_vpp_b1 en_vpp_b1_I( .PADDO(en_vpp_a0_c), .en_vpp_b1(en_vpp_b1));
  en_vpp_b0 en_vpp_b0_I( .PADDO(en_vpp_a0_c), .en_vpp_b0(en_vpp_b0));
  en_vddq_b1 en_vddq_b1_I( .PADDO(en_vddq_a0_c), .en_vddq_b1(en_vddq_b1));
  en_vddq_b0 en_vddq_b0_I( .PADDO(en_vddq_a0_c), .en_vddq_b0(en_vddq_b0));
  en_pcie_phy_b en_pcie_phy_b_I( .PADDO(en_pcie_h_a_c), 
    .en_pcie_phy_b(en_pcie_phy_b));
  en_vddc_b en_vddc_b_I( .PADDO(en_vddc_a_c), .en_vddc_b(en_vddc_b));
  en_vqps18_a en_vqps18_a_I( .PADDO(en_vqps18_a_c), .en_vqps18_a(en_vqps18_a));
  en_pcie_h_a en_pcie_h_a_I( .PADDO(en_pcie_h_a_c), .en_pcie_h_a(en_pcie_h_a));
  en_ddr_phy_a en_ddr_phy_a_I( .PADDO(en_pcie_h_a_c), 
    .en_ddr_phy_a(en_ddr_phy_a));
  en_vtt_a1 en_vtt_a1_I( .PADDO(en_vtt_a0_c), .en_vtt_a1(en_vtt_a1));
  en_vtt_a0 en_vtt_a0_I( .PADDO(en_vtt_a0_c), .en_vtt_a0(en_vtt_a0));
  en_vpp_a1 en_vpp_a1_I( .PADDO(en_vpp_a0_c), .en_vpp_a1(en_vpp_a1));
  en_vpp_a0 en_vpp_a0_I( .PADDO(en_vpp_a0_c), .en_vpp_a0(en_vpp_a0));
  en_vddq_a1 en_vddq_a1_I( .PADDO(en_vddq_a0_c), .en_vddq_a1(en_vddq_a1));
  en_vddq_a0 en_vddq_a0_I( .PADDO(en_vddq_a0_c), .en_vddq_a0(en_vddq_a0));
  en_pcie_phy_a en_pcie_phy_a_I( .PADDO(en_pcie_h_a_c), 
    .en_pcie_phy_a(en_pcie_phy_a));
  en_vddc_a en_vddc_a_I( .PADDO(en_vddc_a_c), .en_vddc_a(en_vddc_a));
  bmc_pwrgd bmc_pwrgd_I( .PADDO(bmc_pwrgd_c), .bmc_pwrgd(bmc_pwrgd));
  bmc_pcie_rst bmc_pcie_rst_I( .IOLDO(bmc_pcie_rst_c), 
    .bmc_pcie_rst(bmc_pcie_rst));
  bmc_pcie_rst_MGIOL bmc_pcie_rst_MGIOL( .IOLDO(bmc_pcie_rst_c), 
    .OPOS(\bmc_reset_ctrl_inst.prst_delay_4[2] ), 
    .CE(\bmc_reset_ctrl_inst.un1_bmc_prst17_i_0 ), .CLK(clock_c));
  bmc_extrst bmc_extrst_I( .PADDO(bmc_srst_c), .bmc_extrst(bmc_extrst));
  bmc_ssprst bmc_ssprst_I( .PADDO(bmc_srst_c), .bmc_ssprst(bmc_ssprst));
  fm_pwr_btn fm_pwr_btn_I( .PADDI(fm_pwr_btn_c), .fm_pwr_btn(fm_pwr_btn));
  fm_pwr_btn_MGIOL fm_pwr_btn_MGIOL( .DI(fm_pwr_btn_c), .LSR(reset_i), 
    .CLK(clock_c), .IN(\server_power_control.power_signal_detect_inst.sig_r0 ));
  cpld_extrst cpld_extrst_I( .PADDI(cpld_extrst_c), .cpld_extrst(cpld_extrst));
  GSR_INST GSR_INST( .GSRNET(~reset_i));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_0 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/timeout_cnt[4] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/timeout_cnt[3] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_cry_0[3] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1());

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'h5008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_1 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/timeout_cnt[2] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/timeout_cnt[1] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_cry_0[1] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_2 ( input B1, A1, A0, DI1, CE, CLK, 
    output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/timeout_cnt[0] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_cry_0[0] ( .A0(A0), 
    .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h500C;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_3 ( input B0, A0, DI0, CE, CLK, FCI, 
    output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/state_cnt[9] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20003 \eeprom_i2c_inst/e2prom_i2c/state_cnt_s_0[9] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5008;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_4 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/state_cnt[8] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/state_cnt[7] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \eeprom_i2c_inst/e2prom_i2c/state_cnt_cry_0[7] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_5 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/state_cnt[6] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/state_cnt[5] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \eeprom_i2c_inst/e2prom_i2c/state_cnt_cry_0[5] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_6 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/state_cnt[4] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/state_cnt[3] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \eeprom_i2c_inst/e2prom_i2c/state_cnt_cry_0[3] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_7 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/state_cnt[2] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/state_cnt[1] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \eeprom_i2c_inst/e2prom_i2c/state_cnt_cry_0[1] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_8 ( input B1, A1, B0, DI1, CE, CLK, 
    output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/state_cnt[0] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \eeprom_i2c_inst/e2prom_i2c/state_cnt_cry_0[0] ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20004 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'hF008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module bmc_reset_ctrl_inst_SLICE_9 ( input A0, DI0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre \bmc_reset_ctrl_inst/srst_delay[7] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20005 \bmc_reset_ctrl_inst/un1_srst_delay_1_s_7_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module bmc_reset_ctrl_inst_SLICE_10 ( input A1, B0, M0, LSR, CLK, FCI, output 
    F0, Q0, F1, FCO );
  wire   VCCI, GNDI, M0_dly, CLK_dly, LSR_dly;

  vmuxregsre0006 \bmc_reset_ctrl_inst/sig_r1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20007 \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_5_0 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0006 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h500C;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module bmc_reset_ctrl_inst_SLICE_11 ( input A1, A0, DI1, CLK, FCI, output F0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \bmc_reset_ctrl_inst/srst_delay[4] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20005 \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_3_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bmc_reset_ctrl_inst_SLICE_12 ( input A1, A0, M1, M0, LSR, CLK, FCI, 
    output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0006 \bmc_reset_ctrl_inst/current_state[1] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0006 \bmc_reset_ctrl_inst/current_state[0] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20005 \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_1_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bmc_reset_ctrl_inst_SLICE_13 ( input A1, A0, DI1, CLK, output F1, Q1, 
    FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \bmc_reset_ctrl_inst/srst_delay[0] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20007 \bmc_reset_ctrl_inst/un1_srst_delay_1_cry_0_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bmc_reset_ctrl_inst_SLICE_14 ( input B0, A0, DI0, CE, CLK, FCI, output 
    F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[15] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20008 \bmc_reset_ctrl_inst/prst_delay_s_0[15] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3008;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module bmc_reset_ctrl_inst_SLICE_15 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[14] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[13] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \bmc_reset_ctrl_inst/prst_delay_cry_0[13] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bmc_reset_ctrl_inst_SLICE_16 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[12] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[11] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \bmc_reset_ctrl_inst/prst_delay_cry_0[11] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bmc_reset_ctrl_inst_SLICE_17 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[10] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[9] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \bmc_reset_ctrl_inst/prst_delay_cry_0[9] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bmc_reset_ctrl_inst_SLICE_18 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[8] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[7] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \bmc_reset_ctrl_inst/prst_delay_cry_0[7] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bmc_reset_ctrl_inst_SLICE_19 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, 
    CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[6] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[5] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \bmc_reset_ctrl_inst/prst_delay_cry_0[5] ( .A0(A0), .B0(B0), 
    .C0(C0), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF0E2;
  defparam inst1.INIT1 = 16'hF0E2;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module bmc_reset_ctrl_inst_SLICE_20 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[4] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \bmc_reset_ctrl_inst/prst_delay_cry_0[3] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bmc_reset_ctrl_inst_SLICE_21 ( input C1, B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20010 \bmc_reset_ctrl_inst/prst_delay_cry_0[1] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20010 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'hF0E2;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module bmc_reset_ctrl_inst_SLICE_22 ( input B1, A1, B0, DI1, CE, CLK, output 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \bmc_reset_ctrl_inst/prst_delay[0] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \bmc_reset_ctrl_inst/prst_delay_cry_0[0] ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_23 ( input B0, A0, DI0, CE, CLK, FCI, output 
    F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \usb_reset_ctrl_inst/urst_delay[15] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20008 \usb_reset_ctrl_inst/urst_delay_s_0[15] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_24 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \usb_reset_ctrl_inst/urst_delay[14] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \usb_reset_ctrl_inst/urst_delay[13] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \usb_reset_ctrl_inst/urst_delay_cry_0[13] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_25 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \usb_reset_ctrl_inst/urst_delay[12] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \usb_reset_ctrl_inst/urst_delay[11] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \usb_reset_ctrl_inst/urst_delay_cry_0[11] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_26 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \usb_reset_ctrl_inst/urst_delay[10] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \usb_reset_ctrl_inst/urst_delay[9] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \usb_reset_ctrl_inst/urst_delay_cry_0[9] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_27 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \usb_reset_ctrl_inst/urst_delay[8] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \usb_reset_ctrl_inst/urst_delay[7] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \usb_reset_ctrl_inst/urst_delay_cry_0[7] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_28 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \usb_reset_ctrl_inst/urst_delay[6] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \usb_reset_ctrl_inst/urst_delay[5] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \usb_reset_ctrl_inst/urst_delay_cry_0[5] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_29 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \usb_reset_ctrl_inst/urst_delay[4] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \usb_reset_ctrl_inst/urst_delay[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \usb_reset_ctrl_inst/urst_delay_cry_0[3] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_30 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \usb_reset_ctrl_inst/urst_delay[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \usb_reset_ctrl_inst/urst_delay[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \usb_reset_ctrl_inst/urst_delay_cry_0[1] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_31 ( input B1, A1, B0, DI1, CE, CLK, output 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \usb_reset_ctrl_inst/urst_delay[0] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \usb_reset_ctrl_inst/urst_delay_cry_0[0] ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_switch_reset_control_SLICE_32 ( input B0, A0, DI0, 
    CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/switch_reset_control/switch_rst_cnt[7] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20003 \server_power_control/switch_reset_control/switch_rst_cnt_s_0[7] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_switch_reset_control_SLICE_33 ( input B1, A1, B0, 
    A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/switch_reset_control/switch_rst_cnt[6] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/switch_reset_control/switch_rst_cnt[5] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 \server_power_control/switch_reset_control/switch_rst_cnt_cry_0[5] 
    ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_switch_reset_control_SLICE_34 ( input B1, A1, B0, 
    A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/switch_reset_control/switch_rst_cnt[4] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/switch_reset_control/switch_rst_cnt[3] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 \server_power_control/switch_reset_control/switch_rst_cnt_cry_0[3] 
    ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_switch_reset_control_SLICE_35 ( input B1, A1, B0, 
    A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/switch_reset_control/switch_rst_cnt[2] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/switch_reset_control/switch_rst_cnt[1] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 \server_power_control/switch_reset_control/switch_rst_cnt_cry_0[1] 
    ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_switch_reset_control_SLICE_36 ( input B1, A1, A0, 
    DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/switch_reset_control/switch_rst_cnt[0] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 \server_power_control/switch_reset_control/switch_rst_cnt_cry_0[0] 
    ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_switch_reset_control_SLICE_37 ( input B1, A1, B0, 
    A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/switch_reset_control/switch_0v8_cnt[8] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/switch_reset_control/switch_0v8_cnt[7] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu2 \server_power_control/switch_reset_control/switch_0v8_cnt_cry_0[7] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1());

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_switch_reset_control_SLICE_38 ( input B1, A1, B0, 
    A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/switch_reset_control/switch_0v8_cnt[6] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/switch_reset_control/switch_0v8_cnt[5] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 \server_power_control/switch_reset_control/switch_0v8_cnt_cry_0[5] 
    ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_switch_reset_control_SLICE_39 ( input B1, A1, B0, 
    A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/switch_reset_control/switch_0v8_cnt[4] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/switch_reset_control/switch_0v8_cnt[3] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 \server_power_control/switch_reset_control/switch_0v8_cnt_cry_0[3] 
    ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_switch_reset_control_SLICE_40 ( input B1, A1, B0, 
    A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/switch_reset_control/switch_0v8_cnt[2] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/switch_reset_control/switch_0v8_cnt[1] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 \server_power_control/switch_reset_control/switch_0v8_cnt_cry_0[1] 
    ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_switch_reset_control_SLICE_41 ( input B1, A1, A0, 
    DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/switch_reset_control/switch_0v8_cnt[0] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 \server_power_control/switch_reset_control/switch_0v8_cnt_cry_0[0] 
    ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_cpu_pwr_control_SLICE_42 ( input B1, A1, B0, A0, 
    DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[10] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[9] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \server_power_control/cpu_pwr_control/seq_cnt_cry_0[9] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1());

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20011 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF008;
  defparam inst1.INIT1 = 16'h3008;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module server_power_control_cpu_pwr_control_SLICE_43 ( input B1, A1, B0, A0, 
    DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[8] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[7] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/cpu_pwr_control/seq_cnt_cry_0[7] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_cpu_pwr_control_SLICE_44 ( input B1, A1, B0, A0, 
    DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[6] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[5] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/cpu_pwr_control/seq_cnt_cry_0[5] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_cpu_pwr_control_SLICE_45 ( input B1, A1, B0, A0, 
    DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[4] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[3] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/cpu_pwr_control/seq_cnt_cry_0[3] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_cpu_pwr_control_SLICE_46 ( input B1, A1, B0, A0, 
    DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[2] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[1] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/cpu_pwr_control/seq_cnt_cry_0[1] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_cpu_pwr_control_SLICE_47 ( input B1, A1, B0, DI1, 
    CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/cpu_pwr_control/seq_cnt[0] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \server_power_control/cpu_pwr_control/seq_cnt_cry_0[0] ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_48 ( 
    input B0, A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[7] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20008 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_s_0[7] 
    ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_49 ( 
    input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[6] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[5] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry_0[5] 
    ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_50 ( 
    input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[4] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[3] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry_0[3] 
    ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_51 ( 
    input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[2] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[1] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry_0[1] 
    ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_52 ( 
    input B1, A1, A0, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time[0] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_time_cry_0[0] 
    ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_53 ( 
    input B0, A0, DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[7] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20003 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_s_0[7] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_54 ( 
    input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[6] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[5] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry_0[5] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_55 ( 
    input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[4] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[3] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry_0[3] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_56 ( 
    input B1, A1, B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[2] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[1] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry_0[1] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_57 ( 
    input B1, A1, A0, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt[0] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/cnt_cry_0[0] ( 
    .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_58 ( input B0, A0, 
    DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[15] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20008 
    \server_power_control/power_signal_detect_inst/low_time_cnt_s_0[15] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_59 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[14] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[13] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/low_time_cnt_cry_0[13] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_60 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[12] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[11] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/low_time_cnt_cry_0[11] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_61 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[10] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[9] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/low_time_cnt_cry_0[9] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_62 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[8] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[7] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/low_time_cnt_cry_0[7] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_63 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[6] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[5] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/low_time_cnt_cry_0[5] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_64 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[4] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[3] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/low_time_cnt_cry_0[3] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_65 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[2] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[1] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/low_time_cnt_cry_0[1] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_66 ( input B1, A1, 
    B0, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/low_time_cnt[0] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 
    \server_power_control/power_signal_detect_inst/low_time_cnt_cry_0[0] ( 
    .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_67 ( input B0, A0, 
    DI0, CE, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[15] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20008 
    \server_power_control/power_signal_detect_inst/debounce_cnt_s_0[15] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_68 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[14] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[13] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/debounce_cnt_cry_0[13] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_69 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[12] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[11] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/debounce_cnt_cry_0[11] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_70 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[10] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[9] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/debounce_cnt_cry_0[9] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_71 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[8] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[7] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/debounce_cnt_cry_0[7] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_72 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[6] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[5] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/debounce_cnt_cry_0[5] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_73 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[4] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[3] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/debounce_cnt_cry_0[3] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_74 ( input B1, A1, 
    B0, A0, DI1, DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[2] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[1] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  ccu20001 
    \server_power_control/power_signal_detect_inst/debounce_cnt_cry_0[1] ( 
    .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_75 ( input B1, A1, 
    B0, DI1, CE, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/power_signal_detect_inst/debounce_cnt[0] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 
    \server_power_control/power_signal_detect_inst/debounce_cnt_cry_0[0] ( 
    .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), 
    .D1(GNDI), .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_76 ( input A0, DI0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre \server_power_control/cpu_dly[7] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20005 \server_power_control/un1_cpu_dly_1_s_7_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_77 ( input A1, A0, DI1, CLK, FCI, output F0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \server_power_control/cpu_dly[6] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20005 \server_power_control/un1_cpu_dly_1_cry_5_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_78 ( input B1, A0, DI0, CLK, FCI, output F0, 
    Q0, F1, FCO );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  vmuxregsre \server_power_control/cpu_dly[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20012 \server_power_control/un1_cpu_dly_1_cry_3_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20012 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h300A;
  defparam inst1.INIT1 = 16'h500C;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module server_power_control_SLICE_79 ( input A1, A0, DI1, CLK, FCI, output F0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly;

  vmuxregsre \server_power_control/cpu_dly[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20005 \server_power_control/un1_cpu_dly_1_cry_1_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_80 ( input A1, B0, output F1, FCO );
  wire   GNDI;

  ccu20005 \server_power_control/un1_cpu_dly_1_cry_0_0 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_81 ( input B0, A0, DI0, CE, CLK, FCI, 
    output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/reboot_cnt[15] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20008 \server_power_control/reboot_cnt_s_0[15] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_82 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/reboot_cnt[14] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/reboot_cnt[13] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/reboot_cnt_cry_0[13] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_83 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/reboot_cnt[12] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/reboot_cnt[11] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/reboot_cnt_cry_0[11] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_84 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/reboot_cnt[10] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/reboot_cnt[9] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/reboot_cnt_cry_0[9] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_85 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/reboot_cnt[8] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/reboot_cnt[7] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/reboot_cnt_cry_0[7] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_86 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/reboot_cnt[6] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/reboot_cnt[5] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/reboot_cnt_cry_0[5] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_87 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/reboot_cnt[4] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/reboot_cnt[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/reboot_cnt_cry_0[3] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_88 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/reboot_cnt[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/reboot_cnt[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/reboot_cnt_cry_0[1] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_89 ( input B1, A1, B0, DI1, CE, CLK, output 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/reboot_cnt[0] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \server_power_control/reboot_cnt_cry_0[0] ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_90 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/efuse_dly[8] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/efuse_dly[7] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \server_power_control/efuse_dly_cry_0[7] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_91 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/efuse_dly[6] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/efuse_dly[5] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/efuse_dly_cry_0[5] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_92 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/efuse_dly[4] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/efuse_dly[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/efuse_dly_cry_0[3] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_93 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/efuse_dly[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/efuse_dly[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/efuse_dly_cry_0[1] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_94 ( input B1, A1, B0, DI1, CE, CLK, output 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/efuse_dly[0] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \server_power_control/efuse_dly_cry_0[0] ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_95 ( input B0, A0, DI0, CE, CLK, FCI, 
    output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/wait_time_out_cnt[15] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20008 \server_power_control/wait_time_out_cnt_s_0[15] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_96 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/wait_time_out_cnt[14] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/wait_time_out_cnt[13] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/wait_time_out_cnt_cry_0[13] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_97 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/wait_time_out_cnt[12] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/wait_time_out_cnt[11] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/wait_time_out_cnt_cry_0[11] ( .A0(A0), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_98 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/wait_time_out_cnt[10] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/wait_time_out_cnt[9] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/wait_time_out_cnt_cry_0[9] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_99 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/wait_time_out_cnt[8] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/wait_time_out_cnt[7] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/wait_time_out_cnt_cry_0[7] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_100 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/wait_time_out_cnt[6] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/wait_time_out_cnt[5] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/wait_time_out_cnt_cry_0[5] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_101 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/wait_time_out_cnt[4] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/wait_time_out_cnt[3] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/wait_time_out_cnt_cry_0[3] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_102 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/wait_time_out_cnt[2] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/wait_time_out_cnt[1] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/wait_time_out_cnt_cry_0[1] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_103 ( input B1, A1, B0, DI1, CE, CLK, 
    output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/wait_time_out_cnt[0] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \server_power_control/wait_time_out_cnt_cry_0[0] ( .A0(GNDI), 
    .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), 
    .CI(GNDI), .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_104 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/psu_dly[8] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/psu_dly[7] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \server_power_control/psu_dly_cry_0[7] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1());

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_105 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/psu_dly[6] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/psu_dly[5] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/psu_dly_cry_0[5] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_106 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/psu_dly[4] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/psu_dly[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/psu_dly_cry_0[3] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_107 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \server_power_control/psu_dly[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/psu_dly[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \server_power_control/psu_dly_cry_0[1] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_108 ( input B1, A1, B0, DI1, CE, CLK, 
    output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \server_power_control/psu_dly[0] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20004 \server_power_control/psu_dly_cry_0[0] ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_109 ( input B0, A0, DI0, CE, CLK, FCI, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/delay_cnt[7] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20003 \i2c0_slave_inst0/delay_cnt_s_0[7] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_110 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/delay_cnt[6] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/delay_cnt[5] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \i2c0_slave_inst0/delay_cnt_cry_0[5] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_111 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/delay_cnt[4] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/delay_cnt[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \i2c0_slave_inst0/delay_cnt_cry_0[3] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_112 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/delay_cnt[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/delay_cnt[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \i2c0_slave_inst0/delay_cnt_cry_0[1] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_113 ( input B1, A1, A0, DI1, CE, CLK, output F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/delay_cnt[0] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 \i2c0_slave_inst0/delay_cnt_cry_0[0] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_114 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/word_addr[7] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/word_addr[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20013 \i2c0_slave_inst0/word_addr_cry_0[6] ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20013 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF0E2;
  defparam inst1.INIT1 = 16'h30E2;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module i2c0_slave_inst0_SLICE_115 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/word_addr[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/word_addr[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20014 \i2c0_slave_inst0/word_addr_cry_0[4] ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20014 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF0E4;
  defparam inst1.INIT1 = 16'hF0E4;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module i2c0_slave_inst0_SLICE_116 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/word_addr[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/word_addr[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \i2c0_slave_inst0/word_addr_cry_0[2] ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_117 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/word_addr[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/word_addr[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20014 \i2c0_slave_inst0/word_addr_cry_0[0] ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_118 ( input B1, A0, output FCO );
  wire   GNDI;

  ccu20015 \i2c0_slave_inst0/word_addr_lcry_0 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20015 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h500C;
  defparam inst1.INIT1 = 16'h500C;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module i2c0_slave_inst0_SLICE_119 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/timeout_cnt[4] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/timeout_cnt[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \i2c0_slave_inst0/timeout_cnt_cry_0[3] ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_120 ( input B1, A1, B0, A0, DI1, DI0, CE, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/timeout_cnt[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/timeout_cnt[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \i2c0_slave_inst0/timeout_cnt_cry_0[1] ( .A0(A0), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_121 ( input B1, A1, A0, DI1, CE, CLK, output F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \i2c0_slave_inst0/timeout_cnt[0] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20002 \i2c0_slave_inst0/timeout_cnt_cry_0[0] ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_122 ( input A1, output FCO );
  wire   GNDI;

  ccu20016 \timer_inst/un6_int_1ms_cnt_cry_0_0 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20016 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h000A;
  defparam inst1.INIT1 = 16'h300A;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module timer_inst_SLICE_123 ( input B0, FCI, output F0 );
  wire   GNDI;

  ccu20007 \timer_inst/un6_int_100ms_cnt_s_21_0 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_124 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \timer_inst/int_100ms_cnt[20] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/int_100ms_cnt[19] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \timer_inst/un6_int_100ms_cnt_cry_19_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_125 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20012 \timer_inst/un6_int_100ms_cnt_cry_17_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_126 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \timer_inst/int_100ms_cnt[16] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/int_100ms_cnt[15] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \timer_inst/un6_int_100ms_cnt_cry_15_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_127 ( input A1, A0, DI1, CE, CLK, FCI, output F0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \timer_inst/int_100ms_cnt[14] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20005 \timer_inst/un6_int_100ms_cnt_cry_13_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_128 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \timer_inst/int_100ms_cnt[12] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/int_100ms_cnt[11] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \timer_inst/un6_int_100ms_cnt_cry_11_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_129 ( input B1, A0, DI0, CE, CLK, FCI, output F0, Q0, 
    F1, FCO );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  vmuxregsre \timer_inst/int_100ms_cnt[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20012 \timer_inst/un6_int_100ms_cnt_cry_9_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_130 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20005 \timer_inst/un6_int_100ms_cnt_cry_7_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_131 ( input A1, A0, DI1, CE, CLK, FCI, output F0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \timer_inst/int_100ms_cnt[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20005 \timer_inst/un6_int_100ms_cnt_cry_5_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_132 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \timer_inst/int_100ms_cnt[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/int_100ms_cnt[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \timer_inst/un6_int_100ms_cnt_cry_3_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_133 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \timer_inst/int_100ms_cnt[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/int_100ms_cnt[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \timer_inst/un6_int_100ms_cnt_cry_1_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_134 ( input B1, output FCO );
  wire   GNDI;

  ccu20017 \timer_inst/un6_int_100ms_cnt_cry_0_0 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20017 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h000A;
  defparam inst1.INIT1 = 16'h500C;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module timer_inst_SLICE_135 ( input A1, A0, FCI, output F0, F1 );
  wire   GNDI;

  ccu20005 \timer_inst/un6_int_1ms_cnt_cry_13_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_136 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \timer_inst/int_1ms_cnt[12] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/int_1ms_cnt[11] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \timer_inst/un6_int_1ms_cnt_cry_11_0 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_137 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \timer_inst/int_1ms_cnt[10] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/int_1ms_cnt[9] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \timer_inst/un6_int_1ms_cnt_cry_9_0 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_138 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20005 \timer_inst/un6_int_1ms_cnt_cry_7_0 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_139 ( input A1, A0, DI1, CE, CLK, FCI, output F0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \timer_inst/int_1ms_cnt[6] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20005 \timer_inst/un6_int_1ms_cnt_cry_5_0 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_140 ( input A1, B0, DI1, CE, CLK, FCI, output F0, F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly;

  vmuxregsre \timer_inst/int_1ms_cnt[4] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20007 \timer_inst/un6_int_1ms_cnt_cry_3_0 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_141 ( input A1, A0, DI1, DI0, CE, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \timer_inst/int_1ms_cnt[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/int_1ms_cnt[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20005 \timer_inst/un6_int_1ms_cnt_cry_1_0 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_142 ( input D0, A0, DI0, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut4 \flash_clk_cnt_0[0] ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \flash_clk_cnt[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h55AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_143 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40018 \server_power_control/next_state101_RNICD2B1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40019 \server_power_control/host_pwr_off_RNO ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \server_power_control/host_pwr_off ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h080A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8A88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module bmc_reset_ctrl_inst_SLICE_147 ( input D1, C1, B1, A1, D0, C0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40020 \bmc_reset_ctrl_inst/next_state_3_u_0_0[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40021 \bmc_reset_ctrl_inst/next_state_RNO[0] ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0022 \bmc_reset_ctrl_inst/next_state[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0022 \bmc_reset_ctrl_inst/next_state[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB2A2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAF0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0022 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1B INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module bmc_reset_ctrl_inst_SLICE_148 ( input D1, B1, C0, B0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40023 \bmc_reset_ctrl_inst/srst_delay_3[2] ( .A(GNDI), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40024 \bmc_reset_ctrl_inst/srst_delay_3[1] ( .A(GNDI), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \bmc_reset_ctrl_inst/srst_delay[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \bmc_reset_ctrl_inst/srst_delay[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module bmc_reset_ctrl_inst_SLICE_149 ( input C1, B1, D0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40025 \bmc_reset_ctrl_inst/srst_delay_3[5] ( .A(GNDI), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40026 \bmc_reset_ctrl_inst/srst_delay_3[3] ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre \bmc_reset_ctrl_inst/srst_delay[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \bmc_reset_ctrl_inst/srst_delay[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module bmc_reset_ctrl_inst_SLICE_150 ( input D1, C1, B1, A1, D0, C0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40027 \bmc_reset_ctrl_inst/bmc_srst5_4 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40028 \bmc_reset_ctrl_inst/srst_delay_3[6] ( .A(GNDI), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \bmc_reset_ctrl_inst/srst_delay[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_151 ( input D1, C1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40029 \i2c0_slave_inst0/sda_out_reg_13_iv_0 ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40030 \i2c0_slave_inst0/sda_out_reg_13_iv_i ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \i2c0_slave_inst0/sda_out_reg ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0031 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module bmc_reset_ctrl_inst_SLICE_152 ( input C1, B1, B0, A0, DI0, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40032 \bmc_reset_ctrl_inst/bmc_srst5_3 ( .A(GNDI), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40033 \bmc_reset_ctrl_inst/bmc_srst_0 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \bmc_reset_ctrl_inst/bmc_srst ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3030) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40033 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_157 ( input D1, C1, B1, A1, D0, B0, A0, DI0, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40034 \server_power_control/flash_clk_cnt9 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40035 flash_1s_RNO( .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre flash_1s( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h66AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_158 ( input D1, C1, B1, A1, 
    D0, C0, B0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40036 \server_power_control/cpu_pwr_control/un1_current_state_4_i_o2 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40037 \server_power_control/cpu_pwr_control/current_state_RNI7TN92[1] ( 
    .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/cpu_pwr_control/sys_rst_x ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_159 ( input D1, C1, B1, A1, D0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40038 \data_out_r_20[3] ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40039 \server_power_control/cpu_pwr_control/data_out_r_20[0] ( .A(A0), 
    .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \data_out_r[3] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre \data_out_r[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB830) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBB88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module SLICE_160 ( input D1, C1, B1, A1, D0, C0, B0, DI0, M0, CE, CLK, output 
    OFX0, Q0 );
  wire   \SLICE_160/SLICE_160_K1_H1 , GNDI, 
         \SLICE_160/server_power_control/cpu_pwr_control/data_out_r_20[1]/GATE_H0 
         , VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40040 SLICE_160_K1( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\SLICE_160/SLICE_160_K1_H1 ));
  lut40041 \server_power_control/cpu_pwr_control/data_out_r_20[1]/GATE ( 
    .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\SLICE_160/server_power_control/cpu_pwr_control/data_out_r_20[1]/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \data_out_r[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  selmux2 SLICE_160_K0K1MUX( 
    .D0(\SLICE_160/server_power_control/cpu_pwr_control/data_out_r_20[1]/GATE_H0 )
    , .D1(\SLICE_160/SLICE_160_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB830) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module SLICE_161 ( input D1, C1, B1, A1, D0, C0, A0, DI0, M0, CE, CLK, output 
    OFX0, Q0 );
  wire   \SLICE_161/SLICE_161_K1_H1 , GNDI, 
         \SLICE_161/server_power_control/cpu_pwr_control/data_out_r_20[2]/GATE_H0 
         , VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40042 SLICE_161_K1( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\SLICE_161/SLICE_161_K1_H1 ));
  lut40043 \server_power_control/cpu_pwr_control/data_out_r_20[2]/GATE ( 
    .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\SLICE_161/server_power_control/cpu_pwr_control/data_out_r_20[2]/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \data_out_r[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  selmux2 SLICE_161_K0K1MUX( 
    .D0(\SLICE_161/server_power_control/cpu_pwr_control/data_out_r_20[2]/GATE_H0 )
    , .D1(\SLICE_161/SLICE_161_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_162 ( input D1, C1, B1, A1, D0, C0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, CE_NOTIN, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40044 \server_power_control/data_out_r_20_0[5] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40045 \server_power_control/cpu_pwr_control/data_out_r_20[4] ( .A(A0), 
    .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \data_out_r[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  vmuxregsre \data_out_r[4] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBAAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFA0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_163 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, CE_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40046 \server_power_control/cpu_pwr_control/data_out_r_20[7] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40046 \data_out_r_20[6] ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \data_out_r[7] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \data_out_r[6] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_NOTIN), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3210) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_181 ( input D1, C1, A1, D0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40047 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_i_m4[3] ( .A(A1), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 \eeprom_i2c_inst/e2prom_i2c/un1_current_state_15_2 ( .A(A0), .B(B0), 
    .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/sda_out_en_i ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF505) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_182 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40049 \eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40050 \eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/before_state[1] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/before_state[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2AEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_183 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40049 \eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40050 \eeprom_i2c_inst/e2prom_i2c/before_state_ldmx[2] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/before_state[3] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/before_state[2] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_184 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40051 \eeprom_i2c_inst/e2prom_i2c/bit_cnt_RNO[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40052 \eeprom_i2c_inst/e2prom_i2c/bit_cnt_RNO[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/bit_cnt[1] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/bit_cnt[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3323) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFED) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_185 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40053 \eeprom_i2c_inst/e2prom_i2c/un31_NE ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40054 \eeprom_i2c_inst/e2prom_i2c/bit_cnt_RNO[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/bit_cnt[2] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCED) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h22AF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_186 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40055 \eeprom_i2c_inst/e2prom_i2c/current_state_RNO[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40056 \eeprom_i2c_inst/e2prom_i2c/current_state_ns[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/current_state[1] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/current_state[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00C8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_187 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40057 \eeprom_i2c_inst/e2prom_i2c/current_state_RNO[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40058 \eeprom_i2c_inst/e2prom_i2c/current_state_RNO[2] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/current_state[3] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/current_state[2] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00FB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_188 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40059 \eeprom_i2c_inst/e2prom_i2c/current_state_ns[6] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40060 \eeprom_i2c_inst/e2prom_i2c/current_state_ns[4] ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/current_state[6] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/current_state[4] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0EC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_189 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40061 \eeprom_i2c_inst/e2prom_i2c/current_state_ns[8] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40062 \eeprom_i2c_inst/e2prom_i2c/current_state_ns[7] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/current_state[8] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/current_state[7] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF02) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_190 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40063 \eeprom_i2c_inst/e2prom_i2c/current_state_RNO[10] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40064 \eeprom_i2c_inst/e2prom_i2c/current_state_RNO[9] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/current_state[10] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/current_state[9] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0322) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0032) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_191 ( input D1, C1, B1, A1, D0, C0, A0, 
    DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40065 \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt_RNO[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40066 \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt_RNO[0] ( .A(A0), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[1] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00F6) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00F5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_192 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40067 \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt_RNO[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40068 \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt_RNO[2] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[3] ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt[2] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00F9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00ED) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_193 ( input D1, C1, B1, A1, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40069 \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt_RNI427U[3] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40070 \eeprom_i2c_inst/e2prom_i2c/start_stretch_en_RNIT2M21 ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/scl_out_en ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD5C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBFBF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_194 ( input D1, C1, D0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40071 \eeprom_i2c_inst/e2prom_i2c/opcode_RNO ( .A(GNDI), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40072 \eeprom_i2c_inst/e2prom_i2c/opcode_3 ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/opcode ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_195 ( input C0, DI0, CE, CLK, output 
    F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40073 \eeprom_i2c_inst/e2prom_i2c/rcv_ack_RNO ( .A(GNDI), .B(GNDI), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/rcv_ack ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_197 ( input D1, C1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40074 \eeprom_i2c_inst/e2prom_i2c/start_stretch_det11_0_a2_1 ( .A(A1), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40075 \eeprom_i2c_inst/e2prom_i2c/start_stretch_det11_0_a2 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/scl_falling ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_203 ( input D1, C1, B1, D0, C0, B0, A0, 
    DI0, M1, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40076 \eeprom_i2c_inst/e2prom_i2c/start_stretch_det12_0_a2_RNO ( .A(GNDI), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40077 \eeprom_i2c_inst/e2prom_i2c/start_stretch_det9_0_a2 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[0] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/scl_rising ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_208 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, M1, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly;

  lut40078 \eeprom_i2c_inst/e2prom_i2c/state_cnt_RNIEK4J[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40079 \eeprom_i2c_inst/e2prom_i2c/start_stretch_det12_0_a2 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/scl_in_clean_dly[1] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/start_next_bit ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFDF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_210 ( input D1, C1, B1, A1, D0, C0, B0, 
    DI0, M1, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40080 \eeprom_i2c_inst/e2prom_i2c/start_stretch_det10_0_a2_2 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40081 \eeprom_i2c_inst/e2prom_i2c/start_stretch_det10_0_a2 ( .A(GNDI), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/scl_in_dly[1] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/start_repeat ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_211 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, M1, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly;

  lut40082 \eeprom_i2c_inst/e2prom_i2c/state_cnt_RNI9BPQ[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40083 \eeprom_i2c_inst/e2prom_i2c/start_stretch_det8_0_a2 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/scl_in_dly[2] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/start_stretch_det ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF7F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_212 ( input D1, C1, B1, A1, D0, C0, B0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40084 \eeprom_i2c_inst/e2prom_i2c/start_stretch_en_RNO ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40085 \eeprom_i2c_inst/e2prom_i2c/start_stretch_en8 ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/start_stretch_en ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_213 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40086 \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_2_sqmuxa_i ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40087 \eeprom_i2c_inst/e2prom_i2c/time_out_en_RNO ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/time_out_en ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_SLICE_217 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    M1, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly;

  lut40088 \eeprom_i2c_inst/un1_i2c_start23_i_0 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40089 \eeprom_i2c_inst/i2c_start_4_0 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \eeprom_i2c_inst/i2c_busy_1d ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/i2c_start ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40088 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00EA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_227 ( input D1, C1, B1, A1, D0, C0, B0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40090 \eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[4] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40091 \eeprom_i2c_inst/e2prom_i2c/rd_data_7_sqmuxa ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/rd_data_vld ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_228 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40092 \server_power_control/un1_next_state115_1_1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40093 \server_power_control/efuse_pwr_on_off_RNO ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \server_power_control/efuse_pwr_on_off ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F4F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40093 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEBEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_229 ( input D1, B1, D0, C0, 
    B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40094 \server_power_control/cpu_pwr_control/enable_reg_RNO_0[4] ( 
    .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40095 \server_power_control/cpu_pwr_control/enable_reg_RNO[4] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/enable_reg[4] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_230 ( input C1, A1, D0, C0, 
    B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40096 \server_power_control/cpu_pwr_control/enable_reg_RNO_0[2] ( .A(A1), 
    .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40097 \server_power_control/cpu_pwr_control/enable_reg_RNO[2] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/enable_reg[2] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_231 ( input D1, C1, D0, C0, 
    B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40098 \server_power_control/cpu_pwr_control/enable_reg_RNO_0[1] ( 
    .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40099 \server_power_control/cpu_pwr_control/enable_reg_RNO[1] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/enable_reg[1] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_232 ( input D1, C1, B1, A1, 
    D0, C0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40100 \server_power_control/cpu_pwr_control/next_state_1_0_a3_1[0] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40101 \server_power_control/cpu_pwr_control/enable_reg_RNO[0] ( .A(A0), 
    .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/cpu_pwr_control/enable_reg[0] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_233 ( input C1, A1, D0, C0, 
    B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40096 \server_power_control/cpu_pwr_control/enable_reg_RNO_0[3] ( .A(A1), 
    .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40102 \server_power_control/cpu_pwr_control/enable_reg_RNO[3] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/enable_reg[3] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_234 ( input C1, A1, D0, C0, 
    B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40103 \server_power_control/cpu_pwr_control/enable_reg_RNO_0[6] ( .A(A1), 
    .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40104 \server_power_control/cpu_pwr_control/enable_reg_RNO[6] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/enable_reg[6] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_235 ( input D1, A1, D0, C0, 
    B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40105 \server_power_control/cpu_pwr_control/enable_reg_RNO_0[5] ( .A(A1), 
    .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40106 \server_power_control/cpu_pwr_control/enable_reg_RNO[5] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/enable_reg[5] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_236 ( input D1, C1, A1, D0, 
    C0, B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40107 \server_power_control/cpu_pwr_control/un1_next_state40_5_i_o2 ( 
    .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40108 \server_power_control/cpu_pwr_control/enable_reg_RNO[8] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/enable_reg[8] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40108 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_237 ( input C1, A1, D0, C0, 
    B0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40096 \server_power_control/cpu_pwr_control/enable_reg_RNO_0[7] ( .A(A1), 
    .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \server_power_control/cpu_pwr_control/enable_reg_RNO[7] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/enable_reg[7] ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_238 ( input D1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40110 \server_power_control/SUM2 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40111 \server_power_control/flash_clk_cnt_3[1] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \flash_clk_cnt[2] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \flash_clk_cnt[1] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h66CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h45AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_239 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40112 \server_power_control/flash_clk_cnt_3[3] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \flash_clk_cnt[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6C8C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_240 ( input D1, B1, A1, D0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40113 \i2c0_slave_inst0/before_state_RNO[1] ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40114 \i2c0_slave_inst0/before_state_RNO[0] ( .A(A0), .B(B0), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/before_state[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c0_slave_inst0/before_state[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_241 ( input D1, C1, B1, D0, C0, B0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40115 \i2c0_slave_inst0/un1_stretch_en_i_a2[2] ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40116 \i2c0_slave_inst0/before_state_RNO[2] ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/before_state[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0003) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_242 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40117 \i2c0_slave_inst0/bit_cnt_RNO[1] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40118 \i2c0_slave_inst0/bit_cnt_3[0] ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/bit_cnt[1] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c0_slave_inst0/bit_cnt[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1212) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_243 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40119 \i2c0_slave_inst0/un1_stretch_en_2_NE ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40120 \i2c0_slave_inst0/bit_cnt_3[2] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c0_slave_inst0/bit_cnt[2] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF6) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h060A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_244 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40121 \i2c0_slave_inst0/current_state_RNO[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40122 \i2c0_slave_inst0/current_state_ns_0_0[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/current_state[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \i2c0_slave_inst0/current_state[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40121 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0233) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_245 ( input D1, C1, B1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40123 \i2c0_slave_inst0/current_state_RNO[3] ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40124 \i2c0_slave_inst0/current_state_RNO[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/current_state[3] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c0_slave_inst0/current_state[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0003) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h020A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_246 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40125 \i2c0_slave_inst0/current_state_RNO[5] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40126 \i2c0_slave_inst0/current_state_RNO[4] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/current_state[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/current_state[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40125 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0455) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_247 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40127 \i2c0_slave_inst0/current_state_RNO_0[6] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40128 \i2c0_slave_inst0/current_state_RNO[6] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/current_state[6] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_248 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40129 \i2c0_slave_inst0/scl_in_clean_dly_RNICU1L[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40130 \i2c0_slave_inst0/delay_cnt16 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c0_slave_inst0/delay_cnt_en ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40129 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF351) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C04) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_256 ( input D1, B1, A1, C0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40131 \i2c0_slave_inst0/un1_start_2_0 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40073 \i2c0_slave_inst0/rcv_ack_RNO ( .A(GNDI), .B(GNDI), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/rcv_ack ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_275 ( input D1, C1, B1, A1, D0, C0, B0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40132 \i2c0_slave_inst0/time_out_en_RNO_0 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40133 \i2c0_slave_inst0/start_0_a3 ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/start_en ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_276 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    M1, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly;

  lut40134 \i2c0_slave_inst0/un1_delay_cnt15_1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40135 \i2c0_slave_inst0/delay_cnt_en_1_sqmuxa_0_a3 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \i2c0_slave_inst0/scl_in_clean_dly[0] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/start_next_bit ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3B0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_278 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40136 \i2c0_slave_inst0/timeout_cnt_RNI18JS1[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40137 \i2c0_slave_inst0/time_out_en_RNO ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c0_slave_inst0/time_out_en ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40137 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module timer_inst_SLICE_280 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40138 \timer_inst/int_100ms_cnt11_16 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40139 \timer_inst/int_100ms_cnt11 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \timer_inst/int_100ms_en ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40138 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40139 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module timer_inst_SLICE_281 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40140 \timer_inst/int_1ms_cnt11_7 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40141 \timer_inst/int_1ms_cnt11 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \timer_inst/int_1ms_en ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40140 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40141 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_switch_reset_control_SLICE_282 ( input D1, C1, D0, 
    C0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_NOTIN, DI0_dly, CLK_dly, CE_dly;

  lut40098 
    \server_power_control/switch_reset_control/current_state_RNIOA3E[1] ( 
    .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40098 \server_power_control/switch_reset_control/switch_sys_rst_RNO ( 
    .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/switch_reset_control/switch_sys_rst ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_NOTIN), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter CE_INVERTERIN( .I(CE_dly), .Z(CE_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_283 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40142 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_7_4 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40143 \usb_reset_ctrl_inst/usb_prst_RNO ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \usb_reset_ctrl_inst/usb_prst ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40143 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3F15) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module por_SLICE_284 ( input DI0, M1, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40144 \por/VCC ( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0145 \por/rst_btn_dly[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0145 \por/rst_btn_dly[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40144 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0145 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module server_power_control_SLICE_303 ( input D1, B1, A1, D0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40146 \server_power_control/cpu_dly_RNO[1] ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40147 \server_power_control/cpu_dly_RNO[0] ( .A(A0), .B(B0), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_dly[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \server_power_control/cpu_dly[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40146 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h44CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40147 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h22AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_304 ( input D1, C1, A1, D0, C0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40148 \server_power_control/cpu_dly_RNO[5] ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40149 \server_power_control/cpu_dly_RNO[4] ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_dly[5] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \server_power_control/cpu_dly[4] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40148 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h50F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40149 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_305 ( input D1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40150 \server_power_control/un1_psu_on_off44 ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40151 \server_power_control/cpu_off_done_RNO ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_off_done ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40150 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6600) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40151 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0E0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_308 ( input D1, C1, B1, A1, 
    D0, C0, B0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40152 \server_power_control/cpu_pwr_control/next_state_RNO[1] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40153 \server_power_control/cpu_pwr_control/next_state_1_0[0] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0022 \server_power_control/cpu_pwr_control/next_state[1] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0022 \server_power_control/cpu_pwr_control/next_state[0] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40152 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDAD0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40153 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF32) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_309 ( input D1, C1, B1, A1, 
    D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40154 \server_power_control/cpu_pwr_control/next_state36_6 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40155 \server_power_control/cpu_pwr_control/next_state_1_0[2] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0022 \server_power_control/cpu_pwr_control/next_state[2] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40154 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40155 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDFCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_SLICE_311 ( input D1, C1, D0, B0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40071 \server_power_control/cpu_pwr_control/seq_cnt_RNIKVGD[5] ( .A(GNDI), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40094 \server_power_control/cpu_pwr_control/reset_done_RNO ( .A(GNDI), 
    .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/reset_done ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_315 ( input D1, B1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40023 \server_power_control/efuse_done_RNO_0 ( .A(GNDI), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40156 \server_power_control/efuse_done_RNO ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \server_power_control/efuse_done ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40156 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_316 ( 
    input C0, DI0, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40073 \server_power_control/power_signal_detect_inst/rst_btn_dbn/out_RNO 
    ( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/out ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module server_power_control_power_signal_detect_inst_SLICE_317 ( input C1, A1, 
    D0, C0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40157 \server_power_control/power_signal_detect_inst/next_state66_1 ( 
    .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40158 
    \server_power_control/power_signal_detect_inst/is_pwr_force_off_RNO ( 
    .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 
    \server_power_control/power_signal_detect_inst/is_pwr_force_off ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40157 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40158 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_318 ( input D1, C1, 
    B1, A1, C0, A0, DI0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40159 \server_power_control/power_signal_detect_inst/next_state52 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40160 \server_power_control/power_signal_detect_inst/is_pwr_on_off_RNO ( 
    .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \server_power_control/power_signal_detect_inst/is_pwr_on_off 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40159 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40160 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5F5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_319 ( input B0, DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40161 \server_power_control/is_reboot_RNO ( .A(GNDI), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \server_power_control/is_reboot ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40161 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3333) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_320 ( input D1, C1, B1, A1, D0, C0, B0, DI0, 
    M0, CLK, output OFX0, Q0 );
  wire   \server_power_control/SLICE_320/server_power_control/SLICE_320_K1_H1 , 
         GNDI, 
         \server_power_control/SLICE_320/server_power_control/next_state_1_3_0_.m24/GATE_H0 
         , VCCI, DI0_dly, CLK_dly;

  lut40162 \server_power_control/SLICE_320_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/SLICE_320/server_power_control/SLICE_320_K1_H1 ));
  lut40163 \server_power_control/next_state_1_3_0_.m24/GATE ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), 
    .Z(\server_power_control/SLICE_320/server_power_control/next_state_1_3_0_.m24/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0022 \server_power_control/next_state[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \server_power_control/SLICE_320_K0K1MUX ( 
    .D0(\server_power_control/SLICE_320/server_power_control/next_state_1_3_0_.m24/GATE_H0 )
    , 
    .D1(\server_power_control/SLICE_320/server_power_control/SLICE_320_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40162 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40163 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_321 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40164 \server_power_control/next_state_1_3_0_.N_45_i ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40165 \server_power_control/next_state_1_3_0_.m39 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0022 \server_power_control/next_state[2] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0022 \server_power_control/next_state[1] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40164 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF838) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40165 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h202F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_322 ( input D1, B1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40166 \server_power_control/next_state110_1 ( .A(GNDI), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40167 \server_power_control/next_state_1_3_0_.m50 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0022 \server_power_control/next_state[3] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40166 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40167 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h50D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_324 ( input D1, C1, 
    B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40168 
    \server_power_control/power_signal_detect_inst/force_sig_cnt_RNO[1] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40169 
    \server_power_control/power_signal_detect_inst/force_sig_cnt_RNO[0] ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/force_sig_cnt[1] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \server_power_control/power_signal_detect_inst/force_sig_cnt[0] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40168 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0208) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40169 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_325 ( input D1, C1, 
    B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40170 
    \server_power_control/power_signal_detect_inst/force_sig_cnt_RNO[3] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40171 
    \server_power_control/power_signal_detect_inst/force_sig_cnt_RNO[2] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/power_signal_detect_inst/force_sig_cnt[3] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/force_sig_cnt[2] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40170 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h90A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40171 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0802) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_327 ( input D1, B1, 
    A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40172 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.N_32_i ( 
    .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40173 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m13 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0022 \server_power_control/power_signal_detect_inst/next_state[2] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0022 \server_power_control/power_signal_detect_inst/next_state[0] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40172 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4477) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40173 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h11D1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_328 ( input D1, C1, 
    B1, A1, D0, C0, B0, A0, DI0, M0, CLK, output OFX0, Q0 );
  wire   
         \server_power_control/power_signal_detect_inst/SLICE_328/server_power_control/power_signal_detect_inst/SLICE_328_K1_H1 
         , 
         \server_power_control/power_signal_detect_inst/SLICE_328/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m23/GATE_H0 
         , VCCI, GNDI, DI0_dly, CLK_dly;

  lut40174 \server_power_control/power_signal_detect_inst/SLICE_328_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/power_signal_detect_inst/SLICE_328/server_power_control/power_signal_detect_inst/SLICE_328_K1_H1 )
    );
  lut40175 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m23/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\server_power_control/power_signal_detect_inst/SLICE_328/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m23/GATE_H0 )
    );
  vmuxregsre0022 \server_power_control/power_signal_detect_inst/next_state[1] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \server_power_control/power_signal_detect_inst/SLICE_328_K0K1MUX ( 
    .D0(\server_power_control/power_signal_detect_inst/SLICE_328/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m23/GATE_H0 )
    , 
    .D1(\server_power_control/power_signal_detect_inst/SLICE_328/server_power_control/power_signal_detect_inst/SLICE_328_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40174 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1510) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40175 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7520) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_329 ( input D1, C1, 
    A1, C0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40176 \server_power_control/power_signal_detect_inst/normal_sig_cnt_n1 ( 
    .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40157 
    \server_power_control/power_signal_detect_inst/normal_sig_cnt_RNO[0] ( 
    .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \server_power_control/power_signal_detect_inst/normal_sig_cnt[1] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \server_power_control/power_signal_detect_inst/normal_sig_cnt[0] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40176 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h50A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_330 ( input D1, C1, 
    B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40177 \server_power_control/power_signal_detect_inst/normal_sig_cnt_n3 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40178 
    \server_power_control/power_signal_detect_inst/normal_sig_cnt_RNO[2] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/power_signal_detect_inst/normal_sig_cnt[3] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/normal_sig_cnt[2] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), 
    .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40177 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h60A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40178 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6A00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_331 ( 
    input D1, C1, B1, A1, C0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40179 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state_RNO[1] 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40180 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state_ns_0_a3[0] 
    ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state[1] 
    ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/current_state[0] 
    ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40179 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC50) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40180 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0505) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_332 ( input C0, B0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40181 GND( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40182 \server_power_control/power_signal_detect_inst/rst_ext_in ( 
    .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0031 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40181 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40182 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_333 ( input D0, C0, B0, A0, M0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40144 VCC( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40183 \timer_inst/int_100ms_cnt11_15 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0031 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst_pre ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40183 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_334 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CE, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40141 \timer_inst/int_1ms_cnt11_8 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40184 \i2c0_slave_inst0/next_state16_NE_4 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40184 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFDF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_335 ( input D1, C1, B1, A1, D0, B0, M0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40185 \server_power_control/wait_time_out_cnt_RNIE2U01[7] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40166 \server_power_control/power_signal_detect_inst/pos_edge ( .A(GNDI), 
    .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec_pre ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40185 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_336 ( input D1, A1, 
    C0, B0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40105 \server_power_control/power_signal_detect_inst/normal_sig_cnt_c1 ( 
    .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40186 
    \server_power_control/power_signal_detect_inst/force_sig_cnt_n2_i_o3 ( 
    .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre0006 \server_power_control/power_signal_detect_inst/sig_r1 ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40186 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3F3F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_337 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40187 \server_power_control/psu_done_RNO ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40188 \server_power_control/psu_dly11_RNIA9CC1 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \server_power_control/psu_done ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40187 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFD5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40188 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_338 ( input D1, C1, D0, C0, B0, A0, M1, M0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40189 \server_power_control/power_signal_detect_inst/un1_next_state69 ( 
    .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40190 \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5_4 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/switch_reset_control/current_state[1] ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \server_power_control/switch_reset_control/current_state[0] ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40189 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40190 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_339 ( input D1, C1, B1, A1, D0, C0, M0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40191 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/next_state24_0_a2_4 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40192 \server_power_control/cpu_pwr_control/next_state36_0 ( .A(GNDI), 
    .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/switch_reset_control/current_state[2] ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40191 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40192 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_switch_reset_control_SLICE_340 ( input D1, C1, B1, 
    A1, D0, A0, DI1, DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40193 
    \server_power_control/switch_reset_control/next_state_1_2_0_.N_11_i ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40194 
    \server_power_control/switch_reset_control/next_state_1_2_0_.N_436_i ( 
    .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0022 \server_power_control/switch_reset_control/next_state[1] ( 
    .D0(VCCI), .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0022 \server_power_control/switch_reset_control/next_state[0] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40193 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40194 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_341 ( input D1, C1, B1, A1, D0, C0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40195 \server_power_control/cpu_pwr_control/bmc_pwrgd_4 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40098 
    \server_power_control/switch_reset_control/next_state_1_2_0_.N_435_i ( 
    .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0022 \server_power_control/switch_reset_control/next_state[2] ( 
    .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40195 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_342 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40196 \server_power_control/next_state105_RNITMEB6 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40191 \server_power_control/wait_time_out_cnt_RNI8SII4[0] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/wait_time_out ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40196 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_343 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40197 \usb_reset_ctrl_inst/start_e2prom_2_0_RNO ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40198 \usb_reset_ctrl_inst/start_e2prom_2_0 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre start_e2prom( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40197 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40198 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_344 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40199 \usb_reset_ctrl_inst/test_interrupt7_4 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40200 \usb_reset_ctrl_inst/test_interrupt7 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre test_interrupt( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40199 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40200 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_345 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40201 \server_power_control/cpu_pwr_control/cpub_pwrok_7 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40202 \server_power_control/cpu_pwr_control/next_state36_5 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \test_register[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \test_register[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40201 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40202 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_346 ( input D1, C1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40203 \server_power_control/switch_reset_control/next_state13_4 ( .A(A1), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40204 \server_power_control/switch_reset_control/next_state21_5 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \test_register[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \test_register[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40203 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40204 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_347 ( input D1, C1, B1, A1, C0, B0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40205 \server_power_control/switch_reset_control/next_state21_4 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40182 \usb_reset_ctrl_inst/test_interrupt7_3 ( .A(GNDI), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \test_register[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \test_register[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40205 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_348 ( input C1, B1, A1, D0, C0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40206 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_3 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40207 \usb_reset_ctrl_inst/riser2_reset ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \test_register[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \test_register[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40206 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0404) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40207 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module timer_inst_SLICE_349 ( input D1, C1, B1, A1, B0, A0, DI0, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40208 \timer_inst/int_100ms_cnt11_11 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40209 \timer_inst/int_100ms_cnt_0[0] ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/int_100ms_cnt[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40208 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40209 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module timer_inst_SLICE_350 ( input C1, A1, C0, B0, DI1, DI0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40210 \timer_inst/int_100ms_cnt_3[7] ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40025 \timer_inst/int_100ms_cnt_3[5] ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \timer_inst/int_100ms_cnt[7] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \timer_inst/int_100ms_cnt[5] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40210 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module timer_inst_SLICE_351 ( input C1, B1, D0, A0, DI1, DI0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40025 \timer_inst/int_100ms_cnt_3[10] ( .A(GNDI), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40194 \timer_inst/int_100ms_cnt_3[8] ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre \timer_inst/int_100ms_cnt[10] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \timer_inst/int_100ms_cnt[8] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_352 ( input D1, A1, D0, A0, DI1, DI0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40194 \timer_inst/int_100ms_cnt_3[17] ( .A(A1), .B(GNDI), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40194 \timer_inst/int_100ms_cnt_3[13] ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre \timer_inst/int_100ms_cnt[17] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \timer_inst/int_100ms_cnt[13] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_353 ( input B1, A1, D0, B0, DI1, DI0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40211 \timer_inst/int_100ms_cnt_3[21] ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40166 \timer_inst/int_100ms_cnt_3[18] ( .A(GNDI), .B(B0), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre \timer_inst/int_100ms_cnt[21] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \timer_inst/int_100ms_cnt[18] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40211 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_354 ( input D1, C1, B1, A1, D0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40212 \bmc_reset_ctrl_inst/bmc_prst9_8 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut4 \timer_inst/int_1ms_cnt_0[0] ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/int_1ms_cnt[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40212 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module timer_inst_SLICE_355 ( input C1, A1, B0, A0, DI1, DI0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40157 \timer_inst/int_1ms_cnt_3[5] ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40213 \timer_inst/int_1ms_cnt_3[3] ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \timer_inst/int_1ms_cnt[5] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \timer_inst/int_1ms_cnt[3] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40213 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module timer_inst_SLICE_356 ( input C1, A1, C0, A0, DI1, DI0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40157 \timer_inst/int_1ms_cnt_3[8] ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40157 \timer_inst/int_1ms_cnt_3[7] ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \timer_inst/int_1ms_cnt[8] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \timer_inst/int_1ms_cnt[7] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_357 ( input B1, A1, D0, A0, DI1, DI0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40211 \timer_inst/int_1ms_cnt_3[14] ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40214 \timer_inst/int_1ms_cnt_3[13] ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre \timer_inst/int_1ms_cnt[14] ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \timer_inst/int_1ms_cnt[13] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40214 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_358 ( input D1, C1, B1, A1, DI0, M1, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40215 \eeprom_i2c_inst/e2prom_i2c/state_cnt_RNI91AF[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40144 \timer_inst/timer_inst/VCC\000/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \timer_inst/rst_n_dly[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \timer_inst/rst_n_dly[0] ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40215 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF7F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_359 ( input D1, C1, B1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40216 \usb_reset_ctrl_inst/usb_ponrst_RNO_0 ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40217 \usb_reset_ctrl_inst/usb_ponrst_RNO ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \usb_reset_ctrl_inst/usb_ponrst ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40216 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40217 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3FDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_360 ( input D1, A1, B0, A0, M1, M0, LSR, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40105 \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_RNI7JHI[0] ( .A(A1), 
    .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40213 \eeprom_i2c_inst/e2prom_i2c/bit_cnt_5_i_a2_0_0_0[1] ( .A(A0), 
    .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0006 \usb_reset_ctrl_inst/current_state[1] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0006 \usb_reset_ctrl_inst/current_state[0] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_361 ( input C1, A1, D0, A0, M0, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, LSR_dly;

  lut40218 \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt_RNO_0[2] ( .A(A1), 
    .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40105 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_a4_0[0] ( .A(A0), 
    .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0006 \usb_reset_ctrl_inst/current_state[2] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40218 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F5F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_362 ( input D1, C1, B1, A1, D0, C0, B0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40219 \usb_reset_ctrl_inst/next_state_RNO[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40220 \usb_reset_ctrl_inst/next_state_RNO[0] ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0022 \usb_reset_ctrl_inst/next_state[1] ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0022 \usb_reset_ctrl_inst/next_state[0] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40219 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h45CF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40220 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00FC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_363 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40221 \usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_8[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40222 \usb_reset_ctrl_inst/next_state_1_0_0_0[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0022 \usb_reset_ctrl_inst/next_state[2] ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40221 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40222 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_364 ( input D1, C1, B1, A1, D0, C0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40223 \i2c0_slave_inst0/current_state_RNO_0[5] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40224 \i2c0_slave_inst0/rcv_bit19_i_0_o3_RNIFARO ( .A(A0), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/wr_data_vld ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40223 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40224 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module data_out_r_20_15_3__SLICE_365 ( input D1, C1, B1, D0, C0, A0, M1, M0, 
    FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \data_out_r_20_15[3]/SLICE_365/data_out_r_20_15[3]/SLICE_365_K1_H1 , 
         \data_out_r_20_15[3]/SLICE_365/data_out_r_20_15[3]/GATE_H0 ;

  lut40225 \data_out_r_20_15[3]/SLICE_365_K1 ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\data_out_r_20_15[3]/SLICE_365/data_out_r_20_15[3]/SLICE_365_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40226 \data_out_r_20_15[3]/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\data_out_r_20_15[3]/SLICE_365/data_out_r_20_15[3]/GATE_H0 ));
  selmux2 \data_out_r_20_15[3]/SLICE_365_K0K1MUX ( 
    .D0(\data_out_r_20_15[3]/SLICE_365/data_out_r_20_15[3]/GATE_H0 ), 
    .D1(\data_out_r_20_15[3]/SLICE_365/data_out_r_20_15[3]/SLICE_365_K1_H1 ), 
    .SD(M0), .Z(OFX0));
  selmux2 \data_out_r_20_15[3]/SLICE_365_FXMUX ( .D0(FXA), .D1(FXB), .SD(M1), 
    .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40225 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40226 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFA0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_un1_sda_out_0_sqmuxa_SLICE_366 ( input C1, 
    B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366/eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366_K1_H1 
         , 
         \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366/eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/GATE_H0 
         ;

  lut40227 \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366/eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40228 \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/GATE ( .A(A0), 
    .B(B0), .C(C0), .D(D0), 
    .Z(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366/eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/GATE_H0 )
    );
  selmux2 \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366_K0K1MUX 
    ( 
    .D0(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366/eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/GATE_H0 )
    , 
    .D1(\eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366/eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa/SLICE_366_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40227 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40228 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_sda_bit_out_7_SLICE_367 ( input D1, C1, B1, 
    A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   
         \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367_K1_H1 
         , 
         \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/GATE_H0 
         ;

  lut40229 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), 
    .Z(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367_K1_H1 )
    );
  lut40230 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(D0), 
    .Z(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/GATE_H0 )
    );
  selmux2 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367_K0K1MUX ( 
    .D0(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/GATE_H0 )
    , 
    .D1(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7/SLICE_367_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40229 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF08) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40230 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBC8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_sda_bit_out_1_SLICE_368 ( input D1, C1, B1, 
    A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   
         \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368_K1_H1 
         , GNDI, 
         \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/GATE_H0 
         ;

  lut40231 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), 
    .Z(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368_K1_H1 )
    );
  lut40232 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), 
    .Z(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368_K0K1MUX ( 
    .D0(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/GATE_H0 )
    , 
    .D1(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_1/SLICE_368_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40231 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEF2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40232 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_sda_bit_out_5_0_m2_SLICE_369 ( input C1, B1, 
    A1, D0, C0, B0, M0, output OFX0 );
  wire   GNDI, 
         \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369_K1_H1 
         , 
         \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/GATE_H0 
         ;

  lut40233 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40234 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/GATE ( .A(GNDI), 
    .B(B0), .C(C0), .D(D0), 
    .Z(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/GATE_H0 )
    );
  selmux2 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369_K0K1MUX ( 
    .D0(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/GATE_H0 )
    , 
    .D1(\eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369/eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_m2/SLICE_369_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40233 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB8B8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40234 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_data_out_r_20_15_0__SLICE_370 ( input C1, B1, A1, 
    D0, C0, B0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370/usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370_K1_H1 
         , 
         \usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370/usb_reset_ctrl_inst/data_out_r_20_15[0]/GATE_H0 
         ;

  lut40235 \usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), 
    .Z(\usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370/usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40236 \usb_reset_ctrl_inst/data_out_r_20_15[0]/GATE ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), 
    .Z(\usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370/usb_reset_ctrl_inst/data_out_r_20_15[0]/GATE_H0 )
    );
  selmux2 \usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370_K0K1MUX ( 
    .D0(\usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370/usb_reset_ctrl_inst/data_out_r_20_15[0]/GATE_H0 )
    , 
    .D1(\usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370/usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \usb_reset_ctrl_inst/data_out_r_20_15[0]/SLICE_370_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40235 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40236 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_data_out_r_20_14_0__SLICE_371 ( input D1, C1, B1, 
    D0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371/usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371_K1_H1 
         , 
         \usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371/usb_reset_ctrl_inst/data_out_r_20_14[0]/GATE_H0 
         ;

  lut40237 \usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371_K1 ( .A(GNDI), 
    .B(B1), .C(C1), .D(D1), 
    .Z(\usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371/usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40238 \usb_reset_ctrl_inst/data_out_r_20_14[0]/GATE ( .A(A0), .B(B0), 
    .C(GNDI), .D(D0), 
    .Z(\usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371/usb_reset_ctrl_inst/data_out_r_20_14[0]/GATE_H0 )
    );
  selmux2 \usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371_K0K1MUX ( 
    .D0(\usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371/usb_reset_ctrl_inst/data_out_r_20_14[0]/GATE_H0 )
    , 
    .D1(\usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371/usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 \usb_reset_ctrl_inst/data_out_r_20_14[0]/SLICE_371_FXMUX ( .D0(FXA), 
    .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40237 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40238 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAACC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module 
  server_power_control_switch_reset_control_next_state_1_2_0__m7_i_m2_SLICE_372
   ( input D1, C1, B1, D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372/server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372_K1_H1 
         , 
         \server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372/server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/GATE_H0 
         ;

  lut40163 
    \server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372_K1 
    ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372/server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40239 
    \server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372/server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/GATE_H0 )
    );
  selmux2 
    \server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372_K0K1MUX 
    ( 
    .D0(\server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372/server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/GATE_H0 )
    , 
    .D1(\server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372/server_power_control/switch_reset_control/next_state_1_2_0_.m7_i_m2/SLICE_372_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40239 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_19_4__SLICE_373 ( 
    input D1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373/server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373/server_power_control/cpu_pwr_control/data_out_r_20_19[4]/GATE_H0 
         ;

  lut40240 
    \server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373_K1 ( 
    .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373/server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40241 \server_power_control/cpu_pwr_control/data_out_r_20_19[4]/GATE ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373/server_power_control/cpu_pwr_control/data_out_r_20_19[4]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373/server_power_control/cpu_pwr_control/data_out_r_20_19[4]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373/server_power_control/cpu_pwr_control/data_out_r_20_19[4]/SLICE_373_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40240 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEE44) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40241 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_17_7__SLICE_374 ( 
    input D1, C1, B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   
         \server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374/server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374/server_power_control/cpu_pwr_control/data_out_r_20_17[7]/GATE_H0 
         ;

  lut40242 
    \server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374/server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374_K1_H1 )
    );
  lut40243 \server_power_control/cpu_pwr_control/data_out_r_20_17[7]/GATE ( 
    .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374/server_power_control/cpu_pwr_control/data_out_r_20_17[7]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374/server_power_control/cpu_pwr_control/data_out_r_20_17[7]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374/server_power_control/cpu_pwr_control/data_out_r_20_17[7]/SLICE_374_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40242 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40243 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_11_1__SLICE_375 ( 
    input D1, C1, B1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375/server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375/server_power_control/cpu_pwr_control/data_out_r_20_11[1]/GATE_H0 
         ;

  lut40244 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375_K1 ( 
    .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375/server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40245 \server_power_control/cpu_pwr_control/data_out_r_20_11[1]/GATE ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375/server_power_control/cpu_pwr_control/data_out_r_20_11[1]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375/server_power_control/cpu_pwr_control/data_out_r_20_11[1]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375/server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[1]/SLICE_375_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40244 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40245 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE2E2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_11_2__SLICE_376 ( 
    input D1, C1, A1, D0, C0, B0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376/server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376/server_power_control/cpu_pwr_control/data_out_r_20_11[2]/GATE_H0 
         ;

  lut40246 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376_K1 ( 
    .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376/server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40247 \server_power_control/cpu_pwr_control/data_out_r_20_11[2]/GATE ( 
    .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376/server_power_control/cpu_pwr_control/data_out_r_20_11[2]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376/server_power_control/cpu_pwr_control/data_out_r_20_11[2]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376/server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[2]/SLICE_376_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40246 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFA0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40247 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_13_1__SLICE_377 ( 
    input D1, C1, A1, D0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377/server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377/server_power_control/cpu_pwr_control/data_out_r_20_13[1]/GATE_H0 
         ;

  lut40248 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377_K1 ( 
    .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377/server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40249 \server_power_control/cpu_pwr_control/data_out_r_20_13[1]/GATE ( 
    .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377/server_power_control/cpu_pwr_control/data_out_r_20_13[1]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377/server_power_control/cpu_pwr_control/data_out_r_20_13[1]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377/server_power_control/cpu_pwr_control/data_out_r_20_13[1]/SLICE_377_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40248 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40249 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBB88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_13_2__SLICE_378 ( 
    input C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378/server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378/server_power_control/cpu_pwr_control/data_out_r_20_13[2]/GATE_H0 
         ;

  lut40250 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378/server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40251 \server_power_control/cpu_pwr_control/data_out_r_20_13[2]/GATE ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378/server_power_control/cpu_pwr_control/data_out_r_20_13[2]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378/server_power_control/cpu_pwr_control/data_out_r_20_13[2]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378/server_power_control/cpu_pwr_control/data_out_r_20_13[2]/SLICE_378_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40250 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40251 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_14_1__SLICE_379 ( 
    input C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379/server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379/server_power_control/cpu_pwr_control/data_out_r_20_14[1]/GATE_H0 
         ;

  lut40252 
    \server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379/server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40251 \server_power_control/cpu_pwr_control/data_out_r_20_14[1]/GATE ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379/server_power_control/cpu_pwr_control/data_out_r_20_14[1]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379/server_power_control/cpu_pwr_control/data_out_r_20_14[1]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379/server_power_control/cpu_pwr_control/data_out_r_20_14[1]/SLICE_379_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40252 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD8D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_15_1__SLICE_380 ( 
    input D1, C1, A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380/server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380/server_power_control/cpu_pwr_control/data_out_r_20_15[1]/GATE_H0 
         ;

  lut40246 
    \server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380_K1 ( 
    .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380/server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40251 \server_power_control/cpu_pwr_control/data_out_r_20_15[1]/GATE ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380/server_power_control/cpu_pwr_control/data_out_r_20_15[1]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380/server_power_control/cpu_pwr_control/data_out_r_20_15[1]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380/server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_15[1]/SLICE_380_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_13_7__SLICE_381 ( 
    input D1, C1, B1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381/server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381/server_power_control/cpu_pwr_control/data_out_r_20_13[7]/GATE_H0 
         ;

  lut40247 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381_K1 ( 
    .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381/server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40253 \server_power_control/cpu_pwr_control/data_out_r_20_13[7]/GATE ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381/server_power_control/cpu_pwr_control/data_out_r_20_13[7]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381/server_power_control/cpu_pwr_control/data_out_r_20_13[7]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381/server_power_control/cpu_pwr_control/data_out_r_20_13[7]/SLICE_381_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40253 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE2E2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_13_4__SLICE_382 ( 
    input D1, C1, B1, D0, C0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382/server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382/server_power_control/cpu_pwr_control/data_out_r_20_13[4]/GATE_H0 
         ;

  lut40225 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382_K1 ( 
    .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382/server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40254 \server_power_control/cpu_pwr_control/data_out_r_20_13[4]/GATE ( 
    .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382/server_power_control/cpu_pwr_control/data_out_r_20_13[4]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382/server_power_control/cpu_pwr_control/data_out_r_20_13[4]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382/server_power_control/cpu_pwr_control/data_out_r_20_13[4]/SLICE_382_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40254 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFA0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_13_0__SLICE_383 ( 
    input D1, C1, A1, D0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383/server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383/server_power_control/cpu_pwr_control/data_out_r_20_13[0]/GATE_H0 
         ;

  lut40255 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383_K1 ( 
    .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383/server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40256 \server_power_control/cpu_pwr_control/data_out_r_20_13[0]/GATE ( 
    .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383/server_power_control/cpu_pwr_control/data_out_r_20_13[0]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383/server_power_control/cpu_pwr_control/data_out_r_20_13[0]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383/server_power_control/cpu_pwr_control/data_out_r_20_13[0]/SLICE_383_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40255 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40256 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_11_7__SLICE_384 ( 
    input D1, C1, B1, D0, C0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384/server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384/server_power_control/cpu_pwr_control/data_out_r_20_11[7]/GATE_H0 
         ;

  lut40225 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384_K1 ( 
    .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384/server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40246 \server_power_control/cpu_pwr_control/data_out_r_20_11[7]/GATE ( 
    .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384/server_power_control/cpu_pwr_control/data_out_r_20_11[7]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384/server_power_control/cpu_pwr_control/data_out_r_20_11[7]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384/server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[7]/SLICE_384_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_11_4__SLICE_385 ( 
    input D1, C1, B1, D0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385/server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385/server_power_control/cpu_pwr_control/data_out_r_20_11[4]/GATE_H0 
         ;

  lut40257 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385_K1 ( 
    .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385/server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40258 \server_power_control/cpu_pwr_control/data_out_r_20_11[4]/GATE ( 
    .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385/server_power_control/cpu_pwr_control/data_out_r_20_11[4]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385/server_power_control/cpu_pwr_control/data_out_r_20_11[4]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385/server_power_control/cpu_pwr_control/data_out_r_20_11[4]/SLICE_385_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40257 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40258 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAACC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_11_0__SLICE_386 ( 
    input C1, B1, A1, C0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386/server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386/server_power_control/cpu_pwr_control/data_out_r_20_11[0]/GATE_H0 
         ;

  lut40245 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386/server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40259 \server_power_control/cpu_pwr_control/data_out_r_20_11[0]/GATE ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386/server_power_control/cpu_pwr_control/data_out_r_20_11[0]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386/server_power_control/cpu_pwr_control/data_out_r_20_11[0]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386/server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_11[0]/SLICE_386_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40259 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB8B8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_14_2__SLICE_387 ( 
    input C1, B1, A1, D0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387/server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387/server_power_control/cpu_pwr_control/data_out_r_20_14[2]/GATE_H0 
         ;

  lut40251 
    \server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387/server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40260 \server_power_control/cpu_pwr_control/data_out_r_20_14[2]/GATE ( 
    .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387/server_power_control/cpu_pwr_control/data_out_r_20_14[2]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387/server_power_control/cpu_pwr_control/data_out_r_20_14[2]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387/server_power_control/cpu_pwr_control/data_out_r_20_14[2]/SLICE_387_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40260 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEE44) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_15_2__SLICE_388 ( 
    input D1, C1, B1, D0, B0, A0, M1, M0, FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388/server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388/server_power_control/cpu_pwr_control/data_out_r_20_15[2]/GATE_H0 
         ;

  lut40261 
    \server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388_K1 ( 
    .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388/server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40262 \server_power_control/cpu_pwr_control/data_out_r_20_15[2]/GATE ( 
    .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388/server_power_control/cpu_pwr_control/data_out_r_20_15[2]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388/server_power_control/cpu_pwr_control/data_out_r_20_15[2]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388/server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388_K1_H1 )
    , .SD(M0), .Z(OFX0));
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_15[2]/SLICE_388_FXMUX 
    ( .D0(FXA), .D1(FXB), .SD(M1), .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40261 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40262 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDD88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_cpu_pwr_control_data_out_r_20_14_4__SLICE_389 ( 
    input D1, B1, A1, D0, C0, B0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389/server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389_K1_H1 
         , 
         \server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389/server_power_control/cpu_pwr_control/data_out_r_20_14[4]/GATE_H0 
         ;

  lut40263 
    \server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389_K1 ( 
    .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389/server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40264 \server_power_control/cpu_pwr_control/data_out_r_20_14[4]/GATE ( 
    .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389/server_power_control/cpu_pwr_control/data_out_r_20_14[4]/GATE_H0 )
    );
  selmux2 
    \server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389_K0K1MUX 
    ( 
    .D0(\server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389/server_power_control/cpu_pwr_control/data_out_r_20_14[4]/GATE_H0 )
    , 
    .D1(\server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389/server_power_control/cpu_pwr_control/data_out_r_20_14[4]/SLICE_389_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40263 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEE22) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40264 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module 
  server_power_control_power_signal_detect_inst_next_state_1_2_0__m28_SLICE_390
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   
         \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390_K1_H1 
         , 
         \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/GATE_H0 
         ;

  lut40265 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390_K1_H1 )
    );
  lut40266 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/GATE_H0 )
    );
  selmux2 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390_K0K1MUX 
    ( 
    .D0(\server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/GATE_H0 )
    , 
    .D1(\server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m28/SLICE_390_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40265 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7870) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40266 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F53) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module 
  server_power_control_power_signal_detect_inst_next_state_1_2_0__m11_SLICE_391
   ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   
         \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391_K1_H1 
         , 
         \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/GATE_H0 
         ;

  lut40267 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391_K1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391_K1_H1 )
    );
  lut40268 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/GATE 
    ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/GATE_H0 )
    );
  selmux2 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391_K0K1MUX 
    ( 
    .D0(\server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/GATE_H0 )
    , 
    .D1(\server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391/server_power_control/power_signal_detect_inst/next_state_1_2_0_.m11/SLICE_391_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40267 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40268 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8880) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_next_state_1_3_0__m31_SLICE_392 ( input D1, C1, B1, 
    A1, D0, C0, B0, A0, M0, output OFX0 );
  wire   
         \server_power_control/next_state_1_3_0_.m31/SLICE_392/server_power_control/next_state_1_3_0_.m31/SLICE_392_K1_H1 
         , 
         \server_power_control/next_state_1_3_0_.m31/SLICE_392/server_power_control/next_state_1_3_0_.m31/GATE_H0 
         ;

  lut40269 \server_power_control/next_state_1_3_0_.m31/SLICE_392_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/next_state_1_3_0_.m31/SLICE_392/server_power_control/next_state_1_3_0_.m31/SLICE_392_K1_H1 )
    );
  lut40270 \server_power_control/next_state_1_3_0_.m31/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(D0), 
    .Z(\server_power_control/next_state_1_3_0_.m31/SLICE_392/server_power_control/next_state_1_3_0_.m31/GATE_H0 )
    );
  selmux2 \server_power_control/next_state_1_3_0_.m31/SLICE_392_K0K1MUX ( 
    .D0(\server_power_control/next_state_1_3_0_.m31/SLICE_392/server_power_control/next_state_1_3_0_.m31/GATE_H0 )
    , 
    .D1(\server_power_control/next_state_1_3_0_.m31/SLICE_392/server_power_control/next_state_1_3_0_.m31/SLICE_392_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40269 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0AC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40270 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F4F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_next_state_1_3_0__m49_SLICE_393 ( input D1, C1, B1, 
    A1, D0, B0, A0, M0, output OFX0 );
  wire   
         \server_power_control/next_state_1_3_0_.m49/SLICE_393/server_power_control/next_state_1_3_0_.m49/SLICE_393_K1_H1 
         , GNDI, 
         \server_power_control/next_state_1_3_0_.m49/SLICE_393/server_power_control/next_state_1_3_0_.m49/GATE_H0 
         ;

  lut40271 \server_power_control/next_state_1_3_0_.m49/SLICE_393_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/next_state_1_3_0_.m49/SLICE_393/server_power_control/next_state_1_3_0_.m49/SLICE_393_K1_H1 )
    );
  lut40272 \server_power_control/next_state_1_3_0_.m49/GATE ( .A(A0), .B(B0), 
    .C(GNDI), .D(D0), 
    .Z(\server_power_control/next_state_1_3_0_.m49/SLICE_393/server_power_control/next_state_1_3_0_.m49/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \server_power_control/next_state_1_3_0_.m49/SLICE_393_K0K1MUX ( 
    .D0(\server_power_control/next_state_1_3_0_.m49/SLICE_393/server_power_control/next_state_1_3_0_.m49/GATE_H0 )
    , 
    .D1(\server_power_control/next_state_1_3_0_.m49/SLICE_393/server_power_control/next_state_1_3_0_.m49/SLICE_393_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40271 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1D00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40272 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_next_state_1_3_0__m12_SLICE_394 ( input D1, C1, B1, 
    A1, D0, C0, A0, M0, output OFX0 );
  wire   
         \server_power_control/next_state_1_3_0_.m12/SLICE_394/server_power_control/next_state_1_3_0_.m12/SLICE_394_K1_H1 
         , GNDI, 
         \server_power_control/next_state_1_3_0_.m12/SLICE_394/server_power_control/next_state_1_3_0_.m12/GATE_H0 
         ;

  lut40273 \server_power_control/next_state_1_3_0_.m12/SLICE_394_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/next_state_1_3_0_.m12/SLICE_394/server_power_control/next_state_1_3_0_.m12/SLICE_394_K1_H1 )
    );
  lut40274 \server_power_control/next_state_1_3_0_.m12/GATE ( .A(A0), .B(GNDI), 
    .C(C0), .D(D0), 
    .Z(\server_power_control/next_state_1_3_0_.m12/SLICE_394/server_power_control/next_state_1_3_0_.m12/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \server_power_control/next_state_1_3_0_.m12/SLICE_394_K0K1MUX ( 
    .D0(\server_power_control/next_state_1_3_0_.m12/SLICE_394/server_power_control/next_state_1_3_0_.m12/GATE_H0 )
    , 
    .D1(\server_power_control/next_state_1_3_0_.m12/SLICE_394/server_power_control/next_state_1_3_0_.m12/SLICE_394_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40273 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h10BA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40274 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_next_state_1_3_0__m34_SLICE_395 ( input C1, B1, A1, 
    D0, C0, B0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/next_state_1_3_0_.m34/SLICE_395/server_power_control/next_state_1_3_0_.m34/SLICE_395_K1_H1 
         , 
         \server_power_control/next_state_1_3_0_.m34/SLICE_395/server_power_control/next_state_1_3_0_.m34/GATE_H0 
         ;

  lut40275 \server_power_control/next_state_1_3_0_.m34/SLICE_395_K1 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), 
    .Z(\server_power_control/next_state_1_3_0_.m34/SLICE_395/server_power_control/next_state_1_3_0_.m34/SLICE_395_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40276 \server_power_control/next_state_1_3_0_.m34/GATE ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), 
    .Z(\server_power_control/next_state_1_3_0_.m34/SLICE_395/server_power_control/next_state_1_3_0_.m34/GATE_H0 )
    );
  selmux2 \server_power_control/next_state_1_3_0_.m34/SLICE_395_K0K1MUX ( 
    .D0(\server_power_control/next_state_1_3_0_.m34/SLICE_395/server_power_control/next_state_1_3_0_.m34/GATE_H0 )
    , 
    .D1(\server_power_control/next_state_1_3_0_.m34/SLICE_395/server_power_control/next_state_1_3_0_.m34/SLICE_395_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40275 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40276 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_next_state_1_3_0__m21_SLICE_396 ( input D1, C1, A1, 
    C0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/next_state_1_3_0_.m21/SLICE_396/server_power_control/next_state_1_3_0_.m21/SLICE_396_K1_H1 
         , 
         \server_power_control/next_state_1_3_0_.m21/SLICE_396/server_power_control/next_state_1_3_0_.m21/GATE_H0 
         ;

  lut40277 \server_power_control/next_state_1_3_0_.m21/SLICE_396_K1 ( .A(A1), 
    .B(GNDI), .C(C1), .D(D1), 
    .Z(\server_power_control/next_state_1_3_0_.m21/SLICE_396/server_power_control/next_state_1_3_0_.m21/SLICE_396_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40278 \server_power_control/next_state_1_3_0_.m21/GATE ( .A(A0), .B(GNDI), 
    .C(C0), .D(GNDI), 
    .Z(\server_power_control/next_state_1_3_0_.m21/SLICE_396/server_power_control/next_state_1_3_0_.m21/GATE_H0 )
    );
  selmux2 \server_power_control/next_state_1_3_0_.m21/SLICE_396_K0K1MUX ( 
    .D0(\server_power_control/next_state_1_3_0_.m21/SLICE_396/server_power_control/next_state_1_3_0_.m21/GATE_H0 )
    , 
    .D1(\server_power_control/next_state_1_3_0_.m21/SLICE_396/server_power_control/next_state_1_3_0_.m21/SLICE_396_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40277 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40278 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F5F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_data_out_r_20_13_i_m2_5__SLICE_397 ( input C1, B1, 
    A1, D0, C0, B0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397/server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397_K1_H1 
         , 
         \server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397/server_power_control/data_out_r_20_13_i_m2[5]/GATE_H0 
         ;

  lut40259 \server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397/server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40237 \server_power_control/data_out_r_20_13_i_m2[5]/GATE ( .A(GNDI), 
    .B(B0), .C(C0), .D(D0), 
    .Z(\server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397/server_power_control/data_out_r_20_13_i_m2[5]/GATE_H0 )
    );
  selmux2 \server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397_K0K1MUX ( 
    .D0(\server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397/server_power_control/data_out_r_20_13_i_m2[5]/GATE_H0 )
    , 
    .D1(\server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397/server_power_control/data_out_r_20_13_i_m2[5]/SLICE_397_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_data_out_r_20_11_i_m2_5__SLICE_398 ( input D1, C1, 
    B1, D0, C0, B0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398/server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398_K1_H1 
         , 
         \server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398/server_power_control/data_out_r_20_11_i_m2[5]/GATE_H0 
         ;

  lut40257 \server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398_K1 ( 
    .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398/server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40261 \server_power_control/data_out_r_20_11_i_m2[5]/GATE ( .A(GNDI), 
    .B(B0), .C(C0), .D(D0), 
    .Z(\server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398/server_power_control/data_out_r_20_11_i_m2[5]/GATE_H0 )
    );
  selmux2 \server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398_K0K1MUX ( 
    .D0(\server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398/server_power_control/data_out_r_20_11_i_m2[5]/GATE_H0 )
    , 
    .D1(\server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398/server_power_control/data_out_r_20_11_i_m2[5]/SLICE_398_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_data_out_r_20_14_i_m2_5__SLICE_399 ( input C1, B1, 
    A1, D0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399/server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399_K1_H1 
         , 
         \server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399/server_power_control/data_out_r_20_14_i_m2[5]/GATE_H0 
         ;

  lut40279 \server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399/server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40256 \server_power_control/data_out_r_20_14_i_m2[5]/GATE ( .A(A0), 
    .B(B0), .C(GNDI), .D(D0), 
    .Z(\server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399/server_power_control/data_out_r_20_14_i_m2[5]/GATE_H0 )
    );
  selmux2 \server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399_K0K1MUX ( 
    .D0(\server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399/server_power_control/data_out_r_20_14_i_m2[5]/GATE_H0 )
    , 
    .D1(\server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399/server_power_control/data_out_r_20_14_i_m2[5]/SLICE_399_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40279 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB8B8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_current_state_ns_i_0_m3_3__SLICE_400 ( input D1, C1, 
    D0, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400/i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400_K1_H1 
         , 
         \i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400/i2c0_slave_inst0/current_state_ns_i_0_m3[3]/GATE_H0 
         ;

  lut40280 \i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400_K1 ( 
    .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(\i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400/i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40281 \i2c0_slave_inst0/current_state_ns_i_0_m3[3]/GATE ( .A(A0), .B(B0), 
    .C(C0), .D(D0), 
    .Z(\i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400/i2c0_slave_inst0/current_state_ns_i_0_m3[3]/GATE_H0 )
    );
  selmux2 \i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400_K0K1MUX ( 
    .D0(\i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400/i2c0_slave_inst0/current_state_ns_i_0_m3[3]/GATE_H0 )
    , 
    .D1(\i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400/i2c0_slave_inst0/current_state_ns_i_0_m3[3]/SLICE_400_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40280 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40281 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_current_state_ns_i_m5_0_m3_6__SLICE_401 ( input D1, C1, 
    B1, A1, D0, C0, A0, M0, output OFX0 );
  wire   
         \i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401/i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401_K1_H1 
         , GNDI, 
         \i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401/i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/GATE_H0 
         ;

  lut40282 \i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401_K1 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401/i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401_K1_H1 )
    );
  lut40283 \i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/GATE ( .A(A0), 
    .B(GNDI), .C(C0), .D(D0), 
    .Z(\i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401/i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/GATE_H0 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401_K0K1MUX ( 
    .D0(\i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401/i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/GATE_H0 )
    , 
    .D1(\i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401/i2c0_slave_inst0/current_state_ns_i_m5_0_m3[6]/SLICE_401_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40282 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40283 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_sol_inst_sys_uart_rxd3_6_3_i_m2_SLICE_402 ( input C1, B1, A1, C0, 
    B0, A0, M0, output OFX0 );
  wire   GNDI, 
         \uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402/uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402_K1_H1 
         , 
         \uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402/uart_sol_inst/sys_uart_rxd3_6_3_i_m2/GATE_H0 
         ;

  lut40284 \uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402_K1 ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), 
    .Z(\uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402/uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40251 \uart_sol_inst/sys_uart_rxd3_6_3_i_m2/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), 
    .Z(\uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402/uart_sol_inst/sys_uart_rxd3_6_3_i_m2/GATE_H0 )
    );
  selmux2 \uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402_K0K1MUX ( 
    .D0(\uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402/uart_sol_inst/sys_uart_rxd3_6_3_i_m2/GATE_H0 )
    , 
    .D1(\uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402/uart_sol_inst/sys_uart_rxd3_6_3_i_m2/SLICE_402_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40284 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module data_out_r_20_17_6__SLICE_403 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M0, output OFX0 );
  wire   \data_out_r_20_17[6]/SLICE_403/data_out_r_20_17[6]/SLICE_403_K1_H1 , 
         \data_out_r_20_17[6]/SLICE_403/data_out_r_20_17[6]/GATE_H0 ;

  lut40285 \data_out_r_20_17[6]/SLICE_403_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\data_out_r_20_17[6]/SLICE_403/data_out_r_20_17[6]/SLICE_403_K1_H1 ));
  lut40243 \data_out_r_20_17[6]/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\data_out_r_20_17[6]/SLICE_403/data_out_r_20_17[6]/GATE_H0 ));
  selmux2 \data_out_r_20_17[6]/SLICE_403_K0K1MUX ( 
    .D0(\data_out_r_20_17[6]/SLICE_403/data_out_r_20_17[6]/GATE_H0 ), 
    .D1(\data_out_r_20_17[6]/SLICE_403/data_out_r_20_17[6]/SLICE_403_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40285 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8C80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module data_out_r_20_11_3__SLICE_404 ( input C1, B1, A1, D0, C0, B0, M1, M0, 
    FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \data_out_r_20_11[3]/SLICE_404/data_out_r_20_11[3]/SLICE_404_K1_H1 , 
         \data_out_r_20_11[3]/SLICE_404/data_out_r_20_11[3]/GATE_H0 ;

  lut40245 \data_out_r_20_11[3]/SLICE_404_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\data_out_r_20_11[3]/SLICE_404/data_out_r_20_11[3]/SLICE_404_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40244 \data_out_r_20_11[3]/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\data_out_r_20_11[3]/SLICE_404/data_out_r_20_11[3]/GATE_H0 ));
  selmux2 \data_out_r_20_11[3]/SLICE_404_K0K1MUX ( 
    .D0(\data_out_r_20_11[3]/SLICE_404/data_out_r_20_11[3]/GATE_H0 ), 
    .D1(\data_out_r_20_11[3]/SLICE_404/data_out_r_20_11[3]/SLICE_404_K1_H1 ), 
    .SD(M0), .Z(OFX0));
  selmux2 \data_out_r_20_11[3]/SLICE_404_FXMUX ( .D0(FXA), .D1(FXB), .SD(M1), 
    .Z(OFX1));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module data_out_r_20_11_6__SLICE_405 ( input D1, C1, B1, C0, B0, A0, M1, M0, 
    FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \data_out_r_20_11[6]/SLICE_405/data_out_r_20_11[6]/SLICE_405_K1_H1 , 
         \data_out_r_20_11[6]/SLICE_405/data_out_r_20_11[6]/GATE_H0 ;

  lut40244 \data_out_r_20_11[6]/SLICE_405_K1 ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\data_out_r_20_11[6]/SLICE_405/data_out_r_20_11[6]/SLICE_405_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40259 \data_out_r_20_11[6]/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\data_out_r_20_11[6]/SLICE_405/data_out_r_20_11[6]/GATE_H0 ));
  selmux2 \data_out_r_20_11[6]/SLICE_405_K0K1MUX ( 
    .D0(\data_out_r_20_11[6]/SLICE_405/data_out_r_20_11[6]/GATE_H0 ), 
    .D1(\data_out_r_20_11[6]/SLICE_405/data_out_r_20_11[6]/SLICE_405_K1_H1 ), 
    .SD(M0), .Z(OFX0));
  selmux2 \data_out_r_20_11[6]/SLICE_405_FXMUX ( .D0(FXA), .D1(FXB), .SD(M1), 
    .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module data_out_r_20_13_3__SLICE_406 ( input D1, C1, B1, D0, C0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \data_out_r_20_13[3]/SLICE_406/data_out_r_20_13[3]/SLICE_406_K1_H1 , 
         \data_out_r_20_13[3]/SLICE_406/data_out_r_20_13[3]/GATE_H0 ;

  lut40247 \data_out_r_20_13[3]/SLICE_406_K1 ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\data_out_r_20_13[3]/SLICE_406/data_out_r_20_13[3]/SLICE_406_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40286 \data_out_r_20_13[3]/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\data_out_r_20_13[3]/SLICE_406/data_out_r_20_13[3]/GATE_H0 ));
  selmux2 \data_out_r_20_13[3]/SLICE_406_K0K1MUX ( 
    .D0(\data_out_r_20_13[3]/SLICE_406/data_out_r_20_13[3]/GATE_H0 ), 
    .D1(\data_out_r_20_13[3]/SLICE_406/data_out_r_20_13[3]/SLICE_406_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40286 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module data_out_r_20_13_6__SLICE_407 ( input D1, C1, B1, D0, B0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \data_out_r_20_13[6]/SLICE_407/data_out_r_20_13[6]/SLICE_407_K1_H1 , 
         \data_out_r_20_13[6]/SLICE_407/data_out_r_20_13[6]/GATE_H0 ;

  lut40287 \data_out_r_20_13[6]/SLICE_407_K1 ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\data_out_r_20_13[6]/SLICE_407/data_out_r_20_13[6]/SLICE_407_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40256 \data_out_r_20_13[6]/GATE ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(\data_out_r_20_13[6]/SLICE_407/data_out_r_20_13[6]/GATE_H0 ));
  selmux2 \data_out_r_20_13[6]/SLICE_407_K0K1MUX ( 
    .D0(\data_out_r_20_13[6]/SLICE_407/data_out_r_20_13[6]/GATE_H0 ), 
    .D1(\data_out_r_20_13[6]/SLICE_407/data_out_r_20_13[6]/SLICE_407_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40287 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module data_out_r_20_14_3__SLICE_408 ( input D1, C1, B1, C0, B0, A0, M1, M0, 
    FXB, FXA, output OFX0, OFX1 );
  wire   GNDI, 
         \data_out_r_20_14[3]/SLICE_408/data_out_r_20_14[3]/SLICE_408_K1_H1 , 
         \data_out_r_20_14[3]/SLICE_408/data_out_r_20_14[3]/GATE_H0 ;

  lut40288 \data_out_r_20_14[3]/SLICE_408_K1 ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\data_out_r_20_14[3]/SLICE_408/data_out_r_20_14[3]/SLICE_408_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40252 \data_out_r_20_14[3]/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\data_out_r_20_14[3]/SLICE_408/data_out_r_20_14[3]/GATE_H0 ));
  selmux2 \data_out_r_20_14[3]/SLICE_408_K0K1MUX ( 
    .D0(\data_out_r_20_14[3]/SLICE_408/data_out_r_20_14[3]/GATE_H0 ), 
    .D1(\data_out_r_20_14[3]/SLICE_408/data_out_r_20_14[3]/SLICE_408_K1_H1 ), 
    .SD(M0), .Z(OFX0));
  selmux2 \data_out_r_20_14[3]/SLICE_408_FXMUX ( .D0(FXA), .D1(FXB), .SD(M1), 
    .Z(OFX1));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40288 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_409 ( input D1, C1, 
    B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40289 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m6 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40290 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m8 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40289 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0EE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40290 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h53F3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_410 ( input D1, C1, 
    B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40291 
    \server_power_control/power_signal_detect_inst/is_pwr_on_off_2_sqmuxa ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40292 \server_power_control/power_signal_detect_inst/is_pwr_on_off_RNO_0 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40291 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40292 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1021) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_411 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40293 \i2c0_slave_inst0/sda_out_reg_RNO ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40294 \i2c0_slave_inst0/start_next_bit_1d_RNIFM231 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/slave_addr_out[5] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/slave_addr_out[4] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40293 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC8C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40294 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7F3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_412 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40295 \eeprom_i2c_inst/e2prom_i2c/bit_cnt_RNO_0[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40296 \eeprom_i2c_inst/e2prom_i2c/bit_cnt_5_i_a2_1_1[1] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e2prom_byte_addr[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e2prom_byte_addr[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40295 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3032) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40296 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_413 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40297 \eeprom_i2c_inst/e2prom_i2c/un26_i_a4[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40298 \eeprom_i2c_inst/e2prom_i2c/un31_0 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40297 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40298 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h336C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_414 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40299 \eeprom_i2c_inst/e2prom_i2c/un1_current_state_15_1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40300 \eeprom_i2c_inst/e2prom_i2c/un1_current_state_15 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/scl_in_clean ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40299 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40300 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCECC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_415 ( input C1, B1, A1, D0, C0, B0, A0, 
    M0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40301 \eeprom_i2c_inst/e2prom_i2c/start_stretch_en_RNIT2M21_0 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40302 \eeprom_i2c_inst/e2prom_i2c/un1_scl_out_en20_4_i_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/start_next_bit_1d ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40301 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40302 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_416 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40303 \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa_1_3 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40304 \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa_1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40303 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40304 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_417 ( input D1, C1, B1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40305 \eeprom_i2c_inst/e2prom_i2c/un1_timeout_cnt_en17_i_a2_0 ( .A(GNDI), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40306 \eeprom_i2c_inst/e2prom_i2c/un1_timeout_cnt_en17_i_0 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40305 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40306 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_418 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40307 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_a2_0 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40308 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/rd_data[6] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40307 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC480) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40308 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF4F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_419 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40309 \eeprom_i2c_inst/e2prom_i2c/sda_out_2_sqmuxa_1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40109 \eeprom_i2c_inst/e2prom_i2c/un1_sda_out_0_sqmuxa_1_2 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40309 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_420 ( input D1, C1, B1, A1, D0, C0, B0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40310 \eeprom_i2c_inst/e2prom_i2c/bit_cnt_RNO_0[2] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40311 \eeprom_i2c_inst/e2prom_i2c/bit_cnt_5_i_o4[2] ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e2prom_data_wr[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e2prom_data_wr[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40310 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0415) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40311 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_421 ( input D1, C1, B1, A1, D0, C0, A0, 
    M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40312 \eeprom_i2c_inst/e2prom_i2c/un1_scl_in_clean7 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40313 \eeprom_i2c_inst/e2prom_i2c/un1_scl_in_clean7_1 ( .A(A0), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_en ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40312 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0810) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40313 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F05) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_422 ( input D1, C1, B1, A1, D0, C0, B0, 
    output F0, F1 );
  wire   GNDI;

  lut40314 \eeprom_i2c_inst/e2prom_i2c/un1_sda_in_clean8 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40315 \eeprom_i2c_inst/e2prom_i2c/un1_sda_in_clean8_1 ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40314 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0810) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40315 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h30F3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_423 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40316 \usb_reset_ctrl_inst/next_state_1_i_0_0_m2[0] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40317 \usb_reset_ctrl_inst/next_state_1_i_0_0_0[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40316 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBB1B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40317 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7350) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_424 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40318 \server_power_control/data_out_r_20_0_a3_0_0[5] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40319 \usb_reset_ctrl_inst/data_out_r_20_sn_m26_i ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40318 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0E04) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40319 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_425 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40320 \server_power_control/cpu_pwr_control/un1_next_state42_i_o2 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40321 
    \server_power_control/cpu_pwr_control/un1_next_state42_i_o2_RNIFOF21 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \riser_reset[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \riser_reset[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40320 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40321 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5450) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_426 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40322 \server_power_control/cpu_pwr_control/un1_next_state40_5_i_0_0 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40323 \server_power_control/cpu_pwr_control/un1_next_state40_5_i_0 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \riser_reset[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \riser_reset[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40322 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40323 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_427 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40324 \server_power_control/next_state_1_3_0_.m15 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40325 \server_power_control/cpu_pwr_control/cpua_pwrok ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/wr_data[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/wr_data[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40324 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40325 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_428 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40326 \server_power_control/reboot_cnt_2_sqmuxa ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40327 \server_power_control/host_pwr_off_RNO_0 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40326 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8A00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40327 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5554) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_429 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40328 \server_power_control/efuse_done13_RNIQIFQ ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40329 \server_power_control/psu_on_off26_RNIT0IF1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40328 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40329 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C0E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_430 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40330 \server_power_control/data_out_r_20_0_1[5] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40331 \server_power_control/data_out_r_20_0_0[5] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/current_state[1] ( 
    .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/cpu_pwr_control/current_state[0] ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40330 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF4F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40331 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD850) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_431 ( input D1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40332 \server_power_control/cpu_off_done_0_sqmuxa_1 ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40333 \server_power_control/un1_next_state105_10_2 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40332 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40333 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_432 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40334 \server_power_control/next_state105 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40335 \server_power_control/un1_psu_on_off44_RNINA771 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40334 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40335 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_433 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40336 \i2c0_slave_inst0/next_state_i_a8[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40337 \i2c0_slave_inst0/next_state_i_a8_RNO[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40336 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40337 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_434 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40338 \i2c0_slave_inst0/next_state_i_2[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40339 \i2c0_slave_inst0/un1_stretch_en_2_0 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/start_next_bit_1d ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \i2c0_slave_inst0/sda_in_dly[5] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40338 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40339 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h10EE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_435 ( input C1, B1, A1, D0, C0, B0, A0, M0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40340 \i2c0_slave_inst0/sda_out_reg_13_iv_5 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40341 \i2c0_slave_inst0/sda_out_reg_13_iv_2 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/rcv_bit[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40340 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40341 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF08) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_436 ( input C1, B1, A1, D0, C0, B0, A0, M0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40342 \i2c0_slave_inst0/sda_out_reg_13_iv_3_RNO ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40343 \i2c0_slave_inst0/sda_out_reg_13_iv_3 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \i2c0_slave_inst0/scl_in_clean ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40342 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40343 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDCCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_437 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40344 \i2c0_slave_inst0/un1_scl_in_clean8 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40345 \i2c0_slave_inst0/un1_scl_in_clean8_1 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \i2c0_slave_inst0/sda_in_clean_dly[0] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \i2c0_slave_inst0/scl_in_dly[5] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40344 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0810) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40345 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4D4D) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_438 ( input D1, C1, B1, A1, D0, C0, A0, M1, M0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40346 \i2c0_slave_inst0/un1_sda_in_clean8 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40313 \i2c0_slave_inst0/un1_sda_in_clean8_1 ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \i2c0_slave_inst0/sda_in_dly[2] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \i2c0_slave_inst0/sda_in_dly[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40346 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0810) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_439 ( input D1, C1, A1, D0, C0, B0, A0, 
    M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40347 \eeprom_i2c_inst/e2prom_i2c/un1_current_state_7 ( .A(A1), .B(GNDI), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40348 \eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[5] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/rd_data[2] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40347 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40348 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_440 ( input D1, B1, A1, D0, C0, B0, A0, 
    M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40349 \eeprom_i2c_inst/e2prom_i2c/rd_data_vld8_0_o2 ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40090 \eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/rd_data[0] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40349 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_441 ( input D1, C1, B1, A1, D0, C0, A0, 
    M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40350 \eeprom_i2c_inst/e2prom_i2c/state_cnt_RNIFR861[6] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40351 \eeprom_i2c_inst/e2prom_i2c/scl_cnt_en_RNIICBR1 ( .A(A0), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/rd_data[5] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40350 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFBF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40351 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_442 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40352 \eeprom_i2c_inst/e2prom_i2c/un26_i_a4[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40353 \eeprom_i2c_inst/e2prom_i2c/un31_NE_1 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40352 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40353 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_443 ( input C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40354 \eeprom_i2c_inst/e2prom_i2c/un1_current_state_6_i_a4 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40355 \eeprom_i2c_inst/e2prom_i2c/un1_scl_out_0_sqmuxa_2_RNIS40A1 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/sda_in_dly[3] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/sda_in_dly[2] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40354 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40355 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00FE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_444 ( input D1, C1, B1, A1, D0, C0, 
    output F0, F1 );
  wire   GNDI;

  lut40356 \eeprom_i2c_inst/e2prom_i2c/next_state_0[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40071 \eeprom_i2c_inst/e2prom_i2c/next_state_1_0[3] ( .A(GNDI), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40356 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_445 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40357 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_a2[4] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40358 \eeprom_i2c_inst/e2prom_i2c/un31_2 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40357 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40358 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h336C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_446 ( input D1, C1, B1, A1, D0, B0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40359 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_a4_0_1[6] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40360 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_a4_0[7] ( .A(GNDI), 
    .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e2prom_dev_addr[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e2prom_dev_addr[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40359 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40360 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_447 ( input D1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40361 \eeprom_i2c_inst/e2prom_i2c/next_state_a2_0[3] ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40362 \eeprom_i2c_inst/e2prom_i2c/next_state_a4_1[3] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40361 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0011) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40362 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h020A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_448 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40363 \eeprom_i2c_inst/e2prom_i2c/next_state_a2_1[3] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40364 \eeprom_i2c_inst/e2prom_i2c/next_state_a4[3] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40363 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40364 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_SLICE_449 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40365 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_i_o2_0[9] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40366 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_i_a4[9] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/data_read_out[1] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/data_read_out[0] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40365 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFED) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40366 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h002A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_SLICE_450 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40367 \eeprom_i2c_inst/e2prom_i2c/next_state_1[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40368 \eeprom_i2c_inst/e2prom_i2c/next_state[1] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/data_read_out[5] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \eeprom_i2c_inst/data_read_out[4] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40367 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40368 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFBA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_451 ( input D1, C1, B1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40369 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_a4_0_1[4] ( .A(GNDI), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40370 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_a4_0[4] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e2prom_dev_addr[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e2prom_dev_addr[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40369 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40370 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_452 ( input D1, C1, B1, A1, C0, B0, A0, 
    M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40371 \eeprom_i2c_inst/e2prom_i2c/scl_rising_RNI7K1A1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40372 \eeprom_i2c_inst/e2prom_i2c/un1_current_state_6_i_a4_RNICJB42 ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/sda_in_clean ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40371 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40372 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB3B3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_453 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40373 \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_RNIP7CE1[2] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40374 \eeprom_i2c_inst/e2prom_i2c/timeout_cnt_en_RNISQ092 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/scl_cnt_en ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40373 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40374 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_454 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, output F0, F1 );

  lut40375 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_i_o2[5] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40376 \eeprom_i2c_inst/e2prom_i2c/next_state_3[1] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40375 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40376 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_455 ( input D1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40377 \eeprom_i2c_inst/e2prom_i2c/un1_sda_out30 ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40378 \eeprom_i2c_inst/e2prom_i2c/un1_scl_out_0_sqmuxa_2 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/sda_in_dly[1] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/scl_in_dly[5] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40377 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAABB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40378 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFECC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_456 ( input D1, C1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40379 \eeprom_i2c_inst/e2prom_i2c/det_delay_cnt_RNIOA98[2] ( .A(A1), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40090 \eeprom_i2c_inst/e2prom_i2c/un1_scl_out_en20_4_i_a3 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40379 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_SLICE_457 ( input D1, C1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40380 \eeprom_i2c_inst/e2prom_i2c/next_state_a4_1[0] ( .A(A1), .B(GNDI), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40381 \eeprom_i2c_inst/e2prom_i2c/next_state_1[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/data_read_out[7] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \eeprom_i2c_inst/data_read_out[6] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40380 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40381 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFDC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_458 ( input D1, B1, A1, D0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40382 \eeprom_i2c_inst/e2prom_i2c/bit_mux_0[0] ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40383 \eeprom_i2c_inst/e2prom_i2c/bit_mux[0] ( .A(A0), .B(B0), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre \e2prom_data_wr[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e2prom_data_wr[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40382 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEE22) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40383 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_459 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40384 \eeprom_i2c_inst/e2prom_i2c/before_state_en_6[0] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40385 \eeprom_i2c_inst/e2prom_i2c/before_state_en_8[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e2prom_byte_addr[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e2prom_byte_addr[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40384 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40385 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_460 ( input C1, B1, D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40386 \eeprom_i2c_inst/e2prom_i2c/next_state_o2[1] ( .A(GNDI), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40387 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_i_1[2] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 e2prom_is_rw( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40386 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40387 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAABF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_461 ( input C1, A1, D0, C0, B0, A0, M1, 
    M0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40210 \eeprom_i2c_inst/e2prom_i2c/sda_out28 ( .A(A1), .B(GNDI), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40388 \eeprom_i2c_inst/e2prom_i2c/un1_scl_out_0_sqmuxa_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/scl_in_dly[4] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/scl_in_dly[3] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40388 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7350) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_462 ( input D1, C1, B1, D0, C0, B0, 
    output F0, F1 );
  wire   GNDI;

  lut40389 \eeprom_i2c_inst/e2prom_i2c/sda_out_12_iv_i ( .A(GNDI), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40390 \eeprom_i2c_inst/e2prom_i2c/un30_i_o2 ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40389 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00CF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40390 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_463 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40391 \eeprom_i2c_inst/e2prom_i2c/un1_current_state_15_1_1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40392 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_a4_1_0[8] ( .A(A0), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e2prom_dev_addr[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e2prom_dev_addr[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40391 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h02FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40392 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module bmc_reset_ctrl_inst_SLICE_464 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40141 \bmc_reset_ctrl_inst/bmc_prst9 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40393 \bmc_reset_ctrl_inst/bmc_prst9_RNISO231 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40393 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h54FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module bmc_reset_ctrl_inst_SLICE_465 ( input D1, C1, B1, A1, D0, C0, output F0, 
    F1 );
  wire   GNDI;

  lut40325 \bmc_reset_ctrl_inst/bmc_srst5 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40394 \bmc_reset_ctrl_inst/bmc_srst6 ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40394 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_466 ( input D1, C1, B1, A1, D0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40395 \usb_reset_ctrl_inst/reset_control_a_1_sqmuxa_0_a3 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40396 \usb_reset_ctrl_inst/reset_control_a_1_sqmuxa_0_a3_RNO ( .A(A0), 
    .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40395 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40396 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0022) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_467 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40367 \usb_reset_ctrl_inst/data_out_r_20_sn_m36_i ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40397 \usb_reset_ctrl_inst/data_out_r_20_sn_m36_i_m2 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40397 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_468 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40398 \usb_reset_ctrl_inst/test_register_1_sqmuxa_0_a3 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40399 \usb_reset_ctrl_inst/power_control_0_sqmuxa_0_a2_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40398 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40399 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_469 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40400 \usb_reset_ctrl_inst/e2prom_byte_addr_1_sqmuxa_0_a2 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40401 \usb_reset_ctrl_inst/e2prom_byte_addr_1_sqmuxa_0_a2_0_RNID74V ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40400 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40401 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_470 ( input D1, C1, B1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40402 \usb_reset_ctrl_inst/e2prom_data_wr_1_sqmuxa_0_a2 ( .A(GNDI), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40403 \usb_reset_ctrl_inst/e2prom_data_wr_1_sqmuxa_0_a2_RNIPLCP ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40402 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40403 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_471 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40404 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_17 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40405 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40404 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40405 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_472 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40406 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_0 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40407 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40406 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBAAF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40407 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF8F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_473 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40408 \usb_reset_ctrl_inst/start_e2prom_2_0_a3_2 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40409 \usb_reset_ctrl_inst/reset_control_b_1_sqmuxa_0_a3 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40408 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40409 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_474 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40410 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_1_4_2 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40304 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_3_tz ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40410 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_475 ( input D1, C1, B1, A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40411 \por/un1_reset ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40412 \usb_reset_ctrl_inst/riser1_reset ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40411 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40412 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_476 ( input D1, C1, B1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40413 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_20 ( .A(GNDI), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40191 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40413 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_477 ( input D1, C1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40414 \usb_reset_ctrl_inst/riser_reset_1_sqmuxa_2 ( .A(A1), .B(GNDI), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40200 \usb_reset_ctrl_inst/test_interrupt_1_sqmuxa_0_a3 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40414 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_478 ( input D1, C1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40192 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_15 ( .A(GNDI), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40195 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module usb_reset_ctrl_inst_SLICE_479 ( input D1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40214 \usb_reset_ctrl_inst/un1_next_state42_0_0_a2 ( .A(A1), .B(GNDI), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40415 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40415 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_480 ( input D1, C1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40416 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_11_2 ( .A(A1), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40417 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_2 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40416 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40417 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4A40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_481 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40418 \usb_reset_ctrl_inst/e2prom_byte_addr_1_sqmuxa_0_a2_0 ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40411 \usb_reset_ctrl_inst/e2prom_byte_addr_1_sqmuxa_0_a3 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40418 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0202) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_482 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40419 \usb_reset_ctrl_inst/riser_reset_1_sqmuxa_1_0 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40420 \usb_reset_ctrl_inst/riser_reset_1_sqmuxa ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40419 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40420 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_483 ( input C1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40210 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_22 ( .A(A1), 
    .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40421 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_7 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40421 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_484 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40205 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_4 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40422 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_0_6 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40422 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_485 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40423 \server_power_control/data_out_r_20_sn_m14_0_o4_i_a2 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40424 \usb_reset_ctrl_inst/data_out_r_20_sn_m26_i_1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40423 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40424 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB3A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_486 ( input D1, C1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40425 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_1_1 ( .A(GNDI), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40188 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_4 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40425 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_487 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40426 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_3 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40427 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_3_5 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40426 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40427 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_488 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40428 \usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_9[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40359 \usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_7[1] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40428 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_489 ( input B1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40429 \usb_reset_ctrl_inst/data_out_r_20_sn_m26_i_a2_0_1_0_a2 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40430 \usb_reset_ctrl_inst/data_out_r_20_sn_m36_i_2 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40429 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40430 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_490 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40431 \usb_reset_ctrl_inst/usb_prst_RNO_0 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40432 \usb_reset_ctrl_inst/usb_prst_RNO_1 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40431 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40432 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_491 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40433 \server_power_control/data_out_r_20_sn_m11_0_a2_0_a2 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40434 \usb_reset_ctrl_inst/data_out_r_20_sn_m20_i_1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40433 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40434 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_switch_reset_control_SLICE_492 ( input D1, B1, D0, 
    C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40023 \server_power_control/switch_reset_control/next_state13_RNIK88M ( 
    .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40435 
    \server_power_control/switch_reset_control/current_state_RNIC55E1[2] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40435 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000D) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_switch_reset_control_SLICE_493 ( input D1, C1, B1, 
    A1, D0, C0, B0, A0, output F0, F1 );

  lut40436 \server_power_control/switch_reset_control/next_state13_5 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40437 \server_power_control/switch_reset_control/next_state13 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40436 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40437 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_494 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40438 \server_power_control/cpu_pwr_control/data_out_r_20_18[0] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40439 \server_power_control/cpu_pwr_control/data_out_r_20_18_RNO[0] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \power_control[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \power_control[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40438 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD850) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40439 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF077) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_495 ( input D1, C1, B1, A1, D0, C0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40440 \server_power_control/cpu_pwr_control/data_out_r_20_18[4] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40441 \server_power_control/cpu_pwr_control/data_out_r_20_18_RNO[4] ( 
    .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \reset_control_a[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \reset_control_a[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40440 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40441 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5505) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_496 ( input D1, C1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40442 \server_power_control/cpu_pwr_control/data_out_r_20_9[4] ( .A(A1), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40443 \server_power_control/cpu_pwr_control/data_out_r_20_19_bm_RNO[4] ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \reset_control_a[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \reset_control_a[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40442 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40443 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEC20) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_497 ( input D1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40444 \server_power_control/cpu_pwr_control/un1_next_state44_0_a2 ( 
    .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40445 \server_power_control/cpu_pwr_control/un1_next_state42_i_0 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \riser_reset[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \riser_reset[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40444 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0055) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40445 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_498 ( input D1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40446 \server_power_control/cpu_pwr_control/bmc_gpio51 ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40447 \server_power_control/cpu_pwr_control/bmc_pwrgd ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/wr_data[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c0_slave_inst0/wr_data[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40446 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40447 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_499 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40448 
    \server_power_control/cpu_pwr_control/un1_current_state_4_i_o2_RNIIFQH1 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40449 \server_power_control/cpu_pwr_control/current_state_RNI7TN92_0[1] 
    ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \power_control[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \power_control[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40448 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40449 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2626) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_500 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40450 \server_power_control/cpu_pwr_control/un1_current_state_4_i_a2_1_1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40451 \server_power_control/cpu_pwr_control/un1_current_state_4_i_0 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \reset_control_b[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \reset_control_b[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40450 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40451 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_501 ( input C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40452 \server_power_control/cpu_pwr_control/un1_current_state_4_i_a2_6_0 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40453 \server_power_control/cpu_pwr_control/un1_current_state_4_i_a2_6 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \reset_control_b[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \reset_control_b[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40452 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1212) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40453 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_502 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40411 \server_power_control/cpu_pwr_control/cpub_pwrok_6 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40373 \server_power_control/cpu_pwr_control/cpub_pwrok_8 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \power_control[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \power_control[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_503 ( input D1, A1, D0, C0, B0, A0, M1, M0, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40454 \server_power_control/cpu_pwr_control/cpua_pwrok_3 ( .A(A1), 
    .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40373 \server_power_control/cpu_pwr_control/cpua_pwrok_6 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0145 \por/rst_btn_dly[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0145 \por/rst_btn_dly[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40454 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_504 ( 
    input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40455 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/next_state24_0_a2 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40456 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec_pre_RNICNHK 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40455 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40456 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_505 ( 
    input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40204 \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40457 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst_pre_RNI22M91 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40457 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFDE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_506 ( input D1, C1, 
    B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40458 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m4 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40459 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m4_0 ( 
    .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40458 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5070) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40459 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0005) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_507 ( input C1, B1, 
    D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40024 
    \server_power_control/power_signal_detect_inst/un1_nomral_300mslto15_2 ( 
    .A(GNDI), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40460 
    \server_power_control/power_signal_detect_inst/un1_nomral_300mslto15_RNO 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40460 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_508 ( input D1, A1, 
    D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40454 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m1 ( 
    .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40461 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m30 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40461 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0D) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_509 ( input D1, C1, 
    A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40462 
    \server_power_control/power_signal_detect_inst/un1_nomral_300mslto6_i_o3 
    ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40463 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m5 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40462 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40463 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD515) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_510 ( input D1, C1, 
    B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40464 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m20 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40465 
    \server_power_control/power_signal_detect_inst/un1_force_15s_1lto15 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40464 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3DF5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40465 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_511 ( input D1, C1, 
    B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40466 
    \server_power_control/power_signal_detect_inst/debounce_cnt_RNIE8SI[13] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40467 
    \server_power_control/power_signal_detect_inst/un1_force_15slto12_0_RNIBUUH1 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40466 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3332) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40467 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_512 ( input C1, A1, 
    D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40468 
    \server_power_control/power_signal_detect_inst/current_state_RNIK0EJ[2] ( 
    .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40469 
    \server_power_control/power_signal_detect_inst/is_pwr_force_off_RNO_0 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40468 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40469 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0105) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_513 ( input D1, C1, 
    B1, A1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40470 
    \server_power_control/power_signal_detect_inst/un1_nomral_300mslto15 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40471 
    \server_power_control/power_signal_detect_inst/next_state_1_2_0_.m15 ( 
    .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40470 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40471 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_514 ( input D1, A1, 
    D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40472 
    \server_power_control/power_signal_detect_inst/un1_current_state_4_0 ( 
    .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40473 
    \server_power_control/power_signal_detect_inst/un1_current_state_4_0_RNIKJ511 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40472 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF55) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40473 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2123) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_515 ( input D1, B1, 
    D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40474 
    \server_power_control/power_signal_detect_inst/un1_next_state64_3_0 ( 
    .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40475 
    \server_power_control/power_signal_detect_inst/un1_next_state64_3_0_RNIP8A71 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40474 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF33) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40475 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3043) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_516 ( input D1, C1, 
    A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40476 
    \server_power_control/power_signal_detect_inst/un1_force_15slto10_1 ( 
    .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40477 \server_power_control/power_signal_detect_inst/un1_force_15slto10 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40476 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40477 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2A0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_517 ( input D1, C1, 
    B1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40478 
    \server_power_control/power_signal_detect_inst/un1_low_time_cntlto6_0_o3 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40479 
    \server_power_control/power_signal_detect_inst/un1_low_time_cntlto15 ( 
    .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40478 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5557) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40479 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_518 ( input C1, B1, 
    A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40140 
    \server_power_control/power_signal_detect_inst/un1_force_15s_1lto10_1 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40480 
    \server_power_control/power_signal_detect_inst/un1_force_15s_1lto10 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40480 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h30B0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_519 ( input D1, B1, 
    D0, C0, B0, A0, M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40481 
    \server_power_control/power_signal_detect_inst/debounce_cnt_0_sqmuxa_0 ( 
    .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40482 
    \server_power_control/power_signal_detect_inst/debounce_cnt_0_sqmuxa_0_RNI19781 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/power_signal_detect_inst/current_state[1] 
    ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \server_power_control/power_signal_detect_inst/current_state[0] 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40481 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40482 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00B9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_520 ( input C1, B1, 
    A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40483 
    \server_power_control/power_signal_detect_inst/un1_next_state67_1_0 ( 
    .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40484 
    \server_power_control/power_signal_detect_inst/un1_next_state67_1_0_RNIQGQ31 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40483 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB3B3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40484 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A15) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_521 ( input D1, C1, 
    B1, A1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40183 
    \server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lto6_1_i_a3 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40485 
    \server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lto6 ( 
    .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40485 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0044) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_522 ( input D1, A1, 
    D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40486 
    \server_power_control/power_signal_detect_inst/un1_force_15slto15_0 ( 
    .A(A1), .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40199 
    \server_power_control/power_signal_detect_inst/un1_debounce_cntlto15_2 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40486 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_523 ( input D1, B1, 
    D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40487 
    \server_power_control/power_signal_detect_inst/un1_force_15s_1lto15_0 ( 
    .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40488 
    \server_power_control/power_signal_detect_inst/un1_low_time_cntlto15_2 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40487 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40488 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_524 ( input D1, B1, 
    D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40489 
    \server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lto15_2 
    ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40490 
    \server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lto15_2_0 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40489 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40490 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_525 ( input D1, C1, 
    B1, A1, D0, C0, M0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40491 \server_power_control/power_signal_detect_inst/is_pwr_force_off12 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40192 
    \server_power_control/power_signal_detect_inst/is_pwr_force_off_2_sqmuxa_0 
    ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/power_signal_detect_inst/current_state[2] 
    ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40491 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_526 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40492 \server_power_control/efuse_done_0_sqmuxa_2 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40493 \server_power_control/current_state_RNIMH581[2] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \riser_reset[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \riser_reset[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40492 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40493 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_527 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40494 \server_power_control/un1_efuse_dly_0_sqmuxa_2_1 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40495 \server_power_control/current_state_RNIMH581_0[2] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/cpu_pwr_control/pwr_all_on ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40494 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40495 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_528 ( input D1, C1, B1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40081 \server_power_control/un1_current_state_2 ( .A(GNDI), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40496 \server_power_control/un1_current_state_2_RNIAJUB1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40496 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_529 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40497 \server_power_control/next_state_1_3_0_.m36 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40498 \server_power_control/next_state_1_3_0_.m37 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40497 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCD8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40498 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF022) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_530 ( input D1, C1, B1, A1, D0, C0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40499 \server_power_control/un1_next_state105_11_3 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40351 \server_power_control/un1_next_state105_11_3_RNIU0DI ( .A(A0), 
    .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40499 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF9F2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_531 ( input D1, B1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40094 \server_power_control/cpu_off_done_1_sqmuxa ( .A(GNDI), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40500 \server_power_control/un1_next_state105_10 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40500 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_532 ( input D1, C1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40501 \server_power_control/reboot_cnt_2_sqmuxa_1 ( .A(GNDI), .B(GNDI), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40502 \server_power_control/reboot_cnt_2_sqmuxa_1_RNI8V9J2 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40501 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h000F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40502 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2FA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_533 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M0, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  lut40503 \server_power_control/next_state113 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40504 \server_power_control/efuse_dly_0_sqmuxa_RNI1P2M1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/current_state[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40503 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40504 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_534 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40505 \server_power_control/psu_on_off26 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40506 \server_power_control/un1_efuse_dly_0_sqmuxa_2 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40505 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40506 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_535 ( input D1, C1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40071 \server_power_control/un1_wait_time_out_0_sqmuxa_1_RNO ( .A(GNDI), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40507 \server_power_control/un1_wait_time_out_0_sqmuxa_1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40507 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_536 ( input D1, C1, B1, A1, D0, C0, output 
    F0, F1 );
  wire   GNDI;

  lut40508 \server_power_control/psu_dly11 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40425 \server_power_control/psu_dly11_RNIGH9O ( .A(GNDI), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40508 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_537 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40509 \server_power_control/efuse_done13 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40426 \server_power_control/efuse_dly_0_sqmuxa ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \server_power_control/current_state[2] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/current_state[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40509 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_538 ( input D1, C1, B1, A1, D0, C0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40510 \server_power_control/next_state112 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40511 \server_power_control/wait_time_out_0_sqmuxa_1 ( .A(A0), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40510 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40511 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_539 ( input D1, C1, B1, A1, D0, C0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40411 \server_power_control/next_state101 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40512 \server_power_control/next_state101_RNIDV011 ( .A(A0), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40512 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_540 ( input D1, C1, B1, A1, D0, B0, output 
    F0, F1 );
  wire   GNDI;

  lut40204 \server_power_control/psu_on_off17 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40094 \server_power_control/efuse_done_0_sqmuxa_1 ( .A(GNDI), .B(B0), 
    .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_541 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40513 \server_power_control/un1_is_reboot_0_sqmuxa ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40514 \server_power_control/un1_is_reboot_0_sqmuxa_1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40513 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40514 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00C4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_542 ( input C1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40210 \server_power_control/wait_time_out_cnt_RNI4UEG[3] ( .A(A1), 
    .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40515 \server_power_control/wait_time_out_cnt_RNI9EHE2[13] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40515 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_543 ( input D1, B1, A1, D0, C0, B0, A0, M0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40516 \i2c0_slave_inst0/rcv_bit19_i_0_o3 ( .A(A1), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40517 \i2c0_slave_inst0/opcode_RNO ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c0_slave_inst0/opcode ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40516 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h77FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40517 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_544 ( input C1, B1, A1, D0, C0, B0, M0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40518 \i2c0_slave_inst0/rcv_bit18 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40402 \i2c0_slave_inst0/rcv_bit_RNO[1] ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c0_slave_inst0/rcv_bit[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40518 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_545 ( input D1, B1, D0, C0, B0, A0, M0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40166 \i2c0_slave_inst0/rcv_bit22 ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40519 \i2c0_slave_inst0/rcv_bit_RNO[2] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c0_slave_inst0/rcv_bit[1] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40519 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_546 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CE, CLK, output 
    F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40403 \i2c0_slave_inst0/next_state_i_a8_2[0] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40373 \i2c0_slave_inst0/bit_cnt_RNIQOCF1[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/i2c_rw ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_547 ( input D1, B1, D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40520 \i2c0_slave_inst0/current_state_ns_0_o4[0] ( .A(GNDI), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40521 \i2c0_slave_inst0/current_state_RNO_0[1] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/i2c_wait ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40520 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h33FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40521 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_548 ( input C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40354 \i2c0_slave_inst0/un1_stretch_en_i_a2_0_a3[1] ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40522 \i2c0_slave_inst0/is_slave_send_2_sqmuxa_1_RNI905T1 ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40522 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_549 ( input D1, B1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40487 \i2c0_slave_inst0/un1_start_next_bit ( .A(GNDI), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40523 \i2c0_slave_inst0/is_slave_send_2_sqmuxa_1 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40523 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C8C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_550 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40524 \i2c0_slave_inst0/next_state_i_0_a3_0_0_0[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40525 \i2c0_slave_inst0/un1_stretch_en_2_1 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40524 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00FB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40525 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h556A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_551 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40526 \i2c0_slave_inst0/next_state_i_1[2] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40527 \i2c0_slave_inst0/next_state_i[2] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40526 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40527 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_552 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40528 \i2c0_slave_inst0/next_state_i_0_1[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40529 \i2c0_slave_inst0/is_slave_send_1_sqmuxa_0 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40528 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40529 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_553 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40530 \i2c0_slave_inst0/un1_delay_cnt_3_5 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40198 \i2c0_slave_inst0/un1_delay_cnt18_i_0 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \i2c0_slave_inst0/scl_in_dly[2] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \i2c0_slave_inst0/scl_in_dly[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40530 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_554 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40421 \i2c0_slave_inst0/un1_delay_cnt_3_4 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40531 \i2c0_slave_inst0/un1_delay_cnt_3_4_RNI4VCQ ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \i2c0_slave_inst0/scl_in_dly[4] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \i2c0_slave_inst0/scl_in_dly[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40531 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2FA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_555 ( input C1, B1, A1, D0, C0, B0, A0, M0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40532 \i2c0_slave_inst0/un1_start_2_0_a3 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40533 \i2c0_slave_inst0/timeout_cnt_RNIFKCS2[1] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/slave_addr_out[6] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40532 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4848) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40533 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h080C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_556 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40534 \i2c0_slave_inst0/word_addr_0_sqmuxa_x_i ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40535 \i2c0_slave_inst0/word_addr_lcry_0_RNO ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40534 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40535 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDFCF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_557 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40221 \i2c0_slave_inst0/un1_timeout_cnt_en17_i_a3_0_2 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40536 \i2c0_slave_inst0/un1_timeout_cnt_en17_i_0 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40536 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_558 ( input C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40537 \i2c0_slave_inst0/current_state_ns_0_0_a3_0[0] ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40102 \i2c0_slave_inst0/current_state_ns_0_0_1[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40537 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_559 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40538 \i2c0_slave_inst0/current_state_ns_i_0[4] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40539 \i2c0_slave_inst0/current_state_ns_i_1[4] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40538 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF01) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40539 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCF5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_560 ( input D1, C1, B1, A1, D0, C0, B0, output 
    F0, F1 );
  wire   GNDI;

  lut40540 \i2c0_slave_inst0/next_state16_NE ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40541 \i2c0_slave_inst0/next_state_i_3[2] ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40540 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40541 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_561 ( input D1, C1, B1, A1, D0, C0, output F0, 
    F1 );
  wire   GNDI;

  lut40542 \i2c0_slave_inst0/next_state_i_a8_0_0_a3[0] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40543 \i2c0_slave_inst0/current_state_ns_0_o5_0_o3[0] ( .A(GNDI), 
    .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40542 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40543 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_562 ( input C1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40544 \i2c0_slave_inst0/current_state_ns_i_o4_i_o3[3] ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40545 \i2c0_slave_inst0/next_state_i_a8_2_0_a3[2] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40544 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40545 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_563 ( input D1, B1, A1, D0, C0, B0, M0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40546 \i2c0_slave_inst0/un1_bit_cnt_5 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40547 \i2c0_slave_inst0/sda_out_reg_13_iv_2_RNO ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/rcv_bit[7] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40546 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40547 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_564 ( input D1, C1, A1, D0, C0, B0, M0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40548 \i2c0_slave_inst0/un1_bit_cnt_7 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40549 \i2c0_slave_inst0/sda_out_reg_13_iv_0_RNO ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/rcv_bit[5] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40548 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40549 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_565 ( input C1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40096 \i2c0_slave_inst0/next_state_i_o4_i_a3_0[0] ( .A(A1), .B(GNDI), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40550 \i2c0_slave_inst0/current_state_ns_i_a5[5] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40550 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0051) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_566 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40551 \i2c0_slave_inst0/next_state_i_0_a3_1[1] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40526 \i2c0_slave_inst0/next_state_i_0_0[1] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40551 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_567 ( input D1, C1, B1, A1, D0, B0, A0, M0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40552 \i2c0_slave_inst0/sda_out_reg_13_iv_5_1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40361 \i2c0_slave_inst0/un1_bit_cnt_2 ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/timeout_cnt_en ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40552 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h44F4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module timer_inst_SLICE_568 ( input C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40553 \timer_inst/int_100ms_cnt11_7 ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40447 \timer_inst/int_100ms_cnt11_18 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40553 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0303) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_569 ( input D1, C1, B1, A1, D0, C0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40554 \por/un1_reset_1_RNIIEVH1 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40555 \por/un1_reset_1 ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/wr_data[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c0_slave_inst0/wr_data[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40554 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40555 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_570 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40556 \eeprom_i2c_inst/e2prom_i2c/rd_datace[7] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40557 \eeprom_i2c_inst/e2prom_i2c/rd_data_RNO[1] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/rd_data[1] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40556 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40557 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0004) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_571 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40558 \eeprom_i2c_inst/e2prom_i2c/scl_in_clean_RNITCJ42 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40559 \eeprom_i2c_inst/e2prom_i2c/un1_scl_out_en20_1_i_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/sda_in_dly[5] ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \eeprom_i2c_inst/e2prom_i2c/sda_in_dly[4] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40558 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCDCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40559 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFCE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_572 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, M0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40560 \eeprom_i2c_inst/e2prom_i2c/rd_datace[6] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40561 \eeprom_i2c_inst/e2prom_i2c/rd_datace[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/rd_data[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40560 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40561 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_573 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40562 \server_power_control/current_state_RNIMH581_2[2] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40563 \server_power_control/cpu_off_done_0_sqmuxa_1_1 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/wr_data[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/wr_data[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40562 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40563 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_574 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40564 \i2c0_slave_inst0/rcv_bit_RNO[7] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40370 \i2c0_slave_inst0/rcv_bit_RNO[3] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c0_slave_inst0/rcv_bit[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40564 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_575 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  lut40565 \i2c0_slave_inst0/rcv_bit_RNO[6] ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40566 \i2c0_slave_inst0/rcv_bit_RNO[4] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c0_slave_inst0/rcv_bit[3] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40565 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40566 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_576 ( input D1, C1, B1, D0, C0, B0, A0, 
    M0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40567 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_7_RNO ( .A(GNDI), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40568 \eeprom_i2c_inst/e2prom_i2c/rd_datace[3] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/rd_data[4] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40567 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3F30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40568 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_577 ( input D1, C1, B1, A1, D0, C0, B0, 
    output F0, F1 );
  wire   GNDI;

  lut40569 \usb_reset_ctrl_inst/current_state_RNIU70U[0] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40570 \usb_reset_ctrl_inst/current_state_RNI5EMP[0] ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40569 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0BCB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40570 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0FCF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_578 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40571 \usb_reset_ctrl_inst/data_out_r_20_sn_m36_i_a2_0 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40188 \usb_reset_ctrl_inst/e2prom_data_wr_1_sqmuxa_0_a3 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40571 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8880) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_579 ( input D1, C1, B1, A1, D0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40572 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_1_4_1 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40573 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_19 ( .A(A0), .B(B0), 
    .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40572 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40573 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_580 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40574 \server_power_control/cpu_pwr_control/data_out_r_20_sn_m20_i ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40575 \usb_reset_ctrl_inst/data_out_r_20_sn_m26_i_a2 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40574 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40575 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h80C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_switch_reset_control_SLICE_581 ( input D1, C1, B1, 
    A1, D0, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40576 
    \server_power_control/switch_reset_control/current_state_RNIMCM11[0] ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40577 \server_power_control/switch_reset_control/un1_next_state43_0 ( 
    .A(GNDI), .B(B0), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40576 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0E5F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40577 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F3F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_582 ( input D1, C1, B1, A1, D0, C0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40435 \server_power_control/cpu_pwr_control/un1_next_state40_2_i_0_a2 ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40578 \server_power_control/cpu_pwr_control/current_state_RNI16S31[1] ( 
    .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \power_control[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \power_control[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40578 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F5F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_583 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40579 \server_power_control/cpu_pwr_control/next_state_1_0_1[0] ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40580 \server_power_control/cpu_pwr_control/next_state_1_i_a3_0[1] ( 
    .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \reset_control_a[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \reset_control_a[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40579 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0DAD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40580 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_584 ( input D1, C1, 
    B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40190 
    \server_power_control/power_signal_detect_inst/un1_nomral_300mslto6_i_a3 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40334 
    \server_power_control/power_signal_detect_inst/un1_force_15slto7_i_a3_0 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_585 ( input D1, C1, B1, A1, C0, B0, A0, M0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40562 \server_power_control/current_state_RNIMH581_1[2] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40581 \server_power_control/current_state_RNIQ64U[2] ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \server_power_control/cpu_pwr_on_off ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40581 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3E3E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_586 ( input D1, C1, A1, D0, C0, B0, A0, M0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40582 \i2c0_slave_inst0/un1_bit_cnt_6 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40583 \i2c0_slave_inst0/rcv_bit_RNO[5] ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \i2c0_slave_inst0/rcv_bit[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40582 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40583 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_587 ( input D1, C1, B1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40584 \i2c0_slave_inst0/un1_stretch_en_i_a2[0] ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40585 \i2c0_slave_inst0/next_state_i_m8[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40584 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0003) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40585 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE54) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_588 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40586 \i2c0_slave_inst0/next_state_i_a8_0[2] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40587 \i2c0_slave_inst0/next_state_i_0_o3[1] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40586 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8880) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40587 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF0B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_589 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40588 \i2c0_slave_inst0/un1_timeout_cnt_en17_i_a3 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40589 \i2c0_slave_inst0/current_state_ns_i_0_o3[2] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40588 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40589 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF08) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_590 ( input D1, B1, A1, D0, B0, A0, M0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40590 \i2c0_slave_inst0/un1_bit_cnt_3 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40591 \i2c0_slave_inst0/un1_bit_cnt_4 ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0031 \i2c0_slave_inst0/scl_in_dly[0] ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \i2c0_slave_inst0/scl_in_clean_dly[1] ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40590 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40591 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0022) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_591 ( input D1, B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40592 \i2c0_slave_inst0/current_state_ns_i_a5_0_0[1] ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40593 \i2c0_slave_inst0/next_state_i_a8_3_1[0] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40592 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0011) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40593 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_sol_inst_SLICE_592 ( input D1, B1, A1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40594 \uart_sol_inst/un1_reset_3_i ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40595 \uart_sol_inst/un1_reset_i ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40594 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40595 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h77FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_sol_inst_SLICE_593 ( input D1, C1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40596 \uart_sol_inst/un1_reset_1_i ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40597 \uart_sol_inst/un1_reset_2_i ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40596 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40597 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_594 ( input C1, A1, D0, C0, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40210 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_a2_0[4] ( .A(A1), 
    .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40598 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_a2_2[4] ( .A(A0), 
    .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e2prom_dev_addr[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e2prom_dev_addr[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40598 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F05) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_595 ( input D1, C1, B1, D0, C0, B0, 
    output F0, F1 );
  wire   GNDI;

  lut40599 \eeprom_i2c_inst/e2prom_i2c/un26_i_a4[2] ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40600 \eeprom_i2c_inst/e2prom_i2c/next_state_a4[2] ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40599 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0003) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40600 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_596 ( input D1, B1, D0, C0, B0, 
    output F0, F1 );
  wire   GNDI;

  lut40360 \eeprom_i2c_inst/e2prom_i2c/next_state_a4_0_0[3] ( .A(GNDI), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40601 \eeprom_i2c_inst/e2prom_i2c/next_state_o2[2] ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40601 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h03F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_597 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40602 \eeprom_i2c_inst/e2prom_i2c/state_cnt_RNIVM9F[8] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40090 \eeprom_i2c_inst/e2prom_i2c/before_state_en_7[0] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e2prom_byte_addr[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \e2prom_byte_addr[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40602 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_598 ( input D1, C1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40501 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_5_0_a2_0_0 ( .A(GNDI), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40603 \eeprom_i2c_inst/e2prom_i2c/bit_cnt_5_i_a2_0_1[2] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e2prom_byte_addr[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e2prom_byte_addr[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40603 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0302) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_599 ( input D1, A1, D0, C0, B0, A0, M0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40472 \eeprom_i2c_inst/e2prom_i2c/state_cnt_RNI84L7[5] ( .A(A1), .B(GNDI), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40604 \eeprom_i2c_inst/e2prom_i2c/state_cnt_RNIB3AF[5] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/e2prom_i2c/rd_data[7] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40604 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module bmc_reset_ctrl_inst_SLICE_600 ( input D1, C1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40189 \bmc_reset_ctrl_inst/un1_next_state24_0_0 ( .A(GNDI), .B(GNDI), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40605 \bmc_reset_ctrl_inst/bmc_prst9_RNI3VOU ( .A(A0), .B(B0), .C(GNDI), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40605 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h33BB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_601 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40606 \usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_5[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40607 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_14 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40606 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40607 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_602 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40608 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_2_7_3 ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40609 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_o2_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40608 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40609 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0180) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_603 ( input C1, B1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40610 \usb_reset_ctrl_inst/current_state_RNIE94H[0] ( .A(GNDI), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40611 \usb_reset_ctrl_inst/next_state_1_0_0_i_o2[1] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40610 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3030) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40611 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_604 ( input D1, C1, A1, D0, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40224 \server_power_control/cpu_pwr_control/data_out_r_20_bm_RNO[1] ( 
    .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40612 \usb_reset_ctrl_inst/data_out_r_20_sn_m16_i ( .A(A0), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40612 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAF0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_605 ( input C1, B1, A1, D0, C0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40613 \server_power_control/cpu_pwr_control/pcie_nvme0_rst ( .A(A1), 
    .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40476 \server_power_control/cpu_pwr_control/riser0_reset ( .A(A0), 
    .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \reset_control_b[1] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \reset_control_b[0] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40613 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_606 ( input D1, C1, B1, D0, C0, B0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40614 \server_power_control/cpu_pwr_control/pcie_nvme1_rst ( .A(GNDI), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40305 \server_power_control/cpu_pwr_control/pcie_sata_rst ( .A(GNDI), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \reset_control_a[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \reset_control_a[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40614 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_607 ( input D1, C1, 
    D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40543 
    \server_power_control/power_signal_detect_inst/un1_force_15slto12_0 ( 
    .A(GNDI), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40615 
    \server_power_control/power_signal_detect_inst/un1_nomral_300mslto15_7 ( 
    .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40615 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_608 ( input C1, B1, 
    D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40024 
    \server_power_control/power_signal_detect_inst/un1_force_15s_1lto12_0 ( 
    .A(GNDI), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40367 
    \server_power_control/power_signal_detect_inst/un1_nomral_300ms_1lto15_7 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_609 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40518 \server_power_control/psu_on_off26_4 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40205 \server_power_control/efuse_done13_5 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_610 ( input D1, B1, A1, D0, C0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40616 \i2c0_slave_inst0/rcv_bit_RNO[0] ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40617 \i2c0_slave_inst0/rcv_ack_RNO_0 ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40616 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0044) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40617 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_611 ( input D1, C1, B1, D0, C0, B0, M1, M0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40614 \i2c0_slave_inst0/un1_timeout_cnt_en17_i_a3_0_1 ( .A(GNDI), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40618 \i2c0_slave_inst0/un1_start_2_0_a3_RNIGDUK ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \i2c0_slave_inst0/sda_in_dly[4] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0031 \i2c0_slave_inst0/sda_in_dly[3] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40618 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_612 ( input D1, C1, B1, A1, D0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40619 \i2c0_slave_inst0/current_state_ns_i_0[5] ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40620 \i2c0_slave_inst0/start_next_bit_1d_RNI6N121 ( .A(A0), .B(B0), 
    .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \i2c0_slave_inst0/slave_addr_out[3] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c0_slave_inst0/slave_addr_out[2] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40619 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0155) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40620 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5577) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_613 ( input B1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40429 \i2c0_slave_inst0/next_state_i_a8_2_0_0[0] ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40621 \i2c0_slave_inst0/next_state_i_0[2] ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40621 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_614 ( input C1, B1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40032 \i2c0_slave_inst0/next_state_i_0_a3_0_0[1] ( .A(GNDI), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40622 \i2c0_slave_inst0/current_state_ns_i_a5_0_2[4] ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40622 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_615 ( input D1, C1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40192 \eeprom_i2c_inst/e2prom_i2c/un26_i_a4_1[1] ( .A(GNDI), .B(GNDI), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40623 \eeprom_i2c_inst/e2prom_i2c/un26_i_a4[3] ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40623 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0101) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_616 ( input C1, B1, A1, D0, C0, B0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40624 \eeprom_i2c_inst/e2prom_i2c/sda_bit_out_3 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40625 \eeprom_i2c_inst/e2prom_i2c/bit_mux_0_i_m2[2] ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \e2prom_data_wr[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e2prom_data_wr[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40624 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE2E2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40625 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_617 ( input D1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40382 \eeprom_i2c_inst/e2prom_i2c/bit_mux_0_i_m2[1] ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40626 \eeprom_i2c_inst/e2prom_i2c/bit_mux_0_i_m2[3] ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \e2prom_data_wr[7] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \e2prom_data_wr[6] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40626 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB8B8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module eeprom_i2c_inst_SLICE_618 ( input D1, A1, D0, C0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40194 \eeprom_i2c_inst/e2prom_i2c/current_state_RNIANPL1[0] ( .A(A1), 
    .B(GNDI), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40627 \eeprom_i2c_inst/e2prom_i2c/current_state_ns_i_m2[1] ( .A(A0), 
    .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \eeprom_i2c_inst/data_read_out[3] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \eeprom_i2c_inst/data_read_out[2] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40627 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module usb_reset_ctrl_inst_SLICE_619 ( input D1, C1, B1, A1, D0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40628 \usb_reset_ctrl_inst/next_state_1_0_0_i_a2_0_4[1] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40629 \usb_reset_ctrl_inst/un1_usb_ponrst48_i_0_0_a2_8_1 ( .A(A0), .B(B0), 
    .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40628 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40629 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_620 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40630 \server_power_control/data_out_r_20_0_a3_1_0[5] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40631 \usb_reset_ctrl_inst/data_out_r_20_sn_m36_i_0 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40630 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC088) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40631 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_621 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40632 \server_power_control/cpu_pwr_control/un1_next_state40_5_i_a2_0_1 
    ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40141 \server_power_control/cpu_pwr_control/seq_cnt_RNIMC1R[1] ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0031 \reset_control_b[3] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0031 \reset_control_b[2] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40632 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_622 ( input D1, B1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40360 \server_power_control/next_state_1_3_0_.m7 ( .A(GNDI), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40098 \server_power_control/next_state_1_3_0_.m16 ( .A(GNDI), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_623 ( input C1, B1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40633 \server_power_control/next_state105_RNIEA5S4 ( .A(GNDI), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40634 \server_power_control/un1_psu_done_1_sqmuxa_1_2 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40633 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0303) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40634 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_624 ( input D1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40454 \server_power_control/next_state_1_3_0_.m28 ( .A(A1), .B(GNDI), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40635 \server_power_control/next_state_1_3_0_.m4 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40635 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h05FC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_625 ( input D1, C1, B1, A1, D0, C0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40199 \server_power_control/psu_on_off26_5 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40207 \server_power_control/efuse_done13_4 ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module i2c0_slave_inst0_SLICE_626 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40453 \i2c0_slave_inst0/word_addr14 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40636 \i2c0_slave_inst0/current_state_ns_i_0_a3[3] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40636 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5455) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_627 ( input D1, A1, D0, C0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40454 \i2c0_slave_inst0/bit_cnt_3_RNO[2] ( .A(A1), .B(GNDI), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40637 \i2c0_slave_inst0/slave_addr_out_0_sqmuxa ( .A(A0), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \i2c0_slave_inst0/slave_addr_out[1] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \i2c0_slave_inst0/slave_addr_out[0] ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40637 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module i2c0_slave_inst0_SLICE_628 ( input D1, C1, B1, D0, C0, B0, A0, M0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40638 \i2c0_slave_inst0/current_state_ns_i_0_m3[2] ( .A(GNDI), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40639 \i2c0_slave_inst0/sda_out_reg_13_iv_i_RNO ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0031 \i2c0_slave_inst0/sda_in_clean ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40638 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40639 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module timer_inst_SLICE_629 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40373 \timer_inst/int_100ms_cnt11_12 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40373 \timer_inst/int_100ms_cnt11_13 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module timer_inst_SLICE_630 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40593 \timer_inst/int_1ms_cnt11_9 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40208 \timer_inst/int_1ms_cnt11_10 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_631 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40607 \server_power_control/wait_time_out_cnt_RNI4VI7[0] ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40640 \server_power_control/wait_time_out_cnt_RNI5T8K[4] ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40640 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_632 ( input D1, C1, B1, A1, C0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40641 \server_power_control/psu_on_off17_4 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40468 \server_power_control/psu_on_off17_3 ( .A(A0), .B(GNDI), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40641 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_633 ( input D1, C1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40642 \server_power_control/psu_dly11_4 ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40643 \server_power_control/psu_dly11_5 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40642 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0005) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40643 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_634 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40334 \server_power_control/next_state101_10 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40083 \server_power_control/next_state101_11 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module server_power_control_SLICE_635 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40488 \server_power_control/next_state101_8 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40644 \server_power_control/next_state101_9 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40644 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_636 ( 
    input D1, C1, A1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40645 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/key_rst_pre_RNI98C51 
    ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40553 \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec5_3 
    ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40645 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A05) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_rst_btn_dbn_SLICE_637 ( 
    input C1, B1, A1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40646 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/sec_pre_RNIJT7G 
    ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40633 
    \server_power_control/power_signal_detect_inst/rst_btn_dbn/next_state24_0_a2_3 
    ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40646 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2323) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_638 ( input D1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40647 \server_power_control/cpu_pwr_control/cpua_pwrok_5 ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40221 \server_power_control/cpu_pwr_control/cpua_pwrok_7 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0145 \por/rst_btn_dly[5] ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0145 \por/rst_btn_dly[4] ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40647 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module bmc_reset_ctrl_inst_SLICE_639 ( input D1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40072 \bmc_reset_ctrl_inst/bmc_prst9_RNI500K ( .A(A1), .B(GNDI), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40205 \bmc_reset_ctrl_inst/bmc_prst9_11 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module bmc_reset_ctrl_inst_SLICE_640 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40644 \bmc_reset_ctrl_inst/bmc_prst9_9 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40190 \bmc_reset_ctrl_inst/bmc_prst9_10 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module eeprom_i2c_inst_e2prom_i2c_SLICE_641 ( input C1, B1, A1, C0, B0, 
    output F0, F1 );
  wire   GNDI;

  lut40138 \eeprom_i2c_inst/e2prom_i2c/rcv_ack_0_sqmuxa ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40648 \eeprom_i2c_inst/e2prom_i2c/un1_start_next_bit_1_i_o2_0 ( .A(GNDI), 
    .B(B0), .C(C0), .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40648 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3F3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_642 ( input D1, C1, 
    A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40649 
    \server_power_control/power_signal_detect_inst/un1_force_15s_1lto7_i_a3_1 
    ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40334 
    \server_power_control/power_signal_detect_inst/un1_force_15s_1lto7_i_a3_0 
    ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40649 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0005) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_SLICE_643 ( input B1, A1, D0, B0, M1, M0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40650 \server_power_control/cpu_pwr_control/data_out_r_20_bm_RNO[2] ( 
    .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40166 \server_power_control/data_out_r_20_0_a3_0_2[5] ( .A(GNDI), .B(B0), 
    .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre \server_power_control/current_state[0] ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \server_power_control/cpu_pwr_control/current_state[2] ( 
    .D0(M0_dly), .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), 
    .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40650 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module server_power_control_power_signal_detect_inst_SLICE_644 ( input D1, C1, 
    A1, D0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40642 
    \server_power_control/power_signal_detect_inst/un1_nomral_300mslto6_i_a3_0 
    ( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40651 
    \server_power_control/power_signal_detect_inst/un1_force_15slto7_i_a3_1 ( 
    .A(A0), .B(B0), .C(GNDI), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40651 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0011) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module bmc_sda ( output PADDI, input IOLTO, PADDO, inout bmc_sda );

  xo2iobuf bmc_sda_pad( .I(PADDO), .T(IOLTO), .Z(PADDI), .PAD(bmc_sda), 
    .PADI(bmc_sda));

  specify
    (IOLTO => bmc_sda) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => bmc_sda) = (0:0:0,0:0:0);
    (bmc_sda => PADDI) = (0:0:0,0:0:0);
    $width (posedge bmc_sda, 0:0:0);
    $width (negedge bmc_sda, 0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output Z, PAD, input PADI );

  IBPD INST1( .I(PADI), .O(Z));
  OBZPD INST2( .I(I), .T(T), .O(PAD));
endmodule

module bmc_sda_MGIOL ( output IOLTO, input DI, TS, CE, CLK, output IN );
  wire   GNDI, VCCI, DI_dly, CLK_dly, TS_dly, CE_dly;

  mfflsre i2c0_slave_inst0_is_slave_send_iio( .D0(TS_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLTO));
  gnd DRIVEGND( .PWR0(GNDI));
  smuxlregsre \i2c0_slave_inst0_sda_in_dlyio[0] ( .D0(DI_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IN));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => IOLTO) = (0:0:0,0:0:0);
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, TS, 0:0:0, 0:0:0,,,, CLK_dly, TS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre ( input D0, SP, CK, LSR, output Q );

  FD1P3BX INST01( .D(D0), .SP(SP), .CK(CK), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module smuxlregsre ( input D0, SP, CK, LSR, output Q );

  IFS1P3BX INST01( .D(D0), .SP(SP), .SCLK(CK), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module sys_uart_rxd3 ( input PADDT, PADDO, output sys_uart_rxd3 );

  xo2iobuf0652 sys_uart_rxd3_pad( .I(PADDO), .T(PADDT), .PAD(sys_uart_rxd3));

  specify
    (PADDT => sys_uart_rxd3) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => sys_uart_rxd3) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0652 ( input I, T, output PAD );

  OBZPU INST5( .I(I), .T(T), .O(PAD));
endmodule

module bmc_srst ( input PADDO, output bmc_srst );

  xo2iobuf0653 bmc_srst_pad( .I(PADDO), .PAD(bmc_srst));

  specify
    (PADDO => bmc_srst) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0653 ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module clock ( output PADDI, input clock );

  xo2iobuf0654 clock_pad( .Z(PADDI), .PAD(clock));

  specify
    (clock => PADDI) = (0:0:0,0:0:0);
    $width (posedge clock, 0:0:0);
    $width (negedge clock, 0:0:0);
  endspecify

endmodule

module xo2iobuf0654 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module cpld_led_test ( input PADDO, output cpld_led_test );

  xo2iobuf0655 cpld_led_test_pad( .I(PADDO), .PAD(cpld_led_test));

  specify
    (PADDO => cpld_led_test) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0655 ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module cpld_heart ( input PADDO, output cpld_heart );

  xo2iobuf0656 cpld_heart_pad( .I(PADDO), .PAD(cpld_heart));

  specify
    (PADDO => cpld_heart) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0656 ( input I, output PAD );

  OB INST5( .I(I), .O(PAD));
endmodule

module vga_6505_in2 ( input PADDO, output vga_6505_in2 );
  wire   GNDI;

  xo2iobuf0657 vga_6505_in2_pad( .I(PADDO), .T(GNDI), .PAD(vga_6505_in2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => vga_6505_in2) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0657 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module vga_6505_in1 ( input PADDO, output vga_6505_in1 );
  wire   GNDI;

  xo2iobuf0657 vga_6505_in1_pad( .I(PADDO), .T(GNDI), .PAD(vga_6505_in1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => vga_6505_in1) = (0:0:0,0:0:0);
  endspecify

endmodule

module a_gpio5 ( output PADDI, input a_gpio5 );

  xo2iobuf0658 a_gpio5_pad( .Z(PADDI), .PAD(a_gpio5));

  specify
    (a_gpio5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge a_gpio5, 0:0:0);
    $width (negedge a_gpio5, 0:0:0);
  endspecify

endmodule

module xo2iobuf0658 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module a_gpio3 ( output PADDI, input a_gpio3 );

  xo2iobuf0658 a_gpio3_pad( .Z(PADDI), .PAD(a_gpio3));

  specify
    (a_gpio3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge a_gpio3, 0:0:0);
    $width (negedge a_gpio3, 0:0:0);
  endspecify

endmodule

module a_gpio2 ( input PADDO, output a_gpio2 );
  wire   GNDI;

  xo2iobuf0659 a_gpio2_pad( .I(PADDO), .T(GNDI), .PAD(a_gpio2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => a_gpio2) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0659 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module bmc_gpio54 ( input PADDO, output bmc_gpio54 );
  wire   GNDI;

  xo2iobuf0657 bmc_gpio54_pad( .I(PADDO), .T(GNDI), .PAD(bmc_gpio54));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bmc_gpio54) = (0:0:0,0:0:0);
  endspecify

endmodule

module bmc_gpio53 ( input PADDO, output bmc_gpio53 );
  wire   GNDI;

  xo2iobuf0657 bmc_gpio53_pad( .I(PADDO), .T(GNDI), .PAD(bmc_gpio53));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bmc_gpio53) = (0:0:0,0:0:0);
  endspecify

endmodule

module bmc_gpio51 ( input PADDO, output bmc_gpio51 );
  wire   GNDI;

  xo2iobuf0660 bmc_gpio51_pad( .I(PADDO), .T(GNDI), .PAD(bmc_gpio51));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bmc_gpio51) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0660 ( input I, T, output PAD );

  OBZPU INST5( .I(I), .T(T), .O(PAD));
endmodule

module bmc_gpio49 ( output PADDI, input bmc_gpio49 );

  xo2iobuf0654 bmc_gpio49_pad( .Z(PADDI), .PAD(bmc_gpio49));

  specify
    (bmc_gpio49 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bmc_gpio49, 0:0:0);
    $width (negedge bmc_gpio49, 0:0:0);
  endspecify

endmodule

module bmc_gpio48 ( output PADDI, input bmc_gpio48 );

  xo2iobuf0654 bmc_gpio48_pad( .Z(PADDI), .PAD(bmc_gpio48));

  specify
    (bmc_gpio48 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bmc_gpio48, 0:0:0);
    $width (negedge bmc_gpio48, 0:0:0);
  endspecify

endmodule

module bmc_gpio25 ( output PADDI, input bmc_gpio25 );

  xo2iobuf0654 bmc_gpio25_pad( .Z(PADDI), .PAD(bmc_gpio25));

  specify
    (bmc_gpio25 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bmc_gpio25, 0:0:0);
    $width (negedge bmc_gpio25, 0:0:0);
  endspecify

endmodule

module bmc_gpio24 ( output PADDI, input bmc_gpio24 );

  xo2iobuf0654 bmc_gpio24_pad( .Z(PADDI), .PAD(bmc_gpio24));

  specify
    (bmc_gpio24 => PADDI) = (0:0:0,0:0:0);
    $width (posedge bmc_gpio24, 0:0:0);
    $width (negedge bmc_gpio24, 0:0:0);
  endspecify

endmodule

module uart1_rx_b ( input PADDT, PADDO, output uart1_rx_b );

  xo2iobuf0661 uart1_rx_b_pad( .I(PADDO), .T(PADDT), .PAD(uart1_rx_b));

  specify
    (PADDT => uart1_rx_b) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => uart1_rx_b) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0661 ( input I, T, output PAD );

  OBZPU INST5( .I(I), .T(T), .O(PAD));
endmodule

module uart1_tx_b ( output PADDI, input uart1_tx_b );

  xo2iobuf0662 uart1_tx_b_pad( .Z(PADDI), .PAD(uart1_tx_b));

  specify
    (uart1_tx_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge uart1_tx_b, 0:0:0);
    $width (negedge uart1_tx_b, 0:0:0);
  endspecify

endmodule

module xo2iobuf0662 ( output Z, input PAD );

  IB INST1( .I(PAD), .O(Z));
endmodule

module uart0_rx_b ( input PADDT, PADDO, output uart0_rx_b );

  xo2iobuf0661 uart0_rx_b_pad( .I(PADDO), .T(PADDT), .PAD(uart0_rx_b));

  specify
    (PADDT => uart0_rx_b) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => uart0_rx_b) = (0:0:0,0:0:0);
  endspecify

endmodule

module uart0_tx_b ( output PADDI, input uart0_tx_b );

  xo2iobuf0662 uart0_tx_b_pad( .Z(PADDI), .PAD(uart0_tx_b));

  specify
    (uart0_tx_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge uart0_tx_b, 0:0:0);
    $width (negedge uart0_tx_b, 0:0:0);
  endspecify

endmodule

module uart1_rx_a ( input PADDT, PADDO, output uart1_rx_a );

  xo2iobuf0661 uart1_rx_a_pad( .I(PADDO), .T(PADDT), .PAD(uart1_rx_a));

  specify
    (PADDT => uart1_rx_a) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => uart1_rx_a) = (0:0:0,0:0:0);
  endspecify

endmodule

module uart1_tx_a ( output PADDI, input uart1_tx_a );

  xo2iobuf0662 uart1_tx_a_pad( .Z(PADDI), .PAD(uart1_tx_a));

  specify
    (uart1_tx_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge uart1_tx_a, 0:0:0);
    $width (negedge uart1_tx_a, 0:0:0);
  endspecify

endmodule

module uart0_rx_a ( input PADDT, PADDO, output uart0_rx_a );

  xo2iobuf0661 uart0_rx_a_pad( .I(PADDO), .T(PADDT), .PAD(uart0_rx_a));

  specify
    (PADDT => uart0_rx_a) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => uart0_rx_a) = (0:0:0,0:0:0);
  endspecify

endmodule

module uart0_tx_a ( output PADDI, input uart0_tx_a );

  xo2iobuf0662 uart0_tx_a_pad( .Z(PADDI), .PAD(uart0_tx_a));

  specify
    (uart0_tx_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge uart0_tx_a, 0:0:0);
    $width (negedge uart0_tx_a, 0:0:0);
  endspecify

endmodule

module sys_uart_txd3 ( output PADDI, input sys_uart_txd3 );

  xo2iobuf0654 sys_uart_txd3_pad( .Z(PADDI), .PAD(sys_uart_txd3));

  specify
    (sys_uart_txd3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge sys_uart_txd3, 0:0:0);
    $width (negedge sys_uart_txd3, 0:0:0);
  endspecify

endmodule

module pwr_button_b ( input PADDO, output pwr_button_b );
  wire   GNDI;

  xo2iobuf0663 pwr_button_b_pad( .I(PADDO), .T(GNDI), .PAD(pwr_button_b));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pwr_button_b) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0663 ( input I, T, output PAD );

  OBZPU INST5( .I(I), .T(T), .O(PAD));
endmodule

module pwr_button_a ( input PADDO, output pwr_button_a );
  wire   GNDI;

  xo2iobuf0663 pwr_button_a_pad( .I(PADDO), .T(GNDI), .PAD(pwr_button_a));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pwr_button_a) = (0:0:0,0:0:0);
  endspecify

endmodule

module e2prom_sda ( output PADDI, input IOLDO, PADDT, inout e2prom_sda );

  xo2iobuf e2prom_sda_pad( .I(IOLDO), .T(PADDT), .Z(PADDI), .PAD(e2prom_sda), 
    .PADI(e2prom_sda));

  specify
    (IOLDO => e2prom_sda) = (0:0:0,0:0:0);
    (PADDT => e2prom_sda) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (e2prom_sda => PADDI) = (0:0:0,0:0:0);
    $width (posedge e2prom_sda, 0:0:0);
    $width (negedge e2prom_sda, 0:0:0);
  endspecify

endmodule

module e2prom_sda_MGIOL ( output IOLDO, input DI, OPOS, CE, CLK, output IN );
  wire   GNDI, VCCI, DI_dly, CLK_dly, OPOS_dly, CE_dly;

  mfflsre eeprom_i2c_inst_e2prom_i2c_sda_outio( .D0(OPOS_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));
  smuxlregsre \eeprom_i2c_inst_e2prom_i2c_sda_in_dlyio[0] ( .D0(DI_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(IN));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module e2prom_scl ( output PADDI, input IOLDO, PADDT, inout e2prom_scl );
  wire   PADDT_NOTIN;

  xo2iobuf e2prom_scl_pad( .I(IOLDO), .T(PADDT_NOTIN), .Z(PADDI), 
    .PAD(e2prom_scl), .PADI(e2prom_scl));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (IOLDO => e2prom_scl) = (0:0:0,0:0:0);
    (PADDT => e2prom_scl) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (e2prom_scl => PADDI) = (0:0:0,0:0:0);
    $width (posedge e2prom_scl, 0:0:0);
    $width (negedge e2prom_scl, 0:0:0);
  endspecify

endmodule

module e2prom_scl_MGIOL ( output IOLDO, input DI, OPOS, CE, CLK, output IN );
  wire   GNDI, VCCI, DI_dly, CLK_dly, OPOS_dly, CE_dly;

  mfflsre eeprom_i2c_inst_e2prom_i2c_scl_outio( .D0(OPOS_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));
  smuxlregsre \eeprom_i2c_inst_e2prom_i2c_scl_in_dlyio[0] ( .D0(DI_dly), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(IN));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bmc_scl ( input PADDO, output bmc_scl );
  wire   GNDI;

  xo2iobuf0657 bmc_scl_pad( .I(PADDO), .T(GNDI), .PAD(bmc_scl));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bmc_scl) = (0:0:0,0:0:0);
  endspecify

endmodule

module ddr3_event_b ( output PADDI, input ddr3_event_b );

  xo2iobuf0658 ddr3_event_b_pad( .Z(PADDI), .PAD(ddr3_event_b));

  specify
    (ddr3_event_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge ddr3_event_b, 0:0:0);
    $width (negedge ddr3_event_b, 0:0:0);
  endspecify

endmodule

module ddr2_event_b ( output PADDI, input ddr2_event_b );

  xo2iobuf0658 ddr2_event_b_pad( .Z(PADDI), .PAD(ddr2_event_b));

  specify
    (ddr2_event_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge ddr2_event_b, 0:0:0);
    $width (negedge ddr2_event_b, 0:0:0);
  endspecify

endmodule

module ddr1_event_b ( output PADDI, input ddr1_event_b );

  xo2iobuf0658 ddr1_event_b_pad( .Z(PADDI), .PAD(ddr1_event_b));

  specify
    (ddr1_event_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge ddr1_event_b, 0:0:0);
    $width (negedge ddr1_event_b, 0:0:0);
  endspecify

endmodule

module ddr0_event_b ( output PADDI, input ddr0_event_b );

  xo2iobuf0658 ddr0_event_b_pad( .Z(PADDI), .PAD(ddr0_event_b));

  specify
    (ddr0_event_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge ddr0_event_b, 0:0:0);
    $width (negedge ddr0_event_b, 0:0:0);
  endspecify

endmodule

module ddr3_event_a ( output PADDI, input ddr3_event_a );

  xo2iobuf0658 ddr3_event_a_pad( .Z(PADDI), .PAD(ddr3_event_a));

  specify
    (ddr3_event_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge ddr3_event_a, 0:0:0);
    $width (negedge ddr3_event_a, 0:0:0);
  endspecify

endmodule

module ddr2_event_a ( output PADDI, input ddr2_event_a );

  xo2iobuf0658 ddr2_event_a_pad( .Z(PADDI), .PAD(ddr2_event_a));

  specify
    (ddr2_event_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge ddr2_event_a, 0:0:0);
    $width (negedge ddr2_event_a, 0:0:0);
  endspecify

endmodule

module ddr1_event_a ( output PADDI, input ddr1_event_a );

  xo2iobuf0658 ddr1_event_a_pad( .Z(PADDI), .PAD(ddr1_event_a));

  specify
    (ddr1_event_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge ddr1_event_a, 0:0:0);
    $width (negedge ddr1_event_a, 0:0:0);
  endspecify

endmodule

module ddr0_event_a ( output PADDI, input ddr0_event_a );

  xo2iobuf0664 ddr0_event_a_pad( .Z(PADDI), .PAD(ddr0_event_a));

  specify
    (ddr0_event_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge ddr0_event_a, 0:0:0);
    $width (negedge ddr0_event_a, 0:0:0);
  endspecify

endmodule

module xo2iobuf0664 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module en_bp_5v ( input PADDO, output en_bp_5v );
  wire   GNDI;

  xo2iobuf0657 en_bp_5v_pad( .I(PADDO), .T(GNDI), .PAD(en_bp_5v));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_bp_5v) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_3v3_riser ( input PADDO, output en_3v3_riser );
  wire   GNDI;

  xo2iobuf0657 en_3v3_riser_pad( .I(PADDO), .T(GNDI), .PAD(en_3v3_riser));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_3v3_riser) = (0:0:0,0:0:0);
  endspecify

endmodule

module riser2_reset ( input PADDO, output riser2_reset );
  wire   GNDI;

  xo2iobuf0657 riser2_reset_pad( .I(PADDO), .T(GNDI), .PAD(riser2_reset));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => riser2_reset) = (0:0:0,0:0:0);
  endspecify

endmodule

module riser1_reset ( input PADDO, output riser1_reset );
  wire   GNDI;

  xo2iobuf0657 riser1_reset_pad( .I(PADDO), .T(GNDI), .PAD(riser1_reset));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => riser1_reset) = (0:0:0,0:0:0);
  endspecify

endmodule

module riser0_reset ( input PADDO, output riser0_reset );
  wire   GNDI;

  xo2iobuf0657 riser0_reset_pad( .I(PADDO), .T(GNDI), .PAD(riser0_reset));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => riser0_reset) = (0:0:0,0:0:0);
  endspecify

endmodule

module riser2_slot16b_prsnt ( output PADDI, input riser2_slot16b_prsnt );

  xo2iobuf0654 riser2_slot16b_prsnt_pad( .Z(PADDI), .PAD(riser2_slot16b_prsnt));

  specify
    (riser2_slot16b_prsnt => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser2_slot16b_prsnt, 0:0:0);
    $width (negedge riser2_slot16b_prsnt, 0:0:0);
  endspecify

endmodule

module riser2_slot_id1 ( output PADDI, input riser2_slot_id1 );

  xo2iobuf0654 riser2_slot_id1_pad( .Z(PADDI), .PAD(riser2_slot_id1));

  specify
    (riser2_slot_id1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser2_slot_id1, 0:0:0);
    $width (negedge riser2_slot_id1, 0:0:0);
  endspecify

endmodule

module riser2_slot_id0 ( output PADDI, input riser2_slot_id0 );

  xo2iobuf0654 riser2_slot_id0_pad( .Z(PADDI), .PAD(riser2_slot_id0));

  specify
    (riser2_slot_id0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser2_slot_id0, 0:0:0);
    $width (negedge riser2_slot_id0, 0:0:0);
  endspecify

endmodule

module riser1_slot16b_prsnt ( output PADDI, input riser1_slot16b_prsnt );

  xo2iobuf0654 riser1_slot16b_prsnt_pad( .Z(PADDI), .PAD(riser1_slot16b_prsnt));

  specify
    (riser1_slot16b_prsnt => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser1_slot16b_prsnt, 0:0:0);
    $width (negedge riser1_slot16b_prsnt, 0:0:0);
  endspecify

endmodule

module riser1_slot16a_prsnt ( output PADDI, input riser1_slot16a_prsnt );

  xo2iobuf0654 riser1_slot16a_prsnt_pad( .Z(PADDI), .PAD(riser1_slot16a_prsnt));

  specify
    (riser1_slot16a_prsnt => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser1_slot16a_prsnt, 0:0:0);
    $width (negedge riser1_slot16a_prsnt, 0:0:0);
  endspecify

endmodule

module riser1_slot_id2 ( output PADDI, input riser1_slot_id2 );

  xo2iobuf0654 riser1_slot_id2_pad( .Z(PADDI), .PAD(riser1_slot_id2));

  specify
    (riser1_slot_id2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser1_slot_id2, 0:0:0);
    $width (negedge riser1_slot_id2, 0:0:0);
  endspecify

endmodule

module riser1_slot_id1 ( output PADDI, input riser1_slot_id1 );

  xo2iobuf0654 riser1_slot_id1_pad( .Z(PADDI), .PAD(riser1_slot_id1));

  specify
    (riser1_slot_id1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser1_slot_id1, 0:0:0);
    $width (negedge riser1_slot_id1, 0:0:0);
  endspecify

endmodule

module riser1_slot_id0 ( output PADDI, input riser1_slot_id0 );

  xo2iobuf0654 riser1_slot_id0_pad( .Z(PADDI), .PAD(riser1_slot_id0));

  specify
    (riser1_slot_id0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser1_slot_id0, 0:0:0);
    $width (negedge riser1_slot_id0, 0:0:0);
  endspecify

endmodule

module riser0_slot16b_prsnt ( output PADDI, input riser0_slot16b_prsnt );

  xo2iobuf0654 riser0_slot16b_prsnt_pad( .Z(PADDI), .PAD(riser0_slot16b_prsnt));

  specify
    (riser0_slot16b_prsnt => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser0_slot16b_prsnt, 0:0:0);
    $width (negedge riser0_slot16b_prsnt, 0:0:0);
  endspecify

endmodule

module riser0_slot16a_prsnt ( output PADDI, input riser0_slot16a_prsnt );

  xo2iobuf0654 riser0_slot16a_prsnt_pad( .Z(PADDI), .PAD(riser0_slot16a_prsnt));

  specify
    (riser0_slot16a_prsnt => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser0_slot16a_prsnt, 0:0:0);
    $width (negedge riser0_slot16a_prsnt, 0:0:0);
  endspecify

endmodule

module riser0_slot_id2 ( output PADDI, input riser0_slot_id2 );

  xo2iobuf0654 riser0_slot_id2_pad( .Z(PADDI), .PAD(riser0_slot_id2));

  specify
    (riser0_slot_id2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser0_slot_id2, 0:0:0);
    $width (negedge riser0_slot_id2, 0:0:0);
  endspecify

endmodule

module riser0_slot_id1 ( output PADDI, input riser0_slot_id1 );

  xo2iobuf0654 riser0_slot_id1_pad( .Z(PADDI), .PAD(riser0_slot_id1));

  specify
    (riser0_slot_id1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser0_slot_id1, 0:0:0);
    $width (negedge riser0_slot_id1, 0:0:0);
  endspecify

endmodule

module riser0_slot_id0 ( output PADDI, input riser0_slot_id0 );

  xo2iobuf0654 riser0_slot_id0_pad( .Z(PADDI), .PAD(riser0_slot_id0));

  specify
    (riser0_slot_id0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge riser0_slot_id0, 0:0:0);
    $width (negedge riser0_slot_id0, 0:0:0);
  endspecify

endmodule

module usb2_ponrst ( input PADDO, output usb2_ponrst );
  wire   GNDI;

  xo2iobuf0657 usb2_ponrst_pad( .I(PADDO), .T(GNDI), .PAD(usb2_ponrst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => usb2_ponrst) = (0:0:0,0:0:0);
  endspecify

endmodule

module usb1_ponrst ( input PADDO, output usb1_ponrst );
  wire   GNDI;

  xo2iobuf0657 usb1_ponrst_pad( .I(PADDO), .T(GNDI), .PAD(usb1_ponrst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => usb1_ponrst) = (0:0:0,0:0:0);
  endspecify

endmodule

module pcie_sata_rst ( input PADDO, output pcie_sata_rst );
  wire   GNDI;

  xo2iobuf0657 pcie_sata_rst_pad( .I(PADDO), .T(GNDI), .PAD(pcie_sata_rst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pcie_sata_rst) = (0:0:0,0:0:0);
  endspecify

endmodule

module pcie_usb1_rst ( input PADDO, output pcie_usb1_rst );
  wire   GNDI;

  xo2iobuf0657 pcie_usb1_rst_pad( .I(PADDO), .T(GNDI), .PAD(pcie_usb1_rst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pcie_usb1_rst) = (0:0:0,0:0:0);
  endspecify

endmodule

module pcie_usb0_rst ( input PADDO, output pcie_usb0_rst );
  wire   GNDI;

  xo2iobuf0657 pcie_usb0_rst_pad( .I(PADDO), .T(GNDI), .PAD(pcie_usb0_rst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pcie_usb0_rst) = (0:0:0,0:0:0);
  endspecify

endmodule

module pcie_nvme1_rst ( input PADDO, output pcie_nvme1_rst );
  wire   GNDI;

  xo2iobuf0657 pcie_nvme1_rst_pad( .I(PADDO), .T(GNDI), .PAD(pcie_nvme1_rst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pcie_nvme1_rst) = (0:0:0,0:0:0);
  endspecify

endmodule

module pcie_nvme0_rst ( input PADDO, output pcie_nvme0_rst );
  wire   GNDI;

  xo2iobuf0657 pcie_nvme0_rst_pad( .I(PADDO), .T(GNDI), .PAD(pcie_nvme0_rst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pcie_nvme0_rst) = (0:0:0,0:0:0);
  endspecify

endmodule

module pcie_swb_prst ( input PADDO, output pcie_swb_prst );
  wire   GNDI;

  xo2iobuf0659 pcie_swb_prst_pad( .I(PADDO), .T(GNDI), .PAD(pcie_swb_prst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pcie_swb_prst) = (0:0:0,0:0:0);
  endspecify

endmodule

module pcie_swa_prst ( input PADDO, output pcie_swa_prst );
  wire   GNDI;

  xo2iobuf0659 pcie_swa_prst_pad( .I(PADDO), .T(GNDI), .PAD(pcie_swa_prst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pcie_swa_prst) = (0:0:0,0:0:0);
  endspecify

endmodule

module pcie_swb_sys_rst ( input PADDO, output pcie_swb_sys_rst );
  wire   GNDI;

  xo2iobuf0659 pcie_swb_sys_rst_pad( .I(PADDO), .T(GNDI), 
    .PAD(pcie_swb_sys_rst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pcie_swb_sys_rst) = (0:0:0,0:0:0);
  endspecify

endmodule

module pcie_swa_sys_rst ( input PADDO, output pcie_swa_sys_rst );
  wire   GNDI;

  xo2iobuf0659 pcie_swa_sys_rst_pad( .I(PADDO), .T(GNDI), 
    .PAD(pcie_swa_sys_rst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => pcie_swa_sys_rst) = (0:0:0,0:0:0);
  endspecify

endmodule

module sg1_pcie0_l0_reset ( output PADDI, input sg1_pcie0_l0_reset );

  xo2iobuf0658 sg1_pcie0_l0_reset_pad( .Z(PADDI), .PAD(sg1_pcie0_l0_reset));

  specify
    (sg1_pcie0_l0_reset => PADDI) = (0:0:0,0:0:0);
    $width (posedge sg1_pcie0_l0_reset, 0:0:0);
    $width (negedge sg1_pcie0_l0_reset, 0:0:0);
  endspecify

endmodule

module sg0_pcie1_l0_reset ( output PADDI, input sg0_pcie1_l0_reset );

  xo2iobuf0658 sg0_pcie1_l0_reset_pad( .Z(PADDI), .PAD(sg0_pcie1_l0_reset));

  specify
    (sg0_pcie1_l0_reset => PADDI) = (0:0:0,0:0:0);
    $width (posedge sg0_pcie1_l0_reset, 0:0:0);
    $width (negedge sg0_pcie1_l0_reset, 0:0:0);
  endspecify

endmodule

module sg0_pcie1_l0_reset_MGIOL ( input DI, LSR, CLK, output IN );
  wire   VCCI, DI_dly, CLK_dly, LSR_dly;

  smuxlregsre0665 bmc_reset_ctrl_inst_sig_r0io( .D0(DI_dly), .SP(VCCI), 
    .CK(CLK_dly), .LSR(LSR_dly), .Q(IN));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module smuxlregsre0665 ( input D0, SP, CK, LSR, output Q );

  IFS1P3IX INST01( .D(D0), .SP(SP), .SCLK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module cpub_sys_reset ( input PADDO, output cpub_sys_reset );
  wire   GNDI;

  xo2iobuf0666 cpub_sys_reset_pad( .I(PADDO), .T(GNDI), .PAD(cpub_sys_reset));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => cpub_sys_reset) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0666 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module cpua_sys_reset ( input PADDO, output cpua_sys_reset );
  wire   GNDI;

  xo2iobuf0666 cpua_sys_reset_pad( .I(PADDO), .T(GNDI), .PAD(cpua_sys_reset));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => cpua_sys_reset) = (0:0:0,0:0:0);
  endspecify

endmodule

module pg_pcie_sw_0v8_b ( output PADDI, input pg_pcie_sw_0v8_b );

  xo2iobuf0667 pg_pcie_sw_0v8_b_pad( .Z(PADDI), .PAD(pg_pcie_sw_0v8_b));

  specify
    (pg_pcie_sw_0v8_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_pcie_sw_0v8_b, 0:0:0);
    $width (negedge pg_pcie_sw_0v8_b, 0:0:0);
  endspecify

endmodule

module xo2iobuf0667 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module pg_pcie_sw_0v8_a ( output PADDI, input pg_pcie_sw_0v8_a );

  xo2iobuf0667 pg_pcie_sw_0v8_a_pad( .Z(PADDI), .PAD(pg_pcie_sw_0v8_a));

  specify
    (pg_pcie_sw_0v8_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_pcie_sw_0v8_a, 0:0:0);
    $width (negedge pg_pcie_sw_0v8_a, 0:0:0);
  endspecify

endmodule

module en_pcie_sw_0v8_b ( input PADDO, output en_pcie_sw_0v8_b );
  wire   GNDI;

  xo2iobuf0657 en_pcie_sw_0v8_b_pad( .I(PADDO), .T(GNDI), 
    .PAD(en_pcie_sw_0v8_b));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_pcie_sw_0v8_b) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_pcie_sw_0v8_a ( input PADDO, output en_pcie_sw_0v8_a );
  wire   GNDI;

  xo2iobuf0657 en_pcie_sw_0v8_a_pad( .I(PADDO), .T(GNDI), 
    .PAD(en_pcie_sw_0v8_a));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_pcie_sw_0v8_a) = (0:0:0,0:0:0);
  endspecify

endmodule

module psu_ps_on_cpld ( input IOLDO, output psu_ps_on_cpld );
  wire   GNDI;

  xo2iobuf0657 psu_ps_on_cpld_pad( .I(IOLDO), .T(GNDI), .PAD(psu_ps_on_cpld));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => psu_ps_on_cpld) = (0:0:0,0:0:0);
  endspecify

endmodule

module psu_ps_on_cpld_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre0668 server_power_control_psu_on_offio( .D0(OPOS_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module mfflsre0668 ( input D0, SP, CK, LSR, output Q );

  FD1P3DX INST01( .D(D0), .SP(SP), .CK(CK), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module psu1_prsnt ( output PADDI, input psu1_prsnt );

  xo2iobuf0654 psu1_prsnt_pad( .Z(PADDI), .PAD(psu1_prsnt));

  specify
    (psu1_prsnt => PADDI) = (0:0:0,0:0:0);
    $width (posedge psu1_prsnt, 0:0:0);
    $width (negedge psu1_prsnt, 0:0:0);
  endspecify

endmodule

module psu0_prsnt ( output PADDI, input psu0_prsnt );

  xo2iobuf0654 psu0_prsnt_pad( .Z(PADDI), .PAD(psu0_prsnt));

  specify
    (psu0_prsnt => PADDI) = (0:0:0,0:0:0);
    $width (posedge psu0_prsnt, 0:0:0);
    $width (negedge psu0_prsnt, 0:0:0);
  endspecify

endmodule

module psu1_alert ( output PADDI, input psu1_alert );

  xo2iobuf0654 psu1_alert_pad( .Z(PADDI), .PAD(psu1_alert));

  specify
    (psu1_alert => PADDI) = (0:0:0,0:0:0);
    $width (posedge psu1_alert, 0:0:0);
    $width (negedge psu1_alert, 0:0:0);
  endspecify

endmodule

module psu0_alert ( output PADDI, input psu0_alert );

  xo2iobuf0654 psu0_alert_pad( .Z(PADDI), .PAD(psu0_alert));

  specify
    (psu0_alert => PADDI) = (0:0:0,0:0:0);
    $width (posedge psu0_alert, 0:0:0);
    $width (negedge psu0_alert, 0:0:0);
  endspecify

endmodule

module psu1_pwrok ( output PADDI, input psu1_pwrok );

  xo2iobuf0669 psu1_pwrok_pad( .Z(PADDI), .PAD(psu1_pwrok));

  specify
    (psu1_pwrok => PADDI) = (0:0:0,0:0:0);
    $width (posedge psu1_pwrok, 0:0:0);
    $width (negedge psu1_pwrok, 0:0:0);
  endspecify

endmodule

module xo2iobuf0669 ( output Z, input PAD );

  IB INST1( .I(PAD), .O(Z));
endmodule

module psu0_pwrok ( output PADDI, input psu0_pwrok );

  xo2iobuf0669 psu0_pwrok_pad( .Z(PADDI), .PAD(psu0_pwrok));

  specify
    (psu0_pwrok => PADDI) = (0:0:0,0:0:0);
    $width (posedge psu0_pwrok, 0:0:0);
    $width (negedge psu0_pwrok, 0:0:0);
  endspecify

endmodule

module bp_ncp_gok ( output PADDI, input bp_ncp_gok );

  xo2iobuf0654 bp_ncp_gok_pad( .Z(PADDI), .PAD(bp_ncp_gok));

  specify
    (bp_ncp_gok => PADDI) = (0:0:0,0:0:0);
    $width (posedge bp_ncp_gok, 0:0:0);
    $width (negedge bp_ncp_gok, 0:0:0);
  endspecify

endmodule

module bp_ncp_d_oc ( output PADDI, input bp_ncp_d_oc );

  xo2iobuf0654 bp_ncp_d_oc_pad( .Z(PADDI), .PAD(bp_ncp_d_oc));

  specify
    (bp_ncp_d_oc => PADDI) = (0:0:0,0:0:0);
    $width (posedge bp_ncp_d_oc, 0:0:0);
    $width (negedge bp_ncp_d_oc, 0:0:0);
  endspecify

endmodule

module en_12v_bp ( input PADDO, output en_12v_bp );
  wire   GNDI;

  xo2iobuf0657 en_12v_bp_pad( .I(PADDO), .T(GNDI), .PAD(en_12v_bp));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_12v_bp) = (0:0:0,0:0:0);
  endspecify

endmodule

module ncp0_gok ( output PADDI, input ncp0_gok );

  xo2iobuf0654 ncp0_gok_pad( .Z(PADDI), .PAD(ncp0_gok));

  specify
    (ncp0_gok => PADDI) = (0:0:0,0:0:0);
    $width (posedge ncp0_gok, 0:0:0);
    $width (negedge ncp0_gok, 0:0:0);
  endspecify

endmodule

module ncp0_d_oc ( output PADDI, input ncp0_d_oc );

  xo2iobuf0654 ncp0_d_oc_pad( .Z(PADDI), .PAD(ncp0_d_oc));

  specify
    (ncp0_d_oc => PADDI) = (0:0:0,0:0:0);
    $width (posedge ncp0_d_oc, 0:0:0);
    $width (negedge ncp0_d_oc, 0:0:0);
  endspecify

endmodule

module en_vdd_12v ( input PADDO, output en_vdd_12v );
  wire   GNDI;

  xo2iobuf0657 en_vdd_12v_pad( .I(PADDO), .T(GNDI), .PAD(en_vdd_12v));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vdd_12v) = (0:0:0,0:0:0);
  endspecify

endmodule

module pg_3v3_riser ( output PADDI, input pg_3v3_riser );

  xo2iobuf0654 pg_3v3_riser_pad( .Z(PADDI), .PAD(pg_3v3_riser));

  specify
    (pg_3v3_riser => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_3v3_riser, 0:0:0);
    $width (negedge pg_3v3_riser, 0:0:0);
  endspecify

endmodule

module pg_bp_5v ( output PADDI, input pg_bp_5v );

  xo2iobuf0654 pg_bp_5v_pad( .Z(PADDI), .PAD(pg_bp_5v));

  specify
    (pg_bp_5v => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_bp_5v, 0:0:0);
    $width (negedge pg_bp_5v, 0:0:0);
  endspecify

endmodule

module pg_5v_aux ( output PADDI, input pg_5v_aux );

  xo2iobuf0654 pg_5v_aux_pad( .Z(PADDI), .PAD(pg_5v_aux));

  specify
    (pg_5v_aux => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_5v_aux, 0:0:0);
    $width (negedge pg_5v_aux, 0:0:0);
  endspecify

endmodule

module pg_vdd_5v ( output PADDI, input pg_vdd_5v );

  xo2iobuf0654 pg_vdd_5v_pad( .Z(PADDI), .PAD(pg_vdd_5v));

  specify
    (pg_vdd_5v => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vdd_5v, 0:0:0);
    $width (negedge pg_vdd_5v, 0:0:0);
  endspecify

endmodule

module pg_vdd_3v3 ( output PADDI, input pg_vdd_3v3 );

  xo2iobuf0654 pg_vdd_3v3_pad( .Z(PADDI), .PAD(pg_vdd_3v3));

  specify
    (pg_vdd_3v3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vdd_3v3, 0:0:0);
    $width (negedge pg_vdd_3v3, 0:0:0);
  endspecify

endmodule

module pg_vdd_1v8 ( output PADDI, input pg_vdd_1v8 );

  xo2iobuf0654 pg_vdd_1v8_pad( .Z(PADDI), .PAD(pg_vdd_1v8));

  specify
    (pg_vdd_1v8 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vdd_1v8, 0:0:0);
    $width (negedge pg_vdd_1v8, 0:0:0);
  endspecify

endmodule

module pg_pcie_h_b ( output PADDI, input pg_pcie_h_b );

  xo2iobuf0658 pg_pcie_h_b_pad( .Z(PADDI), .PAD(pg_pcie_h_b));

  specify
    (pg_pcie_h_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_pcie_h_b, 0:0:0);
    $width (negedge pg_pcie_h_b, 0:0:0);
  endspecify

endmodule

module pg_ddr_phy_b ( output PADDI, input pg_ddr_phy_b );

  xo2iobuf0654 pg_ddr_phy_b_pad( .Z(PADDI), .PAD(pg_ddr_phy_b));

  specify
    (pg_ddr_phy_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_ddr_phy_b, 0:0:0);
    $width (negedge pg_ddr_phy_b, 0:0:0);
  endspecify

endmodule

module pg_vtt_b1 ( output PADDI, input pg_vtt_b1 );

  xo2iobuf0654 pg_vtt_b1_pad( .Z(PADDI), .PAD(pg_vtt_b1));

  specify
    (pg_vtt_b1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vtt_b1, 0:0:0);
    $width (negedge pg_vtt_b1, 0:0:0);
  endspecify

endmodule

module pg_vtt_b0 ( output PADDI, input pg_vtt_b0 );

  xo2iobuf0654 pg_vtt_b0_pad( .Z(PADDI), .PAD(pg_vtt_b0));

  specify
    (pg_vtt_b0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vtt_b0, 0:0:0);
    $width (negedge pg_vtt_b0, 0:0:0);
  endspecify

endmodule

module pg_vpp_b1 ( output PADDI, input pg_vpp_b1 );

  xo2iobuf0654 pg_vpp_b1_pad( .Z(PADDI), .PAD(pg_vpp_b1));

  specify
    (pg_vpp_b1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vpp_b1, 0:0:0);
    $width (negedge pg_vpp_b1, 0:0:0);
  endspecify

endmodule

module pg_vpp_b0 ( output PADDI, input pg_vpp_b0 );

  xo2iobuf0654 pg_vpp_b0_pad( .Z(PADDI), .PAD(pg_vpp_b0));

  specify
    (pg_vpp_b0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vpp_b0, 0:0:0);
    $width (negedge pg_vpp_b0, 0:0:0);
  endspecify

endmodule

module pg_vddq_b1 ( output PADDI, input pg_vddq_b1 );

  xo2iobuf0654 pg_vddq_b1_pad( .Z(PADDI), .PAD(pg_vddq_b1));

  specify
    (pg_vddq_b1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vddq_b1, 0:0:0);
    $width (negedge pg_vddq_b1, 0:0:0);
  endspecify

endmodule

module pg_vddq_b0 ( output PADDI, input pg_vddq_b0 );

  xo2iobuf0654 pg_vddq_b0_pad( .Z(PADDI), .PAD(pg_vddq_b0));

  specify
    (pg_vddq_b0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vddq_b0, 0:0:0);
    $width (negedge pg_vddq_b0, 0:0:0);
  endspecify

endmodule

module pg_pcie_phy_b ( output PADDI, input pg_pcie_phy_b );

  xo2iobuf0654 pg_pcie_phy_b_pad( .Z(PADDI), .PAD(pg_pcie_phy_b));

  specify
    (pg_pcie_phy_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_pcie_phy_b, 0:0:0);
    $width (negedge pg_pcie_phy_b, 0:0:0);
  endspecify

endmodule

module pg_vddc_b ( output PADDI, input pg_vddc_b );

  xo2iobuf0654 pg_vddc_b_pad( .Z(PADDI), .PAD(pg_vddc_b));

  specify
    (pg_vddc_b => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vddc_b, 0:0:0);
    $width (negedge pg_vddc_b, 0:0:0);
  endspecify

endmodule

module pg_pcie_h_a ( output PADDI, input pg_pcie_h_a );

  xo2iobuf0658 pg_pcie_h_a_pad( .Z(PADDI), .PAD(pg_pcie_h_a));

  specify
    (pg_pcie_h_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_pcie_h_a, 0:0:0);
    $width (negedge pg_pcie_h_a, 0:0:0);
  endspecify

endmodule

module pg_ddr_phy_a ( output PADDI, input pg_ddr_phy_a );

  xo2iobuf0654 pg_ddr_phy_a_pad( .Z(PADDI), .PAD(pg_ddr_phy_a));

  specify
    (pg_ddr_phy_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_ddr_phy_a, 0:0:0);
    $width (negedge pg_ddr_phy_a, 0:0:0);
  endspecify

endmodule

module pg_vtt_a1 ( output PADDI, input pg_vtt_a1 );

  xo2iobuf0654 pg_vtt_a1_pad( .Z(PADDI), .PAD(pg_vtt_a1));

  specify
    (pg_vtt_a1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vtt_a1, 0:0:0);
    $width (negedge pg_vtt_a1, 0:0:0);
  endspecify

endmodule

module pg_vtt_a0 ( output PADDI, input pg_vtt_a0 );

  xo2iobuf0654 pg_vtt_a0_pad( .Z(PADDI), .PAD(pg_vtt_a0));

  specify
    (pg_vtt_a0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vtt_a0, 0:0:0);
    $width (negedge pg_vtt_a0, 0:0:0);
  endspecify

endmodule

module pg_vpp_a1 ( output PADDI, input pg_vpp_a1 );

  xo2iobuf0654 pg_vpp_a1_pad( .Z(PADDI), .PAD(pg_vpp_a1));

  specify
    (pg_vpp_a1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vpp_a1, 0:0:0);
    $width (negedge pg_vpp_a1, 0:0:0);
  endspecify

endmodule

module pg_vpp_a0 ( output PADDI, input pg_vpp_a0 );

  xo2iobuf0654 pg_vpp_a0_pad( .Z(PADDI), .PAD(pg_vpp_a0));

  specify
    (pg_vpp_a0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vpp_a0, 0:0:0);
    $width (negedge pg_vpp_a0, 0:0:0);
  endspecify

endmodule

module pg_vddq_a1 ( output PADDI, input pg_vddq_a1 );

  xo2iobuf0654 pg_vddq_a1_pad( .Z(PADDI), .PAD(pg_vddq_a1));

  specify
    (pg_vddq_a1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vddq_a1, 0:0:0);
    $width (negedge pg_vddq_a1, 0:0:0);
  endspecify

endmodule

module pg_vddq_a0 ( output PADDI, input pg_vddq_a0 );

  xo2iobuf0654 pg_vddq_a0_pad( .Z(PADDI), .PAD(pg_vddq_a0));

  specify
    (pg_vddq_a0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vddq_a0, 0:0:0);
    $width (negedge pg_vddq_a0, 0:0:0);
  endspecify

endmodule

module pg_pcie_phy_a ( output PADDI, input pg_pcie_phy_a );

  xo2iobuf0654 pg_pcie_phy_a_pad( .Z(PADDI), .PAD(pg_pcie_phy_a));

  specify
    (pg_pcie_phy_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_pcie_phy_a, 0:0:0);
    $width (negedge pg_pcie_phy_a, 0:0:0);
  endspecify

endmodule

module pg_vddc_a ( output PADDI, input pg_vddc_a );

  xo2iobuf0654 pg_vddc_a_pad( .Z(PADDI), .PAD(pg_vddc_a));

  specify
    (pg_vddc_a => PADDI) = (0:0:0,0:0:0);
    $width (posedge pg_vddc_a, 0:0:0);
    $width (negedge pg_vddc_a, 0:0:0);
  endspecify

endmodule

module en_vdd_5v ( input PADDO, output en_vdd_5v );
  wire   GNDI;

  xo2iobuf0657 en_vdd_5v_pad( .I(PADDO), .T(GNDI), .PAD(en_vdd_5v));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vdd_5v) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vdd_3v3 ( input PADDO, output en_vdd_3v3 );
  wire   GNDI;

  xo2iobuf0657 en_vdd_3v3_pad( .I(PADDO), .T(GNDI), .PAD(en_vdd_3v3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vdd_3v3) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vdd_1v8 ( input PADDO, output en_vdd_1v8 );
  wire   GNDI;

  xo2iobuf0657 en_vdd_1v8_pad( .I(PADDO), .T(GNDI), .PAD(en_vdd_1v8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vdd_1v8) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vqps18_b ( input PADDO, output en_vqps18_b );
  wire   GNDI;

  xo2iobuf0657 en_vqps18_b_pad( .I(PADDO), .T(GNDI), .PAD(en_vqps18_b));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vqps18_b) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_pcie_h_b ( input PADDO, output en_pcie_h_b );
  wire   GNDI;

  xo2iobuf0657 en_pcie_h_b_pad( .I(PADDO), .T(GNDI), .PAD(en_pcie_h_b));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_pcie_h_b) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_ddr_phy_b ( input PADDO, output en_ddr_phy_b );
  wire   GNDI;

  xo2iobuf0657 en_ddr_phy_b_pad( .I(PADDO), .T(GNDI), .PAD(en_ddr_phy_b));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_ddr_phy_b) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vtt_b1 ( input PADDO, output en_vtt_b1 );
  wire   GNDI;

  xo2iobuf0657 en_vtt_b1_pad( .I(PADDO), .T(GNDI), .PAD(en_vtt_b1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vtt_b1) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vtt_b0 ( input PADDO, output en_vtt_b0 );
  wire   GNDI;

  xo2iobuf0657 en_vtt_b0_pad( .I(PADDO), .T(GNDI), .PAD(en_vtt_b0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vtt_b0) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vpp_b1 ( input PADDO, output en_vpp_b1 );
  wire   GNDI;

  xo2iobuf0657 en_vpp_b1_pad( .I(PADDO), .T(GNDI), .PAD(en_vpp_b1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vpp_b1) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vpp_b0 ( input PADDO, output en_vpp_b0 );
  wire   GNDI;

  xo2iobuf0657 en_vpp_b0_pad( .I(PADDO), .T(GNDI), .PAD(en_vpp_b0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vpp_b0) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vddq_b1 ( input PADDO, output en_vddq_b1 );
  wire   GNDI;

  xo2iobuf0657 en_vddq_b1_pad( .I(PADDO), .T(GNDI), .PAD(en_vddq_b1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vddq_b1) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vddq_b0 ( input PADDO, output en_vddq_b0 );
  wire   GNDI;

  xo2iobuf0657 en_vddq_b0_pad( .I(PADDO), .T(GNDI), .PAD(en_vddq_b0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vddq_b0) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_pcie_phy_b ( input PADDO, output en_pcie_phy_b );
  wire   GNDI;

  xo2iobuf0657 en_pcie_phy_b_pad( .I(PADDO), .T(GNDI), .PAD(en_pcie_phy_b));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_pcie_phy_b) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vddc_b ( input PADDO, output en_vddc_b );
  wire   GNDI;

  xo2iobuf0657 en_vddc_b_pad( .I(PADDO), .T(GNDI), .PAD(en_vddc_b));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vddc_b) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vqps18_a ( input PADDO, output en_vqps18_a );
  wire   GNDI;

  xo2iobuf0657 en_vqps18_a_pad( .I(PADDO), .T(GNDI), .PAD(en_vqps18_a));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vqps18_a) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_pcie_h_a ( input PADDO, output en_pcie_h_a );
  wire   GNDI;

  xo2iobuf0657 en_pcie_h_a_pad( .I(PADDO), .T(GNDI), .PAD(en_pcie_h_a));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_pcie_h_a) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_ddr_phy_a ( input PADDO, output en_ddr_phy_a );
  wire   GNDI;

  xo2iobuf0657 en_ddr_phy_a_pad( .I(PADDO), .T(GNDI), .PAD(en_ddr_phy_a));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_ddr_phy_a) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vtt_a1 ( input PADDO, output en_vtt_a1 );
  wire   GNDI;

  xo2iobuf0657 en_vtt_a1_pad( .I(PADDO), .T(GNDI), .PAD(en_vtt_a1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vtt_a1) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vtt_a0 ( input PADDO, output en_vtt_a0 );
  wire   GNDI;

  xo2iobuf0657 en_vtt_a0_pad( .I(PADDO), .T(GNDI), .PAD(en_vtt_a0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vtt_a0) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vpp_a1 ( input PADDO, output en_vpp_a1 );
  wire   GNDI;

  xo2iobuf0657 en_vpp_a1_pad( .I(PADDO), .T(GNDI), .PAD(en_vpp_a1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vpp_a1) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vpp_a0 ( input PADDO, output en_vpp_a0 );
  wire   GNDI;

  xo2iobuf0657 en_vpp_a0_pad( .I(PADDO), .T(GNDI), .PAD(en_vpp_a0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vpp_a0) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vddq_a1 ( input PADDO, output en_vddq_a1 );
  wire   GNDI;

  xo2iobuf0657 en_vddq_a1_pad( .I(PADDO), .T(GNDI), .PAD(en_vddq_a1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vddq_a1) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vddq_a0 ( input PADDO, output en_vddq_a0 );
  wire   GNDI;

  xo2iobuf0657 en_vddq_a0_pad( .I(PADDO), .T(GNDI), .PAD(en_vddq_a0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vddq_a0) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_pcie_phy_a ( input PADDO, output en_pcie_phy_a );
  wire   GNDI;

  xo2iobuf0657 en_pcie_phy_a_pad( .I(PADDO), .T(GNDI), .PAD(en_pcie_phy_a));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_pcie_phy_a) = (0:0:0,0:0:0);
  endspecify

endmodule

module en_vddc_a ( input PADDO, output en_vddc_a );
  wire   GNDI;

  xo2iobuf0657 en_vddc_a_pad( .I(PADDO), .T(GNDI), .PAD(en_vddc_a));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => en_vddc_a) = (0:0:0,0:0:0);
  endspecify

endmodule

module bmc_pwrgd ( input PADDO, output bmc_pwrgd );
  wire   GNDI;

  xo2iobuf0657 bmc_pwrgd_pad( .I(PADDO), .T(GNDI), .PAD(bmc_pwrgd));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bmc_pwrgd) = (0:0:0,0:0:0);
  endspecify

endmodule

module bmc_pcie_rst ( input IOLDO, output bmc_pcie_rst );
  wire   GNDI;

  xo2iobuf0657 bmc_pcie_rst_pad( .I(IOLDO), .T(GNDI), .PAD(bmc_pcie_rst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (IOLDO => bmc_pcie_rst) = (0:0:0,0:0:0);
  endspecify

endmodule

module bmc_pcie_rst_MGIOL ( output IOLDO, input OPOS, CE, CLK );
  wire   GNDI, OPOS_dly, CLK_dly, CE_dly;

  mfflsre0668 bmc_reset_ctrl_inst_bmc_prstio( .D0(OPOS_dly), .SP(CE_dly), 
    .CK(CLK_dly), .LSR(GNDI), .Q(IOLDO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLK => IOLDO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, OPOS, 0:0:0, 0:0:0,,,, CLK_dly, OPOS_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module bmc_extrst ( input PADDO, output bmc_extrst );
  wire   GNDI;

  xo2iobuf0657 bmc_extrst_pad( .I(PADDO), .T(GNDI), .PAD(bmc_extrst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bmc_extrst) = (0:0:0,0:0:0);
  endspecify

endmodule

module bmc_ssprst ( input PADDO, output bmc_ssprst );
  wire   GNDI;

  xo2iobuf0657 bmc_ssprst_pad( .I(PADDO), .T(GNDI), .PAD(bmc_ssprst));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => bmc_ssprst) = (0:0:0,0:0:0);
  endspecify

endmodule

module fm_pwr_btn ( output PADDI, input fm_pwr_btn );

  xo2iobuf0654 fm_pwr_btn_pad( .Z(PADDI), .PAD(fm_pwr_btn));

  specify
    (fm_pwr_btn => PADDI) = (0:0:0,0:0:0);
    $width (posedge fm_pwr_btn, 0:0:0);
    $width (negedge fm_pwr_btn, 0:0:0);
  endspecify

endmodule

module fm_pwr_btn_MGIOL ( input DI, LSR, CLK, output IN );
  wire   VCCI, DI_dly, CLK_dly, LSR_dly;

  smuxlregsre0665 server_power_control_power_signal_detect_inst_sig_r0io( 
    .D0(DI_dly), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(IN));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (CLK => IN) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI, 0:0:0, 0:0:0,,,, CLK_dly, DI_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cpld_extrst ( output PADDI, input cpld_extrst );

  xo2iobuf0654 cpld_extrst_pad( .Z(PADDI), .PAD(cpld_extrst));

  specify
    (cpld_extrst => PADDI) = (0:0:0,0:0:0);
    $width (posedge cpld_extrst, 0:0:0);
    $width (negedge cpld_extrst, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  INV INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
